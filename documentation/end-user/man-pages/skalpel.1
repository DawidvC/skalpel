.\" Process this file with
.\" groff -man -Tascii skalpel.1
.\"
.\"
\" ##############################################################
\" ##############################################################
\" ##
\" ## Copyright 2010 2011 John Pirie
\" ## Copyright 2010 Steven Shiells
\" ##
\" ## This file is free software: you can redistribute it and/or modify
\" ## it under the terms of the GNU General Public License as published by
\" ## the Free Software Foundation, either version 3 of the License, or
\" ## (at your option) any later version.
\" ##
\" ## This file is distributed in the hope that it will be useful,
\" ## but WITHOUT ANY WARRANTY; without even the implied warranty of
\" ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\" ## GNU General Public License for more details.
\" ##
\" ## You should have received a copy of the GNU General Public License
\" ## along with Skalpel.  If not, see <http://www.gnu.org/licenses/>.
\" ##
\" ## Authors: Steven Shiells
\" ## Date: January 2010
\" ##
\" ###############################################################
\" ###############################################################
.TH SKALPEL 1 "February 2013" Linux "User Manuals"
.SH NAME
skalpel - a type error slicer for Standard ML
.SH SYNOPSIS
skalpel [OPTION]... [FILE]
.SH DESCRIPTION
Skalpel is a type error slicer for SML, developed by the ULTRA group of
Heriot-Watt University, Edinburgh.

Traditional type error messages given for SML can be hard to decipher
and often indicate incomplete and unprecise locations as the source of
the programming error.  The error messages produced are also biased
because they report only one location which is dependent on the way
which the abstract syntax tree is traversed.

Skalpel aims to eliminate these problems.  The error messages produced by
the type error slicer offer textual explanations of the errors and
highlights all and only those program points which contribute to the
error.

.SH OPTIONS

-l <file> place output in <file> in lisp format

-h <file> place output in <file> in HTML format

-s <file> place output in <file> in SML format

-j <file> place output in <file> in JSON format

-x <file> place output in <file> in XML format

-p <file> place output in <file> in perl format

-t <timelimet> specify a numerical time limit

-x <true/false> suppress exception handling (dev mode)

-c <directory> Run analysis engine on tests in <directory>

-e <0 | 1> toggles echo of slice display in terminal (0=no, 1=yes)

-b <0 | 1 | 2 <file> > Set basis level as 0 (no basis), 1 (built in basis), 2 <file> (specify file as basis)

-d PARSING   shows debugging output during parsing various files

-d NO_COLOURS                        doesn't put ANSI colour information in debug strings
   ONE_RUN                           give debug output only once (don't show during minimisation process)
   STATE                             gives internal state output
   TESTING                           shows debugging info when running the test database
   CONSTRAINT_PATH                   shows path taken through the constraint generator
   CONSTRAINT_GENERATION             shows constraint generation debugging information
   CONSTRAINT_SOLVING                shows constraint solving debugging information
   PROGRAM_LABELLING <filename>      gives a labelled program output in latex to file specified in
                                     environment variable $SKALPEL_LABELLED_PROGRAM
   BASIS                             applies debugging flags also to the basis file
   BASIS_LABELLING <filename>        gives a labelled basis output in latex to file specified in
                                     environment variable $SKALPEL_LABELLED_BASIS
   EQUALITY_TYPES                    debugging information for equality types

-bo <0 | 1> If set to 1, hides basis slice in overloading errors

-tab <tabwidth> define the tab width in user code regions

-sol <solution> define solution to use (default 9)

-min <true/false> if true, shows non-minimal errors

--print-env <true/false> whether to print the environment

--show-legend Shows the legend for notation and colour of slice display in the terminal

--search-space <1,2,3> Use search space 1 (lists), 2 (sets), or 3 (red black tree)

--help Show this help text%
