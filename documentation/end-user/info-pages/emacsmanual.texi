\input texinfo   @c -*-texinfo-*-
@c ##############################################################
@c ##############################################################
@c ##
@c ##Copyright 2010 Steven Shiells
@c ##Copyright 2011 John Pirie
@c ##Copyright 2013 Heriot-Watt University
@c ##
@c ## This file is part of skalpel-emacs - an Emacs User Interface for a
@c ## Type Error Slicer for Standard ML written by the ULTRA Group of 
@c ## Heriot-Watt University, Edinburgh.
@c ##
@c ## skalpel-emacs is free software: you can redistribute it and/or modify
@c ## it under the terms of the GNU General Public License as published by
@c ## the Free Software Foundation, either version 3 of the License, or
@c ## (at your option) any later version.
@c ##
@c ## skalpel-emacs is distributed in the hope that it will be useful,
@c ## but WITHOUT ANY WARRANTY; without even the implied warranty of
@c ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c ## GNU General Public License for more details.
@c ##
@c ## You should have received a copy of the GNU General Public License
@c ## along with skalpel-emacs.  If not, see <http://www.gnu.org/licenses/>.
@c ##
@c ## Authors: Steven Shiells
@c ##          John Pirie
@c ## Date: January 2010
@c ##       September 2011
@c ##
@c ###############################################################
@c ###############################################################
@c %**start of header
@setfilename Skalpel.info
@settitle Using a Type Error Slicer for SML in Emacs
@c %**end of header

@copying
This manual is for skalpel-emacs, version 0.1.

Copyright @copyright{} 2010 Steven Shiells.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled "GNU Free
Documentation License".
@end quotation
@end copying

@ifinfo
@insertcopying
@end ifinfo

@titlepage
@sp 10
@center @titlefont{Using a Type Error Slicer in Emacs}
@sp 2
@c subtitle subtitle-if-any
@author Steven Shiells

@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@c @iftex
@c @c So the toc is printed at the start.
@c @contents
@c @end iftex

@dircategory Emacs
@direntry
* Skalpel: (Skalpel).                 A Type Error Slicer for SML
@end direntry

@ifnottex
@c @node   Top,    Using Skalpel, (dir),     (dir)
@node   Top,    Kinds of Type Errors, , (dir)
@c @top

@c This manual is for skalpel-emacs, version 0.1.
@end ifnottex

@menu
* Kinds of Type Errors::
* Understanding the Highlighting::
* Using Skalpel::
* Personalising Skalpel::
@end menu

@contents

@node Kinds of Type Errors, Understanding the Highlighting, Top, Top

@chapter Kinds of Type Errors

This section contains brief descriptions of the different kinds of
type errors that Skalpel handles.

@itemize
@item Type Constructor Clash

@itemize @minus
@item occurs when two type constructors are constrained to be equal
but are not, for example @code{int = bool}.
@end itemize

@item Arity Clash

@itemize @minus
@item occurs when a sequence of length N is constrained to be equal to
a sequence of length M where N is not equal to M.
@end itemize

@item Record Clash

@itemize @minus
@item occurs when two records are constrained to be equal but a label
appears in one record and does not appear in the other.
@end itemize

@item Circularity Error

@itemize @minus
@item occurs when a type is constrained to contain itself (infinite type).
@end itemize

@item Inclusion Error

@itemize @minus
@item occurs when there is a free type variable in a database or type declaration
@end itemize

@item Multi-occurrence Error

@itemize @minus
@item occurs when an identifier is bound more than once in one declaration.
@end itemize

@item Applied Value Variable Error

@itemize @minus
@item occurs when a value variable is supplied an argument in a pattern.
@end itemize

@item Different Function Name Error

@itemize @minus
@item occurs when a function is declared with 2 differing names.
@end itemize

@item Free Explicit Type Variable at Top Level Error

@itemize @minus
@item occurs when there is a type variable in the top level
environment that is not bound to anything.
@end itemize

@item Value on the Left of @code{as} Error

@itemize @minus
@item occurs when the identifier on the left of an @code{as} is not a
value variable.
@end itemize

@item An Identifier Occurs in a Pattern Both Applied and Not Applied
to an Argument

@itemize @minus
@item as the name suggests.
@end itemize

@item Different Number of Arguments Error

@itemize @minus
@item occurs when a function is defined to take an inconsistent number
of arguments.
@end itemize

@item Ungeneralisable Bound Type Variable

@itemize @minus
@item occurs when SML does not allow generalisation of type variables
at certain value declarations.
@end itemize

@item Unmatched Specification Error

@itemize @minus
@item occurs when a structure does not declare an identifier that it
is supposed to.
@end itemize

@end itemize

@node Understanding the Highlighting, Using Skalpel, Kinds of Type Errors, Top

@chapter Understanding the Highlighting

Skalpel highlights parts of the source files using
different techniques to identify the different reasons for which a piece
of code participates in the error. An explanation of the colours used
is given below.

@itemize
@item Red Highlighting

@itemize @minus
@item Indicates that the highlighted code contributes to the error.
@end itemize

@item Blue/Gray Highlighting

@itemize @minus
@item Indicates that the highlighted code is an end point of either

@itemize @minus
@item a type constructor clash
@item an arity clash
@item a record clash
@end itemize

@end itemize

@item Green Highlighting

@itemize @minus
@item Indicates that the highlighted code is the endpoint of a record clash.
@end itemize

@item Purple Highlighting

@itemize @minus
@item Indicates that the highlighted code either

@itemize @minus
@item provides information about an identifier
@item is expansive
@end itemize

@end itemize

@item Yellow Highlighting

@itemize @minus
@item Indicates that Skalpel cannot parse the file.
@end itemize

@item Outline of a Box

@itemize @minus
@item The use of the underline with no background highlighting is used to
    signify that the underlined text may be irrelevant, but its presence
    definitely contributes to the error.
@item The use of the underline can indicate on of two things;

@enumerate
@item The application of a function to an argument (the underlined
	    code) takes part in an error.
@item The underlined code is the unique argument of a type name
	   to make explicit that its arity is 1 (that is, it has 1
           argument).
@end enumerate
@item @strong{NOTE}: The colour of the underline can be any of those above.
@item @strong{NOTE}: This notation is equivalent to the box notation used in
          other interfaces to Skalpel.

@end itemize

@end itemize

@node Using Skalpel, Personalising Skalpel, Understanding the Highlighting, Top

@c %%%%%%%% USING SKALPEL %%%%%%%%

@chapter Using Skalpel

@menu
* Running Skalpel::
* Viewing the Errors::
* Removing the Highlighting::
* Verbose Error Messages::
* Creating a Type Error Slicer Control File::
* Using with a Local Version of Emacs::
@end menu

@c %%%%%%%% RUNNING SKALPEL %%%%%%%%

@node Running Skalpel, Viewing the Errors, , Using Skalpel

@section Running Skalpel

@subsection Running Skalpel on a Single File

@itemize
@item Open Emacs.
@item Load the SML file you wish to check.
@item From the @strong{Errors} menu select the @strong{Run Slicer} option.
@end itemize

@subsection Running Skalpel on a Multiple Files

@itemize
@item Open Emacs.
@item Load Skalpel control file (@code{.tes}) or
@code{.CM} file for
the files you wish to check.
@strong{Note}: If you do not know what a type error slicer control file is
please read Section @ref{Creating a Type Error Slicer Control File}@c add reference.
@item From the @strong{Errors} menu select the @strong{Run Slicer}
option.
@end itemize

@c %%%%%%%% VIEWING THE ERRORS %%%%%%%%

@node Viewing the Errors, Removing the Highlighting, Running Skalpel, Using Skalpel

@section Viewing the Errors

Skalpel reports any errors by highlighting sections of
the source code.  There may be multiple errors per file, some of which
may highlight parts of the source code that are also highlighted by
some other errors.  In order to distinguish between the highlighting
of one error from another, the type error slice allows you to cycle
through all of the errors one at a time.

@subsection View the Next Error Slice

@itemize
@item From the @strong{Errors} menu select the @strong{Next Slice}
option.
@end itemize

@subsection View the Previous Error Slice
@itemize
@item From the @strong{Errors} menu select the @strong{Previous Slice}
  option.
@end itemize

@subsection Navigating Through the Different Parts of the Error Slice
Type Error Slices may be quite large and may be at the opposite end of
a file, or in different files altogether.  In these cases, it may not
be possible to view the whole slice all at the one time.  In order to
determine what the problem is, it may be necessary to view all of
parts of the slice.  Skalpel allows the user to cycle
through the different parts of the error slice that are not currently
in visible on screen.  Details on how to use this feature can be seen below.

@itemize
@item From the @strong{Errors} menu select the @strong{Next Part of Slice}.
@end itemize

@subsection Viewing the Details of the Error

@itemize
@item Details of an error are automatically shown via a buffer which
  appears whenever the slicer is ran. If the user does not wish to see
  details of the error, they can disable this by unchecking the menu
  item Type Error Slicer -> Slicing -> Automatically display
    slice information.

@end itemize

@subsection Removing basis information during overloading errors

@itemize
@item When encountering overloading errors, a lot of the information
  which is related to the errors lies in the basis. While this
  information is needed for correctness, there can be quite a lot of
  information to display and it is often of little help. In order to
  hide this information, make sure the Type Error Slicing ->
    Slicing -> Show basis information for overloading errors checkbox
  is not ticked.

@end itemize

@c %%%%%%%% REMOVING THE HIGHLIGHTING %%%%%%%%

@node Removing the Highlighting, Verbose Error Messages, Viewing the Errors, Using Skalpel

@section Removing the Highlighting

@subsection Removing the Highlighting from the Current File

@itemize
@item From the @strong{Errors} menu select the @strong{Remove
Highlighting from Current File} option.
@end itemize

@subsection Removing the Highlighting from all Files

@itemize
@item From the @strong{Errors} menu select the @strong{Remove
  Highlighting from all Files} option.
@end itemize

@strong{Note}: All highlighting in all the files are automatically removed
each time Skalpel is run, allowing for the new
highlighting to be displayed properly.

@c %%%%%%%%% TURN VERBOSE ERROR MESSAGES ON/OFF%%%%%%%%%%%

@node Verbose Error Messages, Creating a Type Error Slicer Control File, Removing the Highlighting, Using Skalpel

@section Turn Verbose Error Messages On/Off

Verbose error messages contain additional details of the errors which
may be useful for users who are not familiar with SML.  We allow users
to decide whether or not they wish to display these error messages.
Details of how to turn the verbose error messages on/off can be seen
below.  Note that verbosity of error messages only affect whether a
tool-tip includes explanations on the kind of the error in focus and
explanations on the colours used in the highlighting.

@subsection Turning Verbose Error Messages On

@itemize
@item From the @strong{Errors}
menu select the @strong{Verbose Error Messages?} option.
@end itemize

@subsection Turning Verbose Error Messages Off

@itemize
@item From the @strong{Errors} menu
deselect the @strong{Verbose Error Messages?} option.
@end itemize


@c %%%%%%%% CREATING A TES CONTROL FILE %%%%%%%%

@node Creating a Type Error Slicer Control File, Using with a Local Version of Emacs, Verbose Error Messages, Using Skalpel

@section Creating a Type Error Slicer Control File
@c ADD LABEL

A type error slicer control file is a file that allows the type error
slicer to slice multiple files.  It is essentially a file that contains
an ordered list of files you wish to run the slicer on.  The steps
needed to create a type error slicer control file are listed below.

@enumerate
@item
Create a new file with the @code{.tes} extension.

@item
Add a list of files you wish to check - these files can either
be SML (@code{.sml}) or other type error slicer control
(@code{.tes}) files.

@strong{Note}: The order in which you list the files is important.  Please list
all files which depend on other files @strong{after} the files they
depend on, otherwise some errors may not be found.  Listing files in
the wrong order in a @code{.tes} file may also cause false
errors to be found.

@item
Save the file.
@end enumerate

@node Using with a Local Version of Emacs, , Creating a Type Error Slicer Control File, Using Skalpel

@section Using Skalpel with a Local Version of Emacs

In order to use Skalpel with a locally
installed version of Emacs you must load the file
@code{/usr/local/share/emacs/site-lisp/skalpel-emacs/skalpel-config.el}

To save the hassle of having to do this each time you start Emacs you
may wish to load this file in your .emacs(.el) file.

@c %%%%%%%%%%%%% PERSONALISING THE SLICER %%%%%%%%%%%%%%%%%%%%

@node Personalising Skalpel, , Using Skalpel, Top

@chapter Personalising Skalpel

@menu
* Changing Colours of Highlights::
@end menu

@c %%%%%%%%% SETTING UP KEY BINDINGS %%%%%%%%%%

@node Changing Colours of Highlights

@section Changing Colours of Highlights

If you do not like the default colours (or any way the parts of the
code are highlighted) then you can edit them to something that you
feel more comfortable with.  If you wish to change any of the features
you can do so by using Emacs @code{customize-faces} command and
selecting the face you wish to edit.

The faces that Skalpel uses are;

@itemize
@item @code{skalpel-standard-error-focus}
@item @code{skalpel-standard-error-non-focus}
@item @code{skalpel-standard-error-box-focus}
@item @code{skalpel-standard-error-box-non-focus}
@item @code{skalpel-standard-error-head-focus}
@item @code{skalpel-end-point-one-focus}
@item @code{skalpel-end-point-one-non-focus}
@item @code{skalpel-end-point-one-box-focus}
@item @code{skalpel-end-point-one-box-non-focus}
@item @code{skalpel-end-point-one-head-focus}
@item @code{skalpel-end-point-two-focus}
@item @code{skalpel-end-point-two-non-focus}
@item @code{skalpel-end-point-two-box-focus}
@item @code{skalpel-end-point-two-box-non-focus}
@item @code{skalpel-end-point-two-head-focus}
@item @code{skalpel-merged-regions-focus}
@item @code{skalpel-merged-regions-non-focus}
@item @code{skalpel-further-explanations-focus}
@item @code{skalpel-further-explanations-non-focus}
@item @code{skalpel-further-explanations-box-focus}
@item @code{skalpel-further-explanations-box-non-focus}
@item @code{skalpel-parsing-error-focus}
@item @code{skalpel-parsing-error-non-focus}
@end itemize

@bye
