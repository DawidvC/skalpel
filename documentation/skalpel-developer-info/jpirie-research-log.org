* Schedule
** 2011

October 2011: repo, copyright
November 2011: JSON test database
December 2011 Overloading bug, command-line interface, nuke wrapper

** 2012

January 2012: SML/NJ -> MLton, massive renaming, equality types?
February 2012: renaming, code cleaning
March 2012: AST exploration, code documentation, renaming
April 2012: Automatic test framework, bug fixes, renaming, equality types, user guide
May 2012: equality types, bugzilla
June 2012: equality types, first year report
July 2012: equality types, first year report, test framework, web demo
August 2012 - poster, debugging output, finishing equality types
September 2012 - equality types, Debugging output, new release, displaying separate slice
October 2012 - overloding resolution?, ESOP?
November 2012 - ?
December 2012 - ?

** 2013

January 2013 - ?
February 2013 - ?
March 2013 - PPDP/ICFP?
April 2013 - ?
May 2013 - ?
June 2013 - ?
July 2013 - Popl ?
August 2013 - ?
September 2013 - ?
October 2013 - ESOP?

* Paper targets
** Measure programming improvement
** Algorithm speed / engineering
** Graphical slice presentation
** Generalising to other languages
** Whatever is needed to make Skalpel work on itself
* WARNINGS
** Equality types
   ConsBindOf uses an old method of carrying around equality type
   variables, an equality type variable should be generated from the
   type name and constrained that way, rather than carrying it around
   in the standard type constraint.

   In constraint generation, case f_exp of A.ExpFn doesn't have any
   equality type constraints

   Remove my warning comments in Unification.sml (in type constructor
   accessor solving, case match 2), they should be fine now. Also in
   componetype.

   A.DecDatRep and A.SpecRep get eqtvs from f_longtycon. Need to check
   labels for these.

   A.ExpCase has equality type variables which should have constraints
   generated out of it but it currently throws them away (I guess
   that's just not been implemented yet). Similarly for A.ExpConsList,
   A.ExpOr, A.ExpAnd, A.ExpIte, A.ExpWhile (what is that anyway?),
   A.ExpRaise, and A.ExpHandle.

   A.ExpOp generates a fresh equality type variable and returns that
   as its list. Should this equality type variable have any kind of
   constraint on it?

   f_progone throws away the equality type variables it gets back from
   f_exp. Is this correct? Probably it is because I can't think of any
   constraints off the top of my head that we would want to do at the
   f_progone level.

   f_labexp has something worrying where we take the first element in
   the list of new equality type variables and put that into a type
   constraint with a type variable. Will this cause a problem later?
   Do we need multiple type constraints.

   Some of the constraints in log (2012-09-06-14:59) have been left
   unimplemented, because I actually think that we can do without
   them. Furthermore, this constraint:

   | SOME (T.EQUALITY_TYPE_DEPENDANCY((T.EQUALITY_TYPE_VAR eqtv), resultLabels, resultDeps, resultIds), recordInformation) =>

   when handling a constraint from an equality type variable to an
   equality type variable list, does nothing, and simply solves the
   remaining constraints. I'm not sure if this is ever a situation
   where we should solve these constraints more carefully, testing
   will need to be completed.

* TODOs
** Test framework
*** (2012-07-31-01:46) Web demo

    Currently the web demo is completely untested by the test
    framework. This is an important thing to test as it will break
    frequently, so think of a way that this could be done.

*** (2012-07-20-10:50) Running tests from a fresh clone of the repository

The best way for the test framework to work is if it actually ran
tests from a fresh clone of the repository, then the test framework
would have to do the same steps that any user would have to do in
order to run its tests.

It also has the additional advantage that if anyone in the Skalpel
project wants to know how something has to be built, they can just
look at the test framework. Naturally, this information should be
documented anyway, but the test framework will have to contain the
exact steps needed to build whatever it is going to test. This would
be quite a good thing for us.

So for example, at the moment the MLB files cannot be generated from
the CM files if I remember correctly. This is the sort of thing that
the test framework would pick up on, and have to make the necessary
changes to the MLB files after an attempt at conversion has been made.

*** (2012-07-02-16:45) Daily package building

Packages should be built daily by the test framework, and a report
should be generated whether it was possible to build the package or
not. As the test framework runs on a red hat system it is not possible
to generate say the debian packages, but we are still able to generate
quite a few of them.

*** (2012-07-02-16:46) Daily package testing

The packages that are built should also be installed and tested, and
the results of all of this should end up in the e-mail that gets sent
out in the morning. Wouldn't it be nice just to decide we were going
to release one day and just do it? :-)

*** (2012-07-02-16:48) Test Emacs front end works

We should test also the Emacs front end. It would somehow need to be
started with a Standard ML source file open, have the type error slice
run on that file, and check that Emacs is highlighting things inside
the file, and that the process terminates.

** Equality types implementation
*** (2012-06-29-21:19) Detection of equality type errors with the eqtype keyword

    In the case where we have 'eqtype x' in a signature (instead of
    what could be 'type x') an equality status constraint of
    EQUALITY_TYPE should be generated for x (obviously). Then if the
    user is to do something like 'val y : x = 5.0' then an equality
    type error should be output by Skalpel, the EQUALITY_TYPE status
    of x clashing with the NOT_EQUALITY_TYPE status of the 5.0.

*** (2012-08-08-16:13) Value declarations with ticks

    val 'b f = fn x : 'b => x = x;

    Does this apply to things other than value declarations?

    fun 'b f (x:'b) = x = x

    (same as above)

    I don't get generate NOT_EQUALITY_TYPE for 'a for example,
    although EQUALITY_TYPE is generated for ''b we need the constraint
    for 'a.

    This also demonstrates the problem fairly well:

    fun f (x:'b) = x = x;
    Error-Type error in function application.
    Function: = : ''a * ''a -> bool
    Argument: (x, x) : 'a * 'a
    Reason: Can't unify ''a to 'a (Requires equality type)
    Found near x = x
    Static Errors

** Other
*** TODO (2012-08-30-15:16) Add tags to research log entries for August
* Research logs
** Tags available
   equality-types
   labels
   binders
   accessors
   write-up
   first-year-report
   test-framework
   other-implementations
   papers
   latex
   website
   poster
** 2012-06
*** 2012-06-26
tags: {equality-types, labels}

When we see an equality type variable (''a) we generated this:

val c   = E.initEqualityTypeConstraint (T.consEQUALITY_TYPE_VAR eqTypeVar) (T.EQUALITY_TYPE_STATUS(T.EQUALITY_TYPE)) lab

We still get the equality type error when this is constrained to be
NOT_EQUALITY_TYPE instead of EQUALITY_TYPE. Is the equality type error
actually really coming from here? If not, that explains the problem
with the missing label, because that's not where the equality type
error is coming from! I need to find the location where the equality
type error is coming from, and fix that (because it's likely wrong),
then we should get the label that's missing.

*** 2012-06-27
tags: {equality-types, binders, accessors, labels}

The error was not coming from the equality type variable, and rather
from a constraint EQUALITY_TYPE value that I had in for testing
purposes. This has to be updated. This is the reason that I have
started this research log, because when making quick changes for
debugging reasons, it's hell on earth to remember which changes in
which files I've actually made to temporarily aid debugging. It is
important to remember this information as it leads to problems later
on.

The problem currently is between the binder and the accessor. When we
are solving the accessor, we look up the binder, but we do not get all
the information that we need. We get most of it, but not all.

When we look up the binder we get something like this:

bind = TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n1,DECLARATION_CONS(0),l40154),ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l40154):TYPE_DEPENDANCY(TYPE_VAR(t31850,-,POLY,UNKNOWN),[40157],[],[]),l40154),FIELD_CONSTRUCTION((2,l40154):TYPE_DEPENDANCY(
TYPE_CONSTRUCTOR(TYPENAME_DEPENDANCY((n242,DECLARATION_CONS(1692),l40144),[40143,40144],[],[]),ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l40145):TYPE_VAR(t31854,-,POLY,UNKNOWN),l40145)],-,l40145),[40143,40144,40145],[],[]),l
40143,UNKNOWN),[40143],[],[]),l40154)],-,l40154),l40154,UNKNOWN),[40154,40155,40156],[],[])

We see in the last part of the TYPE_CONSTRUCTOR tuple we have an
UNKNOWN. Perhaps the solution would be to make this an
EQUALITY_TYPE_DEPENDANCY with an equality type variable which comes
from the datatype declaration. Then we would be able to use that when
generating constraints at the point that we solve the accessor.

Perhaps we should really have a different binder altogether for
equality types, and when we solve the accessor we get an equality type
dependancy with the equality type variable inside. It's rather
convenient the way it is though.

(2012-06-27-15:10)

Added warning in the warnings section as am constraining constyarrow
to always be an EQUALITY_TYPE. I think it's this construction that
will change the last value in the tuple from UNKNOWN to
EQUALITY_TYPE. If this is the case then I can look at where
constyarrow is being constructed and locate where the equality type
variable should go in.

(2012-06-27-15:17)

It is indeed the case that this is what causes the last part of the
tuple to change. Going to look through and find out which constyarrow
construction is generating this new EQUALITY_TYPE tuple value in the
constraint generator, when I find that I should hopefully be able to
switch it to an EQUALITY_TYPE_VAR with a variable from the datatype
definition and we should get the right error.

(2012-06-27-15:28)

There is now a a constyarrow'Eq (these names in Ty.sml really need
changing) which forces an EQUALITY_TYPE_STATUS given as a parameter
when generating a type arrow constraint, and constyarrow' has been
reverted to its normal state.

(2012-06-27-16:09)

There were some places in the code where we were checking the equality
type status that was in the TYPE_CONSTRUCTOR datatype constructor and
checking if it was the same as another TYPE_CONSTRUCTOR's value. This
code will need to be rewritten to handle this, for the moment
detection of this old kind of error is commented out. Some eq-test
files which I have will now not detect errors, so I'll have to go back
and make some of them work.

(2012-06-27-16:34)

So now the equality type variable from the datatype definition is
available when we solve the equality type accessor, but an error is
still not detected. The link that is missing is when solving two
equality type variables. There is enough information in the state now
for Skalpel to figure out that there is an equality type error, but
the code which solves the constraint of two equality type variables
will need to be extended.

(2012-06-27-16:38)

I think it's the case when solving two equality type variables that
we're not sure what to do when both of them already exist in the
map...

*** 2012-06-28
tags: {equality-types}

(2012-06-28-00:38)

It's not actually the case the analysis engine is stuck because an
equality type variable is being mapped to two things. Here's what
happens in a run of eq-test14.sml, which looks like this:

datatype ''a mydt = firstCons of int | secondCons of ''a;
secondCons(5.0)

We generate equality type variables for anything which can later turn
out to be an equality type error, and in the constraint generation
stage we constraint equality type variables to be equal to other
equality type variables. In some places we generate equality type
status values (EQUALITY_TYPE, NOT_EQUALITY_TYPE, or UNKNOWN), which
equality type variables are then constrained to be.

So in the shown code example, the constraint solver does the following
solving with respect to equality types:

(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17709) and EQUALITY_TYPE_VAR(eqtv17708). Labels = [40150]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17713) and EQUALITY_TYPE_VAR(eqtv17712). Labels = [40154]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17712) and EQUALITY_TYPE_VAR(eqtv17711). Labels = [40157]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17711) and EQUALITY_TYPE_STATUS(EQUALITY_TYPE). Labels = [40158]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17712) and EQUALITY_TYPE_STATUS(EQUALITY_TYPE). Labels = [40157,40158]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17713) and EQUALITY_TYPE_STATUS(EQUALITY_TYPE). Labels = [40154,40157,40158]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17718) and EQUALITY_TYPE_VAR(eqtv17717). Labels = [40160]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17714) and EQUALITY_TYPE_VAR(eqtv17718). Labels = [40160]

These are the constraints that we need to solve which were generated
from the first line of the code. When we constrain equality type
variables to be the same as other equality type variables, this is
stored in the internal state as an EQUALITY_TYPE_DEPENDANCY, which can
take as the first argument of its tuple an equality type variable, the
other arguments being label information, and some other arguments. The
reason we store these in the state as a dependancy and not directly as
an equality type variable is so that we can put label information
along side this information which provide program points WHY an
equality type variable is constrained to another equality type
variable.

So we have 17709 constrained to 17708, 17713 constrained to 17712,
17712 constrained to 17711, and 17711 constrained to
EQUALITY_TYPE. Aha! If that's the case then both 17712 and 17713 are
constrained to be equality types also! So when we see an equality type
variable being constrained to an equality type status, we look in the
state to see if that equality type variable is dependant on other type
variables. When we see this constraint:

(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17711) and EQUALITY_TYPE_STATUS(EQUALITY_TYPE). Labels = [40158]

We look up the state to see if other equality type variables are
dependancy on equality type variable 17711 and sure enough we see that
there are, 17712. We then generate a constraint that 17712 have the
same equality type status that 17711 is currently being constrained
to, and go to solve that along with the rest of the other
constraints. This works its way back up the equality type variable
constraints until it reaches the point where we discover that two type
variables are constrained to be the same, but both are mapped to
dependancies on differing EQUALITY_TYPE_STATUS values, at which point
we generate an equality type error, or we reach the point where we
encounter the point where we have an equality type variable which
isn't mapped to anything (as is the case with 17713 in the constraint
solving process above).

Alright so here things get a little bit more complicated, in the first
line of the code we generate a binder so that we able to reference
things in the first line of the code (the datatype constructor names
for example, in other lines of the code). When we reference datatype
constructor names for example, as indeed we do in line two of the
code, we have to solve the accessor. Here's what that looks like.

(EQUALITY_TYPES) Unification.sml: solving an equality type accessor. Labels = [40161]
sem = EQUALITY_TYPE_VAR(eqtv17714)
id = 1695
bind = TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n1,DECLARATION_CONS(0),l40154),ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l40154):TYPE_DEPENDANCY(TYPE_VAR(t31850,-,POLY,UNKNOWN),[40157],[],[]),l40154),FIELD_CONSTRUCTION((2,l40154):TYPE_DEPENDANCY(
TYPE_CONSTRUCTOR(TYPENAME_DEPENDANCY((n242,DECLARATION_CONS(1692),l40144),[40143,40144],[],[]),ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l40145):TYPE_VAR(t31854,-,POLY,UNKNOWN),l40145)],-,l40145),[40143,40144,40145],[],[]),l
40143,EQUALITY_TYPE_STATUS(UNKNOWN)),[40143],[],[]),l40154)],-,l40154),l40154,EQUALITY_TYPE_VAR(eqtv17713)),[40154,40155,40156],[],[])

In the last argument of the top level TYPE_CONSTRUCTOR datatype
constructor instantiation we see that there is some equality type
information available: EQUALITY_TYPE_VAR(eqtv17713). This is providing
us with an equality type variable from the first line which we can use
to generate constraints with. So when we see as follows:

(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17714) and EQUALITY_TYPE_VAR(eqtv17713). Labels = [40154,40155,40156,40161]

So here we have two numbers- 17714 and 17713. 17713 has already been
described, it comes from the first line of the code (specifically, the
ConBindOf function of Analyze,sml, where we generate the constraints
for new datatype constructors. The 17714 number comes from the
f_longidexp function of Analyze.sml, which is the point at which we
generate the equality type accessor constraint. While generating this
equality type accessor constraint, we feed this number in, and so we
end up with the equality type variable 17714 being constrained to be
the same number as 17713. We go on to solve the following further
constraints.

(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17717) and EQUALITY_TYPE_VAR(eqtv17716). Labels = [40162]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17716) and EQUALITY_TYPE_VAR(eqtv17715). Labels = [40163]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17715) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Labels = [40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17716) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Labels = [40163,40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17717) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Labels = [40162,40163,40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17718) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Labels = [40160,40162,40163,40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv17714) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Labels = [40160,40162,40163,40164]

So something isn't working here. We know that 17714 is of status
NOT_EQUALITY_TYPE, and that 17714 is constrained to 17713, and that
17713 is constrained to be of status EQUALITY_TYPE. The analysis
engine needs to be able to see this and detect this type error.

The problem is likely to do with the state. Part of the problem is
that it's difficult to know exactly why this problem is happening, and
this can be solved by acting on the earlier todo note on
2012-06-27. When we are checking that there are any status values that
clash, the type variables that we are solving along the way that we
set to be equal to equality type status values *should get this new
equality type status added to the map against it*. At the moment, we
just check that it's alright for the moment, and then we move on to
solve the rest of the constraints.

(2012-06-28-10:43)

Alright, whenever I see two equality type variables being constrained
to be equal to each other, but the one on the right hand side is
already in the map has an equality type status, I'm going to make it
the case that the left hand side is updated in the map to be also
constrained to be that status, where it is not mapped to a status
already. If it is mapped to a status already, then I need to check
whether there is a clash between the status values.

(2012-06-28-12:50)

AHHH that's got things going, we're getting equality type errors now
for the code fragment:

datatype ''a mydt = firstCons of int | secondCons of ''a;
secondCons(5.0)

Excellent. I'm going to go back and fix up some of the other equality
type error tests which have broken now, then maybe write up some more
details on how the equality type errors are detected in a given piece
of code if necessary.

(2012-06-28-13:18)

In the simple case of 5.0 = 5.0, the equality type error has now been
put back that was broken. This took me all of 60 seconds. It's much
easier to do things now there's a system in place (huzzah!).

(2012-06-28-15:52)

The case involving tuples doesn't work yet, I'm going to need to think
of a way to handle code like this: (1, 1.0) = (2, 2.0). The equality
type variable which represents the tuple should be constrained to be
equal to.... something. Not sure how this is going to work yet, I'll
need to have a think about this.

(2012-06-28-17:20)

Just got the analysis engine compiling again. I'm currently fixing up
the basic example:

val x = 1.0;
val y = 2.0;
x = y

The problem with this is that when we generate the NOT_EQUALITY_TYPE
status for 1.0, that information is not going into the binder when we
bind x, so subsequently when we solve the accessor in the third line
and constrain that to be an EQUALITY_TYPE, no error is discovered
because we by default get an UNKNOWN status put into the binder.

I have changed parts of the analysis engine so that equality type
variables are now propagated around more parts of the system, but I
still have to track down where this binder is situated, and put the
equality type variable representing 1.0 into that binder.

(2012-06-28-17:31)

I should really start using branches when working on this stuff. The
code broke and I want to commit it to the repository, but I don't want
to do that if the analysis engine doesn't compile (and I *will not* be
able to do that soon anyway, once I update the test framework, as if
the analysis engine cannot be compiled then the daily test e-mails
will fail, which is a situation I really want to avoid).

On the other hand it has kept me in the office another half hour to
fix the problem, so not all bad.

Skalpel has been *EXTREMELY* useful in the detection of type errors
today, in particular arity clash between functions. I was at the point
where I was about to remove all my changes and start again, because
the type error messages I was getting from the compiler were just
useless, and pointing me to silly places. Skalpel definitely saved me
probably 30-60 minutes in this case, an excellent win!

Irritating points though, when I see an arity clash, I want to see all
of the places where there are different arity. Skalpel highlights them
of course, but I have to scroll up and down the file looking for
them. It would be nice to have a button that executed the function
'jump to next bit in the file that has highlighting for the currently
selected slice'. This would be most helpful.

I have found that executing Skalpel on single files to be very
useful. What would also be nice is a 'Work on this file only' button,
where Skalpel runs on a file but suppresses any errors about undefined
identifiers.

Feels good that Skalpel definitely saved me time today. I'd MUCH
rather spend the time writing about that event here, than spent my
time stuck in a whirlwind of type errors. I'll maybe work on the first
year report this evening, it would be good to continue with that.

*** 2012-06-29
tags: {first-year-report, labels}

(2012-06-29-12:55)

Trying to stay away from developing equality types today and stick to
the first year report, but I'm writing down while I remember it that
equality type errors should have two endpoints not one. I guess we'll
need some kind of endpoint label information in the label sets that
are generated. We already generate errors that have multiple endpoints
though I can't remember exactly how this works, I should be able to
use the same mechanism for equality type error endpoints as type
constructor clashes...

Adding this as a TODO item also.

(2012-06-29-13:12)

Just found the org-mode guide I had filed away. Will fix this document
up to make use of some of the nice org features.

** 2012-07
*** 2012-07-01
tags: {test-framework, first-year-report}
(2012-07-01-22:12)

I've updated the test framework. Now the repository will actually be
updated, a fresh binary will be generated from the new sources and the
tests will be ran on this new binary.

The compilation log has been added to the daily e-mail, so if
compilation fails we should see this in the e-mail.

Note that from this point, any source code that is pushed to the
master branch *should compile*. This has not always been the case in
the past but now it is necessary (and what should happen anyway, in
case others wish to clone the repository). Any developmental work
should be done on a branch, and then merged into the master branch
when it compiles again (it doesn't necessarily need to be stable, but
it should compile and shouldn't break lots of previous tests.

I'll try to be sure and look at the test framework output tomorrow
carefully, looking for bugs (for example, an empty e-mail or some big
error message). Hopefully I won't get some distraction that carts me
off in another direction, but I'll have the test framework e-mail to
remind me anyway.

Note that the test framework should still diff results against a
master, and not against the previous day. This is a change which still
needs to be made, and should go higher up on the priority list.

The literature review for the paper on variable name completion is
deemed to be finished, but perhaps I should talk more specifically
about their type inference algorithm? Does the reader really care?
Maybe I want to look at their algorithm in much more depth as part of
the review of other implementations (preferably in another section)?
Think about this.

*** 2012-07-02
tags: {test-framework, first-year-report}

(2012-07-02-10:48)

The reports from the test framework this morning are a bit strange,
the compilation output only lists the actions of MLLex. Perhaps this
is the only thing coming to stdout (the contents of which are added to
the e-mail). Are the warnings on compilation printed to stderr because
it would be good to have these too. Fiddling around with the first
year report so don't have time to look at this at the moment, I'll
have to come back to it.

(2012-07-02-11:56)

It might be nice to have syntax highlighting in the code that's being
used in the lstlisting environment but currently that is not the
case. Is that something which I should have? It is certainly the case
anyway that I'm going to need some LaTeX code which will highlight the
background and foreground of text in all the ways that the Skalpel
output does, but I should be able to get that from the paper perhaps
when Vincent commits the sources. Something to think about anyway.

In a different note, the indentation for lstlisting is mucked
up. Added a TODO item to fix that, it looks rather bizarre. Probably
just a parameter needs to be added to the figure environment or
something.

(2012-07-02-12:54)

There are new examples of things which aren't working with equality
types that I've discussed in the future work section. I have chosen
these examples because they are unlikely to be completed by the time
this report actually needs to be read by someone sometime soon. Do
these features last (detecting equality type errors in datatype
declaration where one constructor in the declaration can never be
compared for equality (eg int -> int), and eqtype in a signature
definiton) so that this text is technically accurate for as long as
possible. There should be other things to fix up with respect to
equality types if I have the time before this gets handed in anyway,
so I'll just work on the other things.

I'm going to continue on with the future work section I think and
finish that off, so that an entire section can be marked as complete
and I can move on, or review it as a whole with Joe and find things to
change.

(2012-07-02-16:26)

Hmm, not sure whether to talk about some of this material from the
Haack and Wells paper or not, namely things like how constraints are
assigned to program points and how minimized errors are found. If I
include the proper definitions then the document may increase in size
as it'll need to cover everything relevant, but I think I'm going to
have to include at least the definitions for labels and perhaps some
parts of the constraint system to describe how equality types are
implemented properly anyway. It would also allow me to talk at more
depth about the similarities between this paper and the implementation
of Skalpel, some years on now. Many of the definitions described in
the paper are still true, even some of the things about how the
unification algorithm and minimization algorithm work. I'll think
about that.

Perhaps it would be better not to discuss these details here, but just
to launch into a big discussion when talking about how equality types
are implemented, and describe everything there that is necessary. It
would be a bit strange to have text about how minimal slices are
found under a section title about equality types though. Perhaps
instead this information should go in a new chapter called
'Background' or something, where I could explain how everything works,
and that would allow me to talk about some of the technical aspects of
the Haack and Wells paper in the later literature review chapter, by
which time I'll have already have all the definitions I need.

(2012-07-02-16:58)

Alright, what I think I'm going to do with the overview is to move
section 1.3, the other approaches to type error slicing, to some other
chapter which looks at how other systems operate, and then clean the
overview up and keep it how it is.

Then perhaps after the overview would come a background section where
I can define how the current system works? Then perhaps extend that in
the first year work section with information about how the equality
types constraint generation and unification work?

While I think about it, it would give me an opportunity to look at the
symbols from the paper and would make me think about them some more,
as I'd have to extend it a little for equality types. It would perhaps
allow me to clean up the paper too, which I'm supposed to be doing at
some very much undefined time, and the paper would eventually be
updated to include work done on equality types anyway. I'll think some
more about this anyway.

*** 2012-07-03
tags: {first-year-report, other-implementations}

(2012-07-03-11:28)

The overview for the first year report is marked done, I'll maybe look
at bits of that with Joe in the next meeting. I still have a manual
page break on page 3 of the document, there's warning to this effect
but it would be good to sort that out. Referencing still needs to be
done also for the document, I guess I'll do that at the end after I've
finished writing the body of the text.

Vincent still hasn't been mentioned in this text, the work that he
did should be pointed out explicitly. A reference to his thesis will
also be needed. I'll add this to the TODO.

(2012-07-03-22:51)

Good lord, the Goto and Sasano implementation actually worked straight
away, kudos to them for having a system I can set up and get working
in under two minutes. It is indeed implemented entirely in Emacs lisp
though, and I guess the comments in what seems to be Japanese aren't
going to give me too much help on the matter.

The method that they have for allowing users to choose different
selections is very intuitive, though I don't think we can use this
mechanism to our advantage at this current time in Skalpel.

(2012-07-03-23:43)

Their tokenizer suffers from the magic numbers bad smell, I should
check we don't have the same smells in our grm file.

(2012-07-03-23:55)

I can see why they don't support much of the SML feature set, they're
in for a fair bit of engineering trouble if the implementation keeps
heading this way. I assume that they aren't actually wanting to end up
supporting all of the sml programming language in this way, it would
be pretty insane.

subst1, subst2, subst3, subst4?? AAAAHHH *flashbacks*. The code looks
to be pretty well written on the whole though, it's a bracket-fest but
that's to be expected. This car/cdr/caar/cdar stuff is driving me
batty, whoever chose those as names must surely be a masochist.

The 'unify' function in lambda-unification.sml is essentially their
constraint solver. Skimming over it, looks like they have cases for if
the left hand side and the right hand side are arrow types, if the
left hand side is a basic type and the right hand side is an arrow
type, and the same the other way around. I'll need to read over parts
of the paper again and try and match up what they have in the paper
with what the have in the implementation, which hopefully will not be
greatly difficult. I guess it'll depend whether what they have in
their paper accurately reflects their implementation...

*** 2012-07-04
tags: {other-implementations}

(2012-07-04-09:41)

Does this implementation by Goto and Sasano have both the W and V type
inference algorithms? They have something here for the W algorithm but
I'm not sure this algorithm would stand up on its own, perhaps it's
there solely to be used with the V algorithm. Trying to figure that
one out...

(2012-07-04-11:44)

Ok, it looks like they have implementations of both the W and V
algorithms. During the V algorithm they seem to run the W algorithm
when it comes to function applications:

;;function application
((appExpD-p expD)
 (let* ((result-for-m (type-inference-w env (appExpD-fun expD)))
 (result-set-for-d (lambda-type-inference-v 
      (apply-subst-to-env env (w-result-subst result-for-m))
      (appExpD-argD expD)))
 (result-set (map-set
'(lambda (x) 
   ;;When unification fails, the function unify throws an error with nil, which becomes the value of this catch expression.
   (catch 'error 
     (let* 
	 ((new-tyVar (varTy (freshTyVar)))
	  (S3 (unify (singleton-set (cons
				     (apply-subst-to-type (w-result-type result-for-m) (v-result-subst x))
				     (arrowTy (v-result-type x) new-tyVar))))))
       (v-result
	(union-subst S3 (union-subst (v-result-subst x) (w-result-subst result-for-m)))
	(apply-subst-to-type new-tyVar S3)
	(v-result-c x)))))
result-set-for-d)))
   (set-compact result-set))) ;;remove nil

That's alright. I suppose they don't need much more than the W
algorithm anyway, if there's a type error you aren't going to want to
include it in the suggestions list are you (well, we might want to do
that, but maybe highlight that suggestion in red or something and when
you hover over it get the slices showing why that choice would make
the code untypable, who knows).

*** 2012-07-06
tags: {papers, equality-types}

(2012-07-06-10:21)

Reading these papers is turning me into a zombie, going start doing
some more of the equality types implementation, then write up text
about that in the first year report afterwards.

(2012-07-06-12:16)

Have added a warning in to the warnings section, working on fixing a
test that broke. Note that in Ty.sml the constyarrow' equality type
status is fixed to be NOT_EQAULITY_TYPE.

(2012-07-06-12:28)

Warning removed. New warning added for fixing reals to be of
NOT_EQUALITY_TYPE status when creating the type constraint.

(2012-07-06-14:53)

This is causing the constraint solver to crash, likely because of the
previous warning about reals constrained to be NOT_EQUALITY_TYPE in
the last parameter of the type constraint initialization. I didn't
design this part of the constraint solver to accept this, and rightly
so, this should be an equality type dependancy if I remember correctly
(the other log entries and code seem to indicate that this is the case
also).

I'll make this a dependancy on the equality type variable that is
created in the SconReal function during constraint generation... that
should do the trick right?

Note that the endpoints still have to be fixed up. It might be nice
to finish up fixing the tests that I have to a good point, then start
looking at getting the endpoints right. Then after this is done I can
commit the equality type tests I have to the test database and get
them running daily for breakages.

This might be a nice point to extend the test framework a bit so that
the equality type tests sit in an equality-types/ folder inside the
suite of tests, rather than them being given the next point in the
enumeration sequence, which doesn't tell us much of anything.

Perhaps something like

equality-types/01-just-real-numbers.sml
equality-types/02-reals-inside-tuple.sml
equality-types/03-two-reals-with-variales.sml
equality-types/03-one-real-variable-self-test.sml
equality-types/04-real-and-variable-in-let.sml

or something, ideally clearer if possible and can be done without a
stupidly long file name. Just think about it. Oh, at the same time do
get the test framework working off a master file instead of the one
yesterday, and don't generate log files for tests which are the same
as the master. Much less test files in the repository that way. Some
kind of confirmation that the test suite ran though would be handy.

(2012-07-06-15:25)

I'm changing the TYPE_VAR constructor to take something of
equalityType in the last element of its tuple rather than an
equalityTypeStatus, be aware that this is going to affect compilation
pretty hard...

(2012-07-06-15:35)

Forcing the stripEqualityStatus (TYPE_VAR [...]) case to return an
empty list as its first element, this used to be eq. Adding a warning,
this should let me figure out where the errors are much more quickly.

*** 2012-07-09
tags: {equality-types, labels}
(2012-07-09-08:16)

Going to continue on with equality types for at least part of today,
then I'll have to work on the first year report. Most of this should
be at some sort of standard but the literature review still needs
work. Need to get the date when this is actually needed to be
completed, so I can get it out of the way and get on with finishing
equality types and move on.

(2012-07-09-10:05)

Is stripEqualityStatus actually needed in Ty.sml? We seem to use it in
the Env.sml file and in Unification, but I'm not totally convinced
that we actually need that any more...

(2012-07-09-10:40)

Actually, we don't use stripEqualityStatus in Env.sml, we have a
function which will indirectly use it though, but that function itself
is actually never called.

I'm going to try and remove this, if all hell breaks loose then I'll
put it back :o). I'm pretty sure this is something left over from a
previous way that equality types were represented

(2012-07-09-11:24)

I think the removal of stripEqualityStatusFromConstraints in Env.sml
went alright, that was one of the dependancies on stripEqualityStatus
in Ty.sml. There are two other calls to this function if I remember
correctly in the unification algorithm, if they aren't needed either,
or are in places where I am fixing the old code, then I can remove
this section of code.

This is important as it is this location where quite a few of the
compilation errors are coming from.

(2012-07-09-12:22)

stripEqualityStatus is actually used when solving equality type
accessors, I'm going to fix up that bit of the code for now, but it
might be an idea to think about moving it into the unification
algorithm if it's not needed anywhere else.

(2012-07-09-12:59)

I'm removing all the old equality type checks that we used to do (eg
in the case of TYPE_VAR and TYPE_VAR check that the eq properties were
the same, as we should now be checking all this information with
equality type variables (each constraint to a status).

(2012-07-09-14:43)

I'm suffering this problem again where the unification algorithm says
"Yes, I see the error!" then runs itself again, doesn't find the error
the second time around, realise that it should, and dies.

I'm still not quite sure what causes this problem, I thought it was
when there was a label missing but I don't think that's the case any
longer....

(2012-07-09-15:04)

It occurs to me that this problem with the repeated unification run
problem may indicate a problem with the unification algorithm, and
that it is *not* a problem with the constraint generation
algorithm. I'm not sure if this is definitely the case, maybe the
problem may still lie with the constraint generation algorithm, but if
it detected the equality type error once, then the constraints
generated are actually correct surely? It's what we take out for the
repeated runs that's wrong?

(2012-07-09-17:38)

Just had a thought, the second set of labels that I was talking about
in the warnings... is this the set of labels that I always found to be
empty about a year ago? It wasn't confirmed to be always empty but
that was what was suspected, look into confirming this. Perhaps run
the entire test database with debug output then see if any of the deps
have values? Note: A script will be needed to do that, the volume of
the output is far too large to be done by hand.

(2012-07-09-23:44)

Still on this problem with the unification algorithm falling over on
the second run. The problem is that I don't know what the real error
is for certain. The initial error was 'The error should be an error'
which I've changed to the current understanding which I've got now.

*** 2012-07-10
tags: {equality-types, labels, first-year-report, latex}
(2012-07-10-00:08)

It looks like the labels are correct, so why is this failing on the
next run? It looks to me like for some reason the accessors are being
solved incorrectly on the next run, when we look up the binder we
don't get the same binding the second time around.

(2012-07-10-00:57)

Got it, it was indeed a missing labels problem, there were labels that
were available from the TYPE_DEPENDANCY constructor but were not being
included, so I just unioned those labels with the labels that we had
already and the unification algorithm seemed perfectly happy to
continue.

I'm going to change the error that the unification spits out so that
it recommends that the developer look into missing labels, while I'm
not certain that this is always the case this is what I suspected
initially, and what it has turned out to be so it's a pretty good
guess.

Straight back to the first year report tomorrow, I think I'll try to
write up how current things work with respect to equality types, at
least in some shape or form, and try and write the conclusion which
should just leave me with the literature review to do before I can put
it aside until I speak to Joe.

Fairouz has offered to read some of the first year report, might be an
idea to do this as another pair of eyes can't possibly hurt. I might
do this tomorrow if I think it looks alright.

(2012-07-10-01:06)

Alright I've updated the error message that comes out in the
minimisation algorithm to give a hint to the developer that the
problem may be in the propagation of labels in the unification
algorithm. Hopefully this will help someone else, I'm sure I'll need
to know it again.

Committing this to the repository, this work wasn't done on a branch
but it really should have been. It would be good to start using
branches for the work that I'm doing and then pushing the unstable
changes to those branches, then the latest changes get backed up in
the repository but the main branch will still compile fine for
everyone.

(2012-07-10-12:20)

It's worth pointing out that the bug joe pointed out around line 3 in
the code:

val x = 1.0;
val y = 2.0;
if x = y
[...]

where the spaces in 'x = y' were not getting highlighted is now
fixed. This must have come from the newer way that things are
represented. I like it when bugs get fixed for free. I'll update the
screenshot that's going in the first year report.

(2012-07-10-14:20)

I'm not sure how to describe the way that equality types that have
been implemented. I don't know if I really want to drag in all the
definitions from the paper and do a full explanation with that. I
think I might just explain an overview of how it works without talking
about how the binders have been extended to hold equality type status
values, accessor solving has been extended to solve these equality
type status values, etc.

(2012-07-10-16:26)

The overview has been updated to describe the analysis engine even
though it was already marked completed. I'm going to use this
definition in the first year work section, breaking off to describe
the whole analysis engine there seemed to be a little out of place.

(2012-07-10-18:48)

Alright I've put in some text about the work that's been done on
equality types. I'm marking that section as 'DONE' and moving on to
the literature review / review of other type systems. I would ideally
like to finish one of these sections today but they are things that I
could spend months working on, so I'll just try to draw a line at a
sensible place.

I've started placing figures HERE. Not 'here' [h] but HERE [H] using:

\usepackage{float}
\restylefloat{figure}

in the preamble. Seems to stop latex doing completely silly things
like filling the rest of the page with text then placing the figure on
the next page when that is very much not desired.

(2012-07-10-23:00)

I've finished off some text for the conclusion now as well, but I
still need to think about some dates for a timetable. I guess I'll
just take two years from now as a thesis submission date, an equality
types completion date, sharing completion date, and fill in the
blanks. It's quite hard to guess this kind of thing but I guess it's
to think more about what's ahead than create anything which is accurate.

*** 2012-07-11
tags: {first-year-report}

(2012-07-11-13:46)

I've figured down some rough dates for things to be completed by
for the first year report, the text has been updated accordingly.

*** 2012-07-12
tags: {other-implementations, first-year-report}

(2012-07-12-01:59)

I'm trying to get this implementation for Seminal working so I can
talk a little bit about it in the first year report, I'm using
compiler sources from about 6 years ago so I expect there'll be a bit
of trouble on the way along.

Note that in the sources for the ocamlc compiler configuration script,
if you want to install to a certain prefix then you have to go in to
the script and add that in manually, the --prefix parameter is not
supported (well actually it looks like there is some kind of attempt
made there to support this, but I'm not going to start trying to fix
it at this, I just hacked it to make it work for what I need it to do
right now).

(2012-07-12-02:13)

Hm I seem to have constructed an example where Seminal suggests that a
function be changed so that it throws away its second argument so that
it won't cause a type error. I guess that's valid, but isn't it a
little unlikely that it's what the user actually wished to do?

I think I'll put this example in the first year report.

(2012-07-12-11:03)

Oh I forgot that the comments for this lambda-mode were in
Japanese. Curses! Plan is to clean the other-implementations.tex text
up, maybe add something to the text about lambda mode, then send bits
of text out to be proof read. Must e-mail Joe and ask when he wants
this report at some point today too, it can really be finished off at
any time.

Perhaps I should just get it to a finished state today and send that
out, then if Joe doesn't want it yet then I can just keep extending
the text, the literature review and so on, until he does want it. That
might be best actually, it would be good to get back on to the
implementation and keep pushing on with equality types. Hm.

I guess I should make some viva slides too, that sounds like the kind
of thing that might be necessary. Should be straight forward to do,
maybe I should get that done tomorrow if I get the report finished off
and sent out today...

(2012-07-12-12:54)

I've added some more comments to the text that existed which reviewed
λ-mode. I'm going to mark that as 'DONE' for now, so I can move on to
the literature review and get that cleaned up. Hopefully I'll be able
to look over everything at the end of the day.

Fairouz asked to look at some of the text, so I've sent her what I've
got at the moment. Hopefully she'll be able to look over the overview
if she has time.

Going to work on the literature review for the rest of the day and get
that text cleaned up, it needs much more love than it's currently had...

*** 2012-07-13

(2012-07-13-10:28)

Need to get the first year report to a completed state today to send
to Joe. Plan is to then take Fairouz' comments on Sunday, add those
in, then send that to Joe as well in the event that he has time to
read it. In any event the changes will be useful because that's all
text that should be going into the thesis document.

(2012-07-13-16:46)

Alright I've updated the literature review and done referencing for
the document. I'll send off an updated PDF now.

It should be noted that I'm sourcing some of my literature review from
the paper-reviews folder that I have in the repository. Either they
should be all integrated into the main document, or all of the
literature review paper reviews should end up in there, at the moment
there is some directly .tex file, and some in the paper-review folder,
which is not optimal.

We should also think about having some sort of shared bibtex file for
the ULTRA group, that might be a good thing to have available
somewhere. Something to think about certainly, I know people have
certain formats that they want to stick to so maybe we can define a
format for such a bibtex file. There must be formats that people
already used, maybe there's even a script that will check if a bibtex
file adheres to a certain format. Something to look into at some point.

*** 2012-07-17
tags: {first-year-report, latex}

(2012-07-17-23:41)

First year report is all done and been handed in, been working today
on a viva presentation which I've finished. It's worth noting a few
things when using the beamer package.

When including references, the \newblock command needs to be defined
as it's not defined in the beamer document class. So just do the usual
bibtex stuff, but the \bibliography command in a \frame, but add the
following definition at the top of the file:

\def\newblock{\hskip .11em plus .33em minus .07em}

Also, when using lstlisting code in a \frame, define the frame to be
fragile by doing this:

\begin{frame}[fragile]{Motivation for Skalpel project - type error
example}

I'm using the lstlisting package to get background highlighting for
code in .tex files. It can take a bit of fiddling to get the
background text to highlight exactly the way that it's needed, but
there's highlighting in the first year viva presentation (including an
endpoint which has a box), so look there for future reference.

I'm not sure if this is the same mechanism Vincent used, maybe it
would be nice to find that out.

The viva is scheduled for tomorrow, I guess work on the analysis
engine will recommence shortly after that and I can continue with
equality types.

*** 2012-07-19
tags: {first-year-report, test-framework}

(2012-07-19-09:21)

Started updating the first year report to include Joe's comments. I'll
do a little on this, then I'd like to get on with updating the test
framework.

(2012-07-19-12:01)

I have a suspicion that the test framework is not actually rebuilding
the analysis engine binary correctly after it gets the latest sources
from the public repository. I've added a change so that the existing
skalpel analysis engine binary is deleted before the tests are
performed.

(2012-07-19-12:40)

Moving the 'sem', 'id', and 'bind' variables which contain some
information (I know enough information about the roles of these to
change their names now I think) into debug statements. At the moment
they are just standard print statements, which when running the test
framework and piping the output to a file runs the /tmp directory out
of space on lxultra8.

(2012-07-19-13:51)

Put 6 lines of the first part of git log into the e-mail instead of 5,
when merging branches occur we need 6 lines. I'll look at what results
come out tomorrow, I suspect there's some kind of path problems, but
the compilation errors should make their way into the e-mail now.

(2012-07-19-15:15)

It occurs to me that the test framework should really run tests from a
*fresh clone* of the repository. Then the test framework will have to
do the same steps that a user has to do in order to build the test
framework, and can't make use of any existing files that are around.

*** 2012-07-20
tags: {test-framework}

(2012-07-20-10:33)

There was some incorrect code to the repository committed yesterday
with respect to removing a file in a bash script, which broke the test
framework. This should be fixed now.

It's interesting though that the errors file that was generated (which
comes from the /tmp directory) when trying to compile the analysis
engine contained the text that you would think would be part of stdout
(standard mlton based output). Maybe that is for some reason sent to
stderr, hm. I'll need to look into that.

I'm adding a change so that errors are no longer reported in a
separate file so instead of doing 1> and 2> for std[out|err]
redirection I'm now doing &>. It's probably going to be easier to read
this way in the e-mail anyway, as if stdout and stderr is interleaved
I might find it a pain to read.

I'm going to probably change the test framework today so that it tests
from a master file as well, that would be a nice addition. Also, if
there aren't any differences from the last run test, we shouldn't
bother creating a test report. That should mean that we don't have
lots of test logs in the repository and keep only the interesting
ones.

After I've finished updating that I'll be working on either equality
types or reading some papers. I've also still got the notes from Joe
from the first year report to finish typing up, might do that today as
well.

(2012-07-20-14:33)

All the viva-related forms are now handed in. Hans and Claire are both
happy so that should be that all sorted. Apparently they still don't
need my ethical approval form, so I'll just keep it until they do
actually want to receive that information from me.

*** 2012-07-22
tags: {test-framework}

I've changed the crontab entry for the test framework so that the
result of stdout gets placed in my directory, that should help with
debugging any problems that come up. Previously only stderr was
directed to a file, but the test framework didn't run today, and no
errors were output to stderr. I think I have found the cause of this
and fixed it, but the stdout output would have been nice to help this
debugging process.

Now the crontab entry looks like this:

0 7 * * * /u1/pg/jp95/repos/skalpel/testing/run-test-framework.sh >/u1/pg/jp95/test-framework-output 2>/u1/pg/jp95/test-framework-errors

I've added a bit of documentation to how the test framework operates,
which can be found in
documentation/skalpel-developer-info/test-framework. Maybe I'll make a
symbolic link to this from the testing/ folder of the repository, I'll
think about that. There needs to be more text of this form, but this
is all I have time to write at the moment.

*** 2012-07-23
tags: {test-framework, equality-types}

(2012-07-23-12:16)

The test framework e-mail reported a series of failures this morning,
which were a result of me poking it with a sharp stick to see if it
was actually doing what it was supposed to be doing, which it turns
out it was not.

The e-mails from the last couple of days have silently failed to build
the analysis engine, then run tests on whatever version of the skalpel
analysis engine happens to exist in the repository. As we now remove
this binary, the test framework *must* generate a new version
correctly or it will not be able to run the analysis engine tests.

The problem with building the new version of the binary was that the
$PATH environment variable was not being set when running
cronjobs. I've updated the cron command that we run to load the file I
have which declares my $PATH, which allows the test framework to find
the binaries it needs to build the analysis engine binary such as
mlton and mllex.

I've also added the analysis engine version hash to the test e-mail,
just to be doubly sure that we are in fact getting the correct
version. Hopefully the e-mail that comes through tomorrow morning
should have everythnig fixed.

(2012-07-23-14:44)

I think I've worked out a way for equality type errors to get multiple
endpoints. Essentially, all I want to do here is to report two
endpoint labels when reporting an equality type error. The first is
easy to get, as in the function that we're currently in at the point
that we discover that a type error has occurred we always have that
label, which is an endpoint.

The other endpoint label could be gained by doing keeping track of a
label which is responsible for the equality type status that a type
variable has. So if we have some mapping of equality type variables to
equality type status values, we have something like this:

eqtv1 -> EQUALITY_TYPE_STATUS(EQUALITY_TYPE)
(eqtv2 -> eqtv1 => eqtv2 -> EQUALITY_TYPE_STATUS(EQUALITY_TYPE))
(eqtv3 -> eqtv2 => eqtv3 -> EQUALITY_TYPE_STATUS(EQUALITY_TYPE))
eqtv3 -> EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE)

and an error is detected, because eqtv3 is constrained to be both
EQUALITY_TYPE (from eqtv1) and NOT_EQUALITY_TYPE. We have the label
for NOT_EQUALITY_TYPE, but for the EQUALITY_TYPE we have available to
us the set of labels that eqtv3 has assigned to it in the map. We need
the *single* label for eqtv1, because that is the endpoint of the
error.

I could either carry through the equality type variable that we
inherit the status from or the label. I think the equality type status
variable will give more meaning to debuggers and makes more sense than
a program point location so I'll try something like that. So
internally we'd have something like this:

eqtv1 -> EQUALITY_TYPE_STATUS(EQUALITY_TYPE), inferredFrom=NONE
(eqtv2 -> eqtv1 => eqtv2 -> EQUALITY_TYPE_STATUS(EQUALITY_TYPE), inferredFrom=SOME(eqtv1))
(eqtv3 -> eqtv2 => eqtv3 -> EQUALITY_TYPE_STATUS(EQUALITY_TYPE), inferredFrom=SOME(eqtv1))
eqtv3 -> EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE)

So now we'd have the second label because we can look up the existing
eqtv3 inferredFrom value, then grab the *single* label associated with
eqtv1 in the state map. If there is more than one label an exception
should be thrown.

I'm going to try and implement something like this, it seems a
reasonable way to go and will give is the second endpoint that is
needed here for little extra analysis engine overhead.

*** 2012-07-24
tags: {equality-types, labels}

(2012-07-24-14:01)

I've written a few comments in the unification file about how
constraint solving with respect to equality types works which should
hopefully help some people to some degree in the future.

The Unification.sml file is far too long, and when working with the
fsimplify function I feel like I'm working in some sort of
forest. Perhaps there might be a nice way to split this file up, even
just taking the fsimplify function and putting it in its own file I
think might be a help. I'll think about doing that later.

I've just noticed that there are some cases where the equality type
endpoint isn't correct with the current system where only one endpoint
is reported.

Perhaps it's the case that this can happen when solving equality type
accessors, and we end up in the case solving two equality type
variables which have to be equal to one another, but both of those
equality type variables turn out to be of conflicting status values
located after some long chain of constraint solving takes place.

I don't think this is a problem, because the system that I'm working
on at the minute where the equality type variable number is stored
where an equality type status was inferred from means we should have
all the information and are able to report the correct endpoints. I'm
going to do this stuff on another branch, so that the test framework
can compile the master branch, then merge whenever I reach the end of
a day where my changes can be compiled.

Also, perhaps the equality type tests that I have should be integrated
into the test framework. My current plan was to wait until I get them
working, then just run skalpel with JSON output and put it straight in
the test framework, but perhaps it would be better to create the
answers to tests by actually creating the JSON file by hand. Something
to think about anyway.

(2012-07-24-14:46)

Aha, I detected a hidden bug in one of my equality type tests, which I
found when I was documenting the function and noticed something
odd. It occurs to me that had I not noticed this, it would have been
extremely difficult to actually find it by trying to debug the program
I have. I've also been worried for a while about a scenario where
someone says "Hey, an equality type error isn't detected in my
program, here it is", because there's so much information that needs
to be looked at to understand why that doesn't work. I'm going to
think about this, I really need to improve the debugging print
features available for knowing which equality type variables are
defined, which are changing, and what the differences in the state are
before and after the change.

(2012-07-24-23:39)

The list of labels in the deps field is always empty when solving
equality type constraints. I've noticed this when other constraints
are being solved too, so I'm actually going to make use of it to store
some equality type variables which will result in the user getting the
correct endpoints.

*** 2012-07-25
tags: {equality-types, labels}

(2012-07-25-01:06)

I have to note here that I've changed my mind about how endpoint
labels are going to be tracked. I'd previously thought that I'd pass
the equality type variables around and we could just look up the
program locations that are associated with any given equality type
variable, but in order to use the existing structure I have to pass
around the labels instead.

I think I'm going to go ahead and just pass around the labels, we
don't really loose any information so this approach should really be
fine here and save some development time.

(2012-07-25-11:33)

I've updated the debugging system without updating the text that we
get when executing ./skalpel with no arguments. Adding a warning, I'll
fix this up when I get my head out of fixing the current endpoint
modifications.

Note: I would love to see some of these eq-testXXX.sml files in the
analysis engine test database today. Actually, I would also like to
see these files in a separate folder, with sensible names, and not
stick to the enumeration of tests system that we currently have.

(2012-07-25-13:17)

Great! We now get correct endpoint locations for equality type errors,
which means I can start putting some of the tests that I have no into
the test database, and the constraint solving algorithm for equality
types should be finished.

My plans therefore for the rest of the day are to extend the analysis
engine test database so that I can put these tests in a subfolder of
the test database directory with sensible file names, and the analysis
engine won't care (this would be very useful to me, and for the
purposes of demonstration of Skalpel). I'll then put the tests I have
in that folder, run the analysis engine tests to check that works,
then figure out what still needs to be done with respect to supporting
equality types. It should be noted that the work that I need to do
should lie solely in the constraint generator , so I shouldn't need to
touch the constraint solver now (hopefully).

(2012-07-25-14:35)

There is a Magic Numbers bad smell in the code which deals with the
analysis engine test database. The number is 4.

This is probably either supposed to represent the length of ".sml" or
the length of "test" in the filename. I'll figure out which...

(2012-07-25-14:45)

Alright, so the number '4' was used twice so that it actually meant
".sml" and "test".

Exterminate!

*** 2012-07-26
tags: {test-framework}

(2012-07-26-14:26)

I've finished changing the test framework so that it can handle test
files which aren't named based on enumeration. The way that it works
now is that there is a new file in the analysis engine test folder
called "test-control", which has a list of all the files which the
analysis engine is to test. When adding a new test to the test
database, a developer should just add a standard ml code file with any
name (say X.sml) and a solution file written in JSON (which is named
X-solution) as before to the test directory, then place the filename
(X.sml) in the test-control file next to the other filenames.

I don't think this code will support sub-directories yet, I'll look
into that now. Then we could have folders called say 'functors' which
would contain examples of functors etc. This might come in handy, so
I'm going to add this feature in once I've finished testing the
current code.

(2012-07-26-16:14)

The analysis engine database can now support sub-directories, and all
bugs associated with that have been ironed out hopefully. I'll run the
test framework now on lxultra8 and make sure that still works.

(2012-07-26-17:47)

That didn't still work, but it does now. The mail sent from the test
framework tomorrow should hopefully contain no errors with any luck,
everything should run smoothly.

(2012-07-26-18:16)

I have edited the way that the test framework checks its tests so that
the checking is done against a master copy instead of a copy from the
day before. This should prevent the problem of a failed test coming up
one day, no-one noticing it, and then it won't appear in the next diff
output.

I'll have to remember and update these master files. I've also removed
the tracking of the test logs in the repository, we have the e-mails
and I don't think storing the test reports for each day is really
necessary. We can always look back at our e-mails if we really have
to.

(2012-07-26-19:18)

The JSON output from the analysis engine when it runs itself on an SML
code file is of a slightly different format to the JSON that the test
answers are written in. I remember that I was cleaning up what was
actually output from Skalpel, as some of the information was no longer
relevant or duplicated in some basic way (eg, the 'ident' field is
just an enumeration of the 'tyvar' field, so why store both?).

I'm going to fix this so that these formats are the same. That should
make it really very easy indeed to add tests to the test database.

The documentation needs to be updated with information how to add
tests to the test database now as I've changed that procedure. I've
added a warning to the top of this file and I'll get around to that soon.

*** 2012-07-27
tags: {test-framework}

(2012-07-27-02:05)

Old code numbers should be added to the top of old code files. Working
on something else right now so have added a warning and I'll work on
that later today.

(2012-07-27-02:28)

The following output is produced from the tester when debugging is enabled

(TESTING) Tester.sml: cannot find slice: ⟨..datatype ⟨..⟨..⟩ = ⟨..secondCons of ''a..⟩..⟩\n ..secondCons (5.0)..⟩ in [⟨..datatype ⟨..⟨..⟩ = ⟨..secondCons of ''a..⟩..⟩..secondCons (5.0)..⟩]

This is when checking the equality type test I have just put in. The
difference is the presence of the "\n" in the slice that is being
produced by the analysis engine. I don't think this is actually
produced by the analysis engine, this must be some kind of weird
bug. I'll look at this later today.

(2012-07-27-14:49)

The above error was fixed just by removing the \n characters in the
output, I don't have the time to fiddle with even more of this test
code so I'm going to remove this by hand for now.

Though the equality type tests are now working some of the numbered
tests are not working with this new format well at all, and are
complaining about dependancy issues. I don't even know which part of
the test file that is specifically complaining about, because the word
'dependancy' can have various meanings in the analysis engine, and
that word doesn't actually appear in the test output. I'll need to
figure out what this is supposed to represent before I can fix it.

It would be nice to get this fixed and have all the equality type
tests committed to the repository today, that's the target at
least. I'm going to update this code that's output to the developer so
that it's more useful first. There are still some error messages that
throw variable names at the developer which aren't helpful and this is
one of those cases, so it's important that it's fixed up.

(2012-07-27-15:47)

Ok so the dependancies that are being reported as not being found from
code3.sml are certainly in the test database file. Something strange
is going on with the code related to testing whether two context
dependancy lists are in fact the same.

(2012-07-27-16:00)

Right, I have tracked down this problem. There is an inconsistency is
the test solutions, where sometimes the context dependencies start at
0 and sometimes they start from 1. I'm just going to track which
number the context dependancies start at in the JSON file, so I'll
have to fiddle with the parser and export mechanism a little and then
hopefully all will be well.

(2012-07-27-18:50)

The Skalpel analysis engine binary now can export JSON correctly for
use in the test framework apart from the use of the \n separator which
has to be removed manually. There should really be a command line
argument option so that this does not have to happen.

*** 2012-07-28
tags: {test-framework, website}

(2012-07-28-00:18)

A few basic equality type tests have been moved into the analysis
engine test database and now sit under the test control
file. Hopefully these tests will pass tomorrow morning and I'll add
probably the rest then.

I noticed there was a problem this morning where the website wasn't
tested for dead links, this should be fixed now and they should get
tested tomorrow morning.

I'm aware that the documentation for how to update tests still needs
to be written, I'll get around to that sometime soon, hopefully
Saturday afternoon or something. After that the plan will be to push
forward with equality types and handle more complex cases.

*** 2012-07-30
tags: {equality-types, poster}

(2012-07-30-01:32)

I've updated the analysis engine test database with a few more
examples. I'm not adding the solution to this one yet though, as I'm
not happy with the slice that we get for it:

datatype 'a mydt = firstCons of 'a | secondCons of 'a;

secondCons(5.0) = secondCons(6.0)

I'm not happy with the slice because it led to the discovery of this
bug:

((fn _ => 0) 5.0) = 0

is reported incorrectly as an equality type error. I see why this is
the case, but the analysis engine needs to realise that the result of
the function that is being tested for equality. As the type of the
anonymous function is of type ''a -> int we should be comparing the
equality type status of int (EQUALITY_TYPE) against the equals
operator (EQUALITY_TYPE) and not the 5.0 real number
(NOT_EQUALITY_TYPE), as this is thrown away.

I have a few tests also which do not report equality type errors (and
they should not, because the code is typable). I'm going to add these
to the test database when I find out what the best way is to generate
that test file when there are no errors (by default, the analysis
engine will simply produce a blank file, indicating that the process
has finished (<name-of-output>-finished).

Anyway, it's good to have a few of these test cases in the test
database. There are a couple of things next on the agenda, fixing up
the webdemo, adding webdemo tests to the text framework, updates to
the poster, changes to first year report text, and I'm not sure which
I'm going to pick yet. Whatever it ends up being I'll document the
progress in here as per usual.

(2012-07-30-10:20)

Old filenames are now at the top of the codexxx.sml files in the
analysis engine test database, so they can be moved to new names
safely.

(2012-07-30-16:28)

I've updated the poster to include some changes for the meeting
tomorrow with Joe, we can look at the poster then and decide what
other things we want to change and possibly just change them on the
fly.

I'm going to take a look at the webdemo soon, as that's something
which if I don't look at before tomorrow I might not get the chance
until the end of the week.

*** 2012-07-31
tags: {test-framework, website}

(2012-07-31-01:28)

The skalpel analysis engine *will not run on anubis*. The anubis
server (www) does not contain the libgmp.so.3 library, which the
analysis engine depends on.

This means that the skalpel analysis engine *must* be run on the www2
server.

(2012-07-31-01:33)

Nope, that's not the case either.

Both the www and the www2 servers do not have the libgmp.so.3 library
available on them, so at the moment it is impossible to run the
webdemo. The solution to this is for one of these machines to have
this library installed.

I'll need to contact IT about this, they are really the only people
who can fix that problem. Unless I were to include this library in
LD_LIBRARY_PATH... but I'm not sure that would work well at all. There
might well also be other dependancies.

(2012-07-31-01:37)

Ah, that actually worked. I copied libgmp.so.3 from lxultra8 into the
binary folder, updating LD_LIBRARY_PATH to include the current
directory, exported the environment variable, and now the binary will
at least execute.

Even better, the binary generated type error slices. I shall play
around with this tomorrow.

The URL that the user gets for type error slices doesn't look right to
me, as the slice output gets put in /lib (well, not the actual slice
output, as that currently doesn't even exist, but the output of a
'tohtml' script places things there) and the URL looks like something
quite distinct from that.

A solution might be to:

1) update the skalpel binary (because it's pretty old)
2) make sure libgmp.so.3 is found
3) get the slices output to the correct location (wherever that might
   be)
4) direct the user to this correct location

Hopefully the user will actually get some output after these four
steps. Once the webdemo is working I need to think about:

-> how to import test cases now with the new analysis engine test
   database format?
-> how can the test framework be extended to test the web demo,
   because mark my words it will break again.

(2012-07-31-13:11)

Right, so after spitting out the errors to the log files that are
output by slicing.cgi (these appear in /tmp on the www2 server) it is
indeed complaining about libgmp.so.3. I've included this in
LD_LIBRARY_PATH.

The skalpel analysis engine binary is complaining that an input file
is not being specified now so I'm changing slicing.cgi on the fly. I'm
documenting my changes here so that I can repeat them on the
slicing.cgi file that sits in the repository and install the website
and webdemo from scratch. At the moment, I'm changing a temporary
file and the files will be destroyed.

System call line changed to the following:

system("LD_LIBRARY_PATH=.:./bin/:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; ./bin/slicer -b 2 ./lib/basis.sml -s /tmp/$session.sml -p /tmp/$session.sml.pl &> /tmp/$session.log");

The binary (./bin/slicer) is now the skalpel binary from my bin/
folder of the repository (so it is not actually the webdemo binary, it
is the standard binary with the name change). An error is reported
that an input file is not specified (makes sense, because it isn't
specified in the system line).

(2012-07-31-13:24)

Huzzah! I got some slices! How nice. Another change to the system
line, it is now as follows:

system("LD_LIBRARY_PATH=.:./bin/:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; ./bin/slicer -b 2 ./lib/basis.sml -s /tmp/$session.sml -p /tmp/$session.sml.pl &> /tmp/$session.log");

The change is that skalpel no longer thinks the input file is an sml
that it should be outputting information too. This fixes the actual
analysis engine process up, and this works fine.

The user is taken automatically to a url like the following:

http://www.macs.hw.ac.uk/ultra/skalpel/tmp/50/5017/5017cf1b6273.html

From the original location of:

http://www2.macs.hw.ac.uk/cgi-bin/cgiwrap/~jp95/slicer/slicing.cgi

This URL they are taken to is incorrect. It should be this:

http://www.macs.hw.ac.uk/~jp95/cgi-bin/slicer/tmp/50/5017/5017cf1b6273.html

If they are taken to that URL then the user will be able to see type
error slices for the code.

Also, what is going on with the link when the user clicks on 'Online
demo'. From http://www.macs.hw.ac.uk/ultra/skalpel/index.html the user
is directed to
http://www2.macs.hw.ac.uk/cgi-bin/cgiwrap/~jp95/slicer/slicing.cgi,
but from
http://www2.macs.hw.ac.uk/cgi-bin/cgiwrap/~jp95/slicer/slicing.cgi the
user is directed to
http://www2.macs.hw.ac.uk/cgi-bin/cgiwrap/~jp95/skalpel/slicing.cgi,
which is a directory that does not exist. The folder I have is called
'slicer' and not 'skalpel' (it should probably be called
'skalpel'). The point is that these links are pointing to two
different locations, this shouldn't be a circumstance that can
arise. This will need to be fixed also.

(2012-07-31-13:32)

I'm going to dare to apply the changes I have made so far and install
the website and webdemo. I remember I updated the documentation for
this so hopefully everything will still be fine.....

(2012-07-31-13:36)

In the webdemo Makefile, I'm updating my location of the webdemoAdr2
to be:

webdemoAdr2 = ${macs2}"cgi-bin/cgiwrap/~jp95"/skalpel

instead of

webdemoAdr2 = ${macs2}"cgi-bin/cgiwrap/~jp95"/slicer

'slicer' folder in my cgi-bin director has been moved to slicer-old for
backup. I expect to find a new 'skalpel' directory in its
place. Skalpel website is also backed up to
/home/www/macs/ultra/skalpel-backup (from /home/www/macs/ultra/skalpel).

(2012-07-31-13:43)

Yes, this is now a little more complicated. Programs and libraries are
missing from the webserver that are needed to install the website and
webdemo (because we do things like compile the analysis engine binary,
generated documentation using org to html conversion, etc).

For the moment, I'm going to add the relevant libraries to my
LD_LIBRARY_PATH and try and work round it that way. I'll have to
e-mail Steve about this.

** 2012-08
*** 2012-08-01
tags: {test-framework,

(2012-08-01-05:53)

Can't sleep, must be the excitement of solving all problems... :-)

I'm trying to get the webdemo working through things that I shouldn't
have to do, I'll probably e-mail Steve even if I get this working.

The ls command and the cp command don't work due to the following
missing libraries:

libacl.so.1
libattr.so.1
libselinux.so.1
libsepol.so.1

I have added these to my home directory (copied from lxultra8) and
used the LD_LIBRARY_PATH environment variable to allow the webserver
system to find them, and I'm now able to use ls. Huzzah! Hopefully I
will also be able to use cp.

(2012-08-01-05:57)

Emacs does not work though, missing libgtk-x11-2.0.so.0. Hopefully I
won't need to fix that problem as I might be able to avoid using it on
the www server...

(2012-08-01-05:58)

cp works! A luxury indeed! The broken Emacs though is breaking the
webdemo installation as alas it is needed to convert sml.org into
sml.html for viewing on the web. Copying this library from lxultra8 in
the hope that will sort things out...

Also copying some files to get zsh working, that shell is more
powerful so I prefer it. It's not critical to get this working though
and other users may not use this shell, but I'll list this here anyway
in case I need to find it again. Here's the libraries I've taken from
lxultra8 in total:

For basic shell functionality:
libacl.so.1
libattr.so.1
libselinux.so.1
libsepol.so.1

For Emacs:
libgdk-x11-2.0.so.0
libgtk-x11-2.0.so.0
libatk-1.0.so.0
libgdk_pixbuf-2.0.so.0
libpangocairo-1.0.so.0
libpango-1.0.so.0
libcairo.so.2
libgobject-2.0.so.0
libgmodule-2.0.so.0
libglib-2.0.so.0
libSM.so.6
libICE.so.6
libtiff.so.3
libjpeg.so.62
libpng12.so.0
libz.so.1
libXpm.so.4
libX11.so.6
libXrender.so.1
libXft.so.2
libfontconfig.so.1
libfreetype.so.6
libasound.so.2
librsvg-2.so.2
libdbus-1.so.3
libgpm.so.1
libncurses.so.5
libgconf-2.so.4
libORBit-2.so.0
libgthread-2.0.so.0
libXext.so.6
libXinerama.so.1
libXi.so.6
libXrandr.so.2
libXcursor.so.1
libXcursor.so.1
libXcursor.so.1
libXcursor.so.1
libXfixes.so.3
libpangoft2-1.0.so.0
libXau.so.6
libXdmcp.so.6
libexpat.so.0
libxml2.so.2
libcap.so.1
libdbus-glib-1.so.2
libssl.so.6
libcrypto.so.6
libavahi-glib.so.1
libavahi-common.so.3
libavahi-client.so.3
Rlibbz2.so.1
libgssapi_krb5.so.2
libkrb5.so.3
libcom_err.so.2
libk5crypto.so.3
libkrb5support.so.0
libkeyutils.so.1

For zsh shell:
libgdbm.so.2
libncursesw.so.5

(2012-08-01-07:17)

Erm, that was more libraries than I thought! Oh well. I used this
command (which could be improved upon) to copy these files, might come
in useful:

(error=`ls ~/ > /dev/null; emacs --version 2>&1 | grep "error" | sed s/".*libraries: "// | sed s/": cannot.*"//`
echo "handling: \"$error\"..."
ssh lxultra8 "cp /lib/$error ~/ 2>/dev/null; cp /usr/lib/$error ~/ 2>/dev/null"
)

This just strips the name of the library that has not been found and
tries to copy it from /lib and /usr/lib on lxultra8, silently failing
when it doesn't copy the errors. This could be put in a loop to speed
things up (but if anyone reading this does this, do something when
silent failures happen otherwise the script will loop forever if a
library doesn't exist on lxultra8 in either location).

Ok, running the webdemo script again.

(2012-08-01-07:21)

The webdemo script is now failing because it can't find the code*.sml
files. Ok, this is good, this is one of the errors that I expected to
fix in the first place.

For the moment I'm just going to tell the webdemo script that the
files are in the numbered/ folder of the skalpel repository, as it'll
find all the code files it wants there.

(2012-08-01-07:26)

The webdemo doesn't actually edit the users public_html directory to
put the webdemo there. Placing the directory manually.

(2012-08-01-07:30)

Great! Some things work, some things don't. All menu bar links to the
left hand side of the web pages seem to work absolutely fine so that's
a win. Here's what needs to be changed:

1. code examples don't show up on the example page
2. when running code examples (tested manually), the user gets sent to
   the wrong URL to view the slice
3. webdemo installation should copy install files to the cgi-bin
   folder of the user executing the install script, otherwise the user
   will be sent from the www server to a nonexistant cgi-bin
   directory.

(2012-08-01-09:00)

I notice that the skalpel binary has not been created. The webdemo
isn't producing any slices, this is probably why. The name of the
skalpel binary has changed since the last installation, so it's
probably something to do with that.

(2012-08-01-09:06)

Actually, it doesn't:

make[1]: Entering directory `/u1/pg/jp95/repos/skalpel/analysis-engines/standard-ml'
mllex  parse/ML.lex
mllex: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or directory
make[1]: *** [mlton-base] Error 127

I guess I need to add the limgmp.so.3 library to my nice large list of
files. It seems to be working for me so far to locate and place
binaries in my LD_LIBRARY_PATH, so I'll just continue!

(2012-08-01-09:16)

This doesn't work, the web demo fails to create the analysis engine
binary. I'm going to change it so that the user specifies the location
of the analysis engine binary, it'll be better than the web demo
building it anyway because it's slow.

(2012-08-01-09:54)

Alright, the links problem is fixed, the user should be able to get to
the page showing the slices. Pity there aren't any! No slices are
showing for any input, which must be some problem involving the
binary, looking into it now.

(2012-08-01-10:27)

Right so when the webdemo runs I now get this error:

./bin/skalpel: error while loading shared libraries: libgmp.so.3: cannot open shared object file: No such file or dire
ctory

That's about as far as I can go with this. I can't just provide this
file, as there are other dependencies that file is linked to which
don't exist. When Steve installs the gmp library, the webdemo should
be fully working aside from the code needed to read the new locations
of the code*.sml files.

(2012-08-01-14:48)

updateexamples is the script responsible for updating the code*.sml
files. I think it's looping infinitely...

(2012-08-01-15:24)

These webdemo scripts are a bit ruthless on the developer when one
makes a mistake (sometimes we put a / at the end of directory paths in
variables, sometimes we don't. If you use the wrong one strange things
can happen such as a script looping infinitely). Got to look out for
that!

Anyway, the web demo now detects the code files from the test database
location (because the numbered code files haven't had their names
changed. It might indeed be good to have some conversion mechanism so
that the web demo can still understand it.

So the bottom line is everything looks like it's working, so when the
gmp library gets installed we should have a working webdemo.

(2012-08-01-16:21)

I've managed to get the dependancy list for the web demo down
significantly from about 60 packages. I've added another make target
that will generate files in the repository (such as building the
analysis engine binary, getting an html file from sml.org and so on),
with the idea in mind that the developer can run that make target on
their normal machine (in my case lxultra8), then just run a cut-down
version of make install-webdemo on the web server. It's much better
this way anyway, compiling binaries on the web server isn't a great
idea anyway.

We do certainly need to be able to run the analysis engine binary
though, no getting away from that. I'll get on to Steve now to install
the gmp library, but I won't mention the others; we don't need to be
able to compile the analysis engine on the web server.

(2012-08-01-20:42)

I've made a few updates to the poster, looks like I'm going to get a
fair amount of space to play with by the time I've made these
edits.

The test framework should be able to check the website for dead links
tomorrow, it failed its test this morning to do that because I was
busy installing and uninstalling it during all this webdemo
installation.

*** 2012-08-02

(2012-08-02-12:42)

I'm still working on getting the webdemo working, I realise that the
gmp errors are coming the fact that web server runs a different
machine architecture to lxultra8. This means that skalpel needs to be
compiled on the webserver.

I'm hoping that after re-installing on the web server's 64-bit
architecture I'll be able to compile skalpel on it. I'm trying to
compile mlton on it now but I remember that compiling mlton requires
an SML compiler to be installed which is annoying. I'll have to
install Poly/ML and try to compile MLton with that. I'm determined to
get around to working on equality types today, I don't want to loose
all days installing software and fiddling with libraries.

(2012-08-02-12:48)

Installing Poly/ML now to ~/software-64. I'll make this a publicly
accessible folder so that anyone can run the binaries inside.

(2012-08-02-12:53)

To install MLton with Poly/ML, use the 'make polyml-mlton' command. I
couldn't find this information in the installation document on the
website so I've put it here.

Apparently that only gets you so far through the installation then the
compiler defaults back to mlton. What seems to happen is that the
Makefile from the root of the source download heads into the mlton/
folder of the sources and runs 'make polyml-mlton' which then dies
because mlton is not installed.

(2012-08-02-13:13)

Okay, so part of the output when compiling MLton with Poly/ML is this:

-bash-4.1$ make polyml-mlton
[...]
/bin/sh: mlton: command not found
make: mlton: Command not found
make: mlton: Command not found
make: mlton: Command not found
make: mlton: Command not found
make -C front-end ml.lex.sml
make[1]: Entering directory `/u1/pg/jp95/software-64/mlton-20100608/mlton/front-end'
rm -f ml.lex.sml
no-mllex ml.lex
make[1]: no-mllex: Command not found
make[1]: *** [ml.lex.sml] Error 127
make[1]: Leaving directory `/u1/pg/jp95/software-64/mlton-20100608/mlton/front-end'
make: *** [front-end/ml.lex.sml] Error 2

It seems to proceed on anyway and say that the no-mllex command is not
found. After looking in the sources, I've found that if the compiler
can't find ml-lex, then it changes the name of the command to execute
to 'no-mllex' ending up with the output:

make[1]: no-mllex: Command not found

even though no-mllex is not a command.

It's proceeding with the installation so I'm going to try and install
PART of the SML/NJ compiler on the web server (the full thing can't be
installed, because SML/NJ does not run on 64 bit architecture
machines). Hopefully I can build ml-lex and ml-yacc and that will
help.

(2012-08-02-13:35)

"Running ./build requires a properly functioning installation of
SML/NJ."

./build is a script in the SML/NJ sources. So I can't build
ml-lex. Hmm

(2012-08-02-13:49)

I have managed to copy ml-lex and ml-yacc from a machine I own of the
same architecture to the web server which just so happens to run
(usually, there would be library problems with this).

Now I'm getting this: "cc: mlton-polyml.o: No such file or
directory". Fantastic, that's not useful. There are still mlton errors
on the previous lines though that are spat out because MLton is not
installed. How am I supposed to build this software if I don't have it
already installed? This is just a nightmare. I'm going to try fiddling
around with a few things but then I'm going to move on to equality
types, or this is just going to eat all my time.

(2012-08-02-14:17)

Steve e-mailed me to tell me that mlton was installed on a test system
for me to look at before it was installed system-wide. As a stroke of
luck, I noticed that mlton was installed on a 64 bit test system
(osiris). The mlton binary was compiled with that and used to install
the webdemo, and now we have a working web demo! Thank god for that.

I'm going to test the poly/ml installation that steve has on the test
system, then if that's fine I'll ask him to roll that out system wide
along with rlwrap and mlton.

(2012-08-02-16:12)

Going to work on the poster for the rest of the day, and spend
at least the majority of tomorrow on equality types.
=======
*** 2012-08-03

(2012-08-03-11:26)

It occurs to me that being able to print out a program with its label
information would actually be very useful. I'm getting debug output
like this:

(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19686) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [40162] and Labels = [40161,40162]

(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19691) and EQUALITY_TYPE_STATUS(EQUALITY_TYPE). Deps = [] and Labels = [40164]

There's nothing really wrong with this except that I can see that for
example equality type variable 19686 is being constrained to be
NOT_EQUALITY_TYPE which comes from the endpoint label 40162. But what
is that label? I actually know what it is, because the program is so
small there's only one location that could actually have come from,
but in cases where the label output is larger it can be more difficult
to find out why different constraints are being made at any given
time.

I don't know how much work this would be (hopefully little work), but
something to think about.

(2012-08-03-12:36)

In the Slice.sml file we basically have a bunch of functions which
handle every datatype constructor from the abstract syntax tree and
print it out. The datatype constructors from this tree basically have
label information everywhere anyway.

If I could re-use that function to print out a 'slice' of the entire
file, with with some option enabled to print label information, that
that would give me what I need.

(2012-08-03-13:09)

There might be something here to do exactly what I want, I was using
the printSlice function but using the printAstProgs function will
print the information for me which is exactly what I want.

It would be nice to get the label information output in more readable
format, ideally in the same format that is presented in the papers,
automatically. I guess I should just be able to do this by parsing the
output of printAstProgs and just turning it into latex. Something to
think about certainly.

(2012-08-03-13:20)

printAstProgs doesn't store things like \n characters and spacial
information, which isn't actually surprising. Maybe it's best to use
printSlice after all and just extend that...

*** 2012-08-04

(2012-08-04-11:17)

I started working yesterday on a more basic equality types problem
which showed the problem where labels were not being propagated
correctly, which is now fixed. Today I'm going to try and compile a
list of the various equality types features which I have yet to work
on. I'm also going to extend the work I did on getting labelled
program output,  and need to look at how the web demo analysis engine
binary is different from the normal binary, I suspect we make this
distinction without much justification. Perhaps not, but it's good to
check these things out.

(2012-08-04-14:39)

Oof, this outputting a labelling program is such a pain because of the
representation of the abstract syntax tree. Oh well.

I'm making quite heavy use of \operatorname for these purposes. It
would actually be quite good if Skalpel were to output a .tex file
with all this information in it and then compile it for me to produce
a .pdf, but I probably won't have time to do that, at least at the
moment.

For the meantime I'll just use mathbin to parse the output that the
analysis engine gives me.

(2012-08-04-16:25)

I've extended the print system now to give out \operatorname for
anything which isn't a label or some form of dots or bracket when
slices are output with the PROGRAM_LABELLING debug mode (./skalpel -d
PROGRAM_LABELLING). I still need to add in some code to export the
labels along with this information.

I'm going to just do this for the program that I'm working on right
now as I want to push on and get some of this working.

Note to self, make good use of the extra binding keys on the
keyboard. Holy jesus they are useful.

(2012-08-04-17:51)

Hm, I'm unsure how to display the label information. I'm just
intending to put it as superscript but the problem with that is that
it is confusing to see just what that label represents. We need some
kind of brackets round the whole thing.

We have a shortage of brackets, hm. I'm going to see what they do in
the Haack and Wells paper.

(2012-08-04-17:57)

There are examples of program labelling in there but all the labels
aren't shown, probably because it would blown the user away. For now
I'm going to use big brackets with \Bigg[ around the labelled stuff
for now, that will look clear in the latex output at least and should
be easily changeable.

(2012-08-04-18:19)

Hmm, the new line characters aren't showing up in latex (because latex
ignores \n, something like \\ will work). I'll have a look and see if
there's an easy way to change that.

Essentially every \n character when exporting to latex should be
changed. Should be an easy search and replace right?

(2012-08-04-18:21)

Hm, there are a few places where this could be changed:

1. toString
2. transfun
3. sepLines
4. printProgList
5. printOneSlice
6. printSlices

I'll check these out.

(2012-08-04-18:34)

It was the sepLines function. It might be worth checking out some of
these other functions later to check there's going to be no breakage.

(2012-08-04-19:04)

I'm about half way through the exporting labelled program stuff I
think. Going to try and finish this off later this evening if I can
find the time. Looking less likely I'll get that equality type passing
that I wanted to but this labelled program output will really be
rather useful so I think it's worth it.

*** 2012-08-05

(2012-08-05-03:47)

Hm, I'm still working on getting a labelled program output. This has
taken more time than I thought it was going to.

This probably would have taken less time if there was a better
representation of the abstract syntax tree, that's probably something
worth thinking about.

On the other hand, the abstract syntax tree can be easily changed when
we move to another language, maybe it's just best to stick with it
until that point, then we can make a better representation for that.

(2012-08-05-04:42)

Ugh, done at last! There may well be breakages in the test e-mail
that's going to arrive at 7am, this will happen if I've accidentally
added debug strings into some of the text that comes out to the case
where the is *not* supposed to be debug output instead of the other
way around.

It's an easy fix in any case. I'll look at which tests fail (if any),
take the constraint generation debug rules to see which abstract
syntax tree nodes are being visited, and then use that information to
change the text that's output from Slice.sml.

(2012-08-05-13:48)

The stuff that I did last early this morning works nicely, but I see
that when I'm reading the label information from the output that it is
difficult to see the matching brackets. I'm going to try and use the
tikz package to fix this, though I haven't used it before it looks
like the best way to do things.

My current idea is to have each opening and closing big square bracket
('\Bigg') as a plain node, and then draw a curved line between these
two nodes. The issue is that all the text in-between also has to be a
node, and positioning problems comes into play.

Perhaps the best way is to do something like this:

\newlength{\mylabelwidth}
\begin{document}
\begin{tikzpicture}
  \node[draw] (A) {A};
  \settowidth{\mylabelwidth}{\pgfinterruptpicture some label \endpgfinterruptpicture}
  \node[draw,right] (B) at ([xshift=\mylabelwidth+10pt]A.east) {B};
  \draw[->] (A) --(B) node [midway,above] {some label};
\end{tikzpicture}

So the length is stored appropriately. I'll have to have a think about that.

(2012-08-05-15:09)

Oh hell maybe just assigning colours for the brackets would be
easier. Or having different sizes and colors of brackets....

Ah, what about having Standard ML generate some latex code which has a
colour assigned to it at the level where it generates the \Bigg[ and
\Bigg] brackets, then it would be the Standard ML code that would make
the brackets have the same colour.

Yeah... that should work... I think. I'll try that out.

(2012-08-05-18:13)

Huh? Calling a random number function randRange with a lower bound x
and an upper bound y such as with randRange(0,6) should probably
return a random number. Why does it return a datatype with four
components, each of which I have to now examine?

Oh well. That's what I'm using from the SML/NJ library to generate the
random colours for brackets anyway in the labelled program output so
that I can tell them apart.

(2012-08-05-11:44)

Going to finish off this program labelling stuff before I go to
bed. The random number generation stuff is a bit poorly documented, so
I'm just playing around with it. I've managed to get it to actually
output a number, but it's constant every time. Maybe there's some
seeding that needs done somewhere...

I must check that the software to be installed system wide is actually
getting done, I shall do this tomorrow. I intend to spend probably
most of the day on equality types stuff and a little on the poster
too. That should really be completed before the end of the week.

*** 2012-08-06

(2012-08-06-01:27)

Finished with the output of program labelling. There are other
improvements that can be made to it but that I intend to do after I
get a bit of equality types work done.

(2012-08-06-10:54)

I see that equality type constraints aren't correctly configured when
dealing with valbindcore.

If we have something like this:

datatype 'a mydt = firstCons of 'a;
val x = firstCons(5.0);
x = x

Then there is no equality type error detected, however if we have
this:

datatype 'a mydt = firstCons of 'a;
val x = 5.0;
x = x

Then the equality type error is correctly detected. I guess there must
be something funny with the way equality type constraints for datatype
constructors are getting generated, either that or there is a
constraint generation rule being fired that I haven't written equality
type code for yet.

(2012-08-06-12:21)

Hm, I think this is a binder issue. I think when the binder is put in
for x where x = firstCons(5.0); for some reason the top level label
someLabelNum [firstCons(5.0)]^{someLabelNum} is not set to be
NOT_EQUALITY_TYPE status, so when it's put into the state map the
error isn't detected.

That's the working theory at least.

(2012-08-06-12:48)

Ok I think I see the problem. When we look up the binder for each of
the x = x values, the equality type information that is present in the
state map is EQUALITY_TYPE_STATUS(UNKNOWN), which is likely the cause
of the problem. I see that the label information for this program is
[40143,40147,40148,40149,40154,40155,40156,40157,40158,40159], which
is enough information to conclude that this is is of status
NOT_EQUALITY_TYPE (though the state map should probably contain a
variable which holds this information, not just a status).

(2012-08-06-13:23)

Hmm, I'm not sure whether to change the way the constraint generation
algorithm works a little, or whether to change the constraint solving
algorithm. When looking up a binder such as x is the example I was
looking at earlier today, this is output by the debugging mechanism:

(EQUALITY_TYPES) Unification.sml: bind = TYPE_DEPENDANCY(TYPE_CONSTRUCTOR(TYPENAME_DEPENDANCY((n242,DECLARATION_CONS(1692),l40144),[40143,40144],[],[]),ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,
l40145):TYPE_DEPENDANCY(TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[78
3,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONSTRUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784)
,ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,10089,10090,10091,11132,11133,11134,11135,11136,11137,11
138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n302,DECLARATION_CONS(61),l10090),ROW_DEPENDANCY(RO
W_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)
],-,l39728),[39725,39726,39727,39728,40162],[],[]),51,POLY,CONSTANT(5.0,373,40162),l40162,EQUALITY_TYPE_VAR(eqtv19685)),[40146,40147,40148,40149,40150,40151,40158,40159,40160,40161,40162],[],[]),l40145)],-,l
40145),[40143,40144,40145],[],[]),l40143,EQUALITY_TYPE_STATUS(UNKNOWN)),[40143,40147,40148,40149,40154,40155,40156,40157,40158,40159],[],[])                                                                  

If there is an equality type status that isn't at the top level (isn't
embedded somewhere in TYPE_DEPENDANCY), then we constrain the accessor
to have that status (and only that status, actually. If there are
future statuses, then we ignore them).

So the questions posed here are:

-> Should the top level equality type information,
   EQUALITY_TYPE_STATUS(UNKNOWN), actually be something else and that
   is there erroneously?

-> Should the constraint solving algorithm take all status values and
   all equality type variable values inside the binding expression and
   constrain the accessor to be equal to each one?

Decision to follow. This should result in an equality type error being
detected without breaking any of the existing tests.

(2012-08-06-13:40)

Just discovered an error on my hard disk. Pushing now just in case. :/

(2012-08-06-14:42)

I have decided to go with option one. Switching to devel and going to
implement this. I'm hoping that I'll be able to do this today and pick
some other parts of equality types to start working on. I'm not sure
exactly what there is to do, so I might start by making a list.

(2012-08-06-16:47)

We no longer strip equality type status values directly from the
binding occurrence. Instead, I'm going to change the
stripEqualityStatus in Ty.sml function so that we strip equality type
variables to create constraints from each of the variables in the
binder to the accessor.

(2012-08-06-16:56)

Hm, I'd really rather not strip things at all. It would be really
great if I could get the top level equality type information holder to
contain all the information that I could need. I'll look into this
now, and add back in some kind of strip based solution if I do need to
look at all the information in the binder.

(2012-08-06-17:00)

I've removed the stripping of equality type status values and it
doesn't affect the tests. Excellent, I didn't like that
solution. Hopefully I'll be able to get this binder represented nicely
in the state map and that should fix the current test.

(2012-08-06-17:45)

The controlling of this top level equality type information is either
done in consTypenameVar or stripDepsTy. I'm randomly changing UNKNOWN
values to EQUALITY_TYPE to figure out where this information is coming
from but I think I've tracked it to one of these locations.

consTypenameVar has a comment indicating that it is used in the
binding of datatypes, which sounds like that could be the cause of the
issue. Checking it out now.

(2012-08-06-17:50)

consTypenameVar is the source of the issue. It is always returning
EQUALITY_TYPE_STATUS unknown, most likely because I hadn't got around
to writing that code yet, but now is the time.

I'll probably parameterise this function and then I'll need to figure
out what to put in each of the cases that call this
function. Hopefully it's only called in a limited number of places and
I have equality type variable information in the functions that call
them.

(2012-08-06-17:53)

The good news is that it's only being called in one place. The bad
news is that it's being called from f_datbind, the function which
handles the binding of datatype constructors.

The reason why this is bad is that it's unknown at that point whether
there is going to be an equality type error or not. For example:

datatype 'a mydt = firstCons of 'a
val x = firstCons(5.0)
val y = firstCons(2)
y = y

There is no equality type error here. The problem is that changing
consTypenameVar would mean that we are changing the equality type
status of mydt as a whole, at line 1, which would make this program
incorrectly report an equality type error.

The solution to this is to look deeper into the binding. So when the
analysis engine sees something like this:

(EQUALITY_TYPES) Unification.sml: bind = TYPE_DEPENDANCY(TYPE_CONSTRUCTOR(TYPENAME_DEPENDANCY((n242,DECLARATION_CONS(1692),l40144),[40143,40144],[],[]),ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,
l40145):TYPE_DEPENDANCY(TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[78
3,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONSTRUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784)
,ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,10089,10090,10091,11132,11133,11134,11135,11136,11137,11
138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n302,DECLARATION_CONS(61),l10090),ROW_DEPENDANCY(RO
W_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)
],-,l39728),[39725,39726,39727,39728,40162],[],[]),51,POLY,CONSTANT(5.0,373,40162),l40162,EQUALITY_TYPE_VAR(eqtv19685)),[40146,40147,40148,40149,40150,40151,40158,40159,40160,40161,40162],[],[]),l40145)],-,l
40145),[40143,40144,40145],[],[]),l40143,EQUALITY_TYPE_STATUS(UNKNOWN)),[40143,40147,40148,40149,40154,40155,40156,40157,40158,40159],[],[])                                                                  

The top-level equality type information is
EQUALITY_TYPE_STATUS(UNKNOWN). This is coming from
consTypenameVar. This will always be unknown, we can't possibly know
equality type information at that point in the program.

Instead, the solution is to look deeper in, where other equality type
information is present. Above, for example,
EQUALITY_TYPE_VAR(eqtv19685) is there, so we can create a constraint
for the equality type variable representing the accessor to be the
same as that. I just looked up what this is in the state map:

(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19685) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [] and Labels = [40162]

Label 40162 is the real number '5.0'. This will give an equality type
error, but will not have all the correct labels. The labels will show
a) the 5.0, b) the x accessor and c) the 5.0 number. We should see
much more information including:

-> the binding of firstCons
-> the accessor of firstCons
-> the binder of x

(2012-08-06-18:22)

Hmm, at the point where that equality type variable is discovered, it
is an argument to a TYPE_POLY constructor. The TYPE_POLY constructor
with just the equality type variable and labels is this:

TYPE_DEPENDANCY(TYPE_POLY(<...>,51,POLY,CONSTANT(5.0,373,40162),l40162,EQUALITY_TYPE_VAR(eqtv19685)),[40146,40147,40148,40149,40150,40151,40158,40159,40160,40161,40162],[],[])

Well, that accounts for most of the labels! The only label this
doesn't account for is the binding of x at the point in the program
below:

datatype 'a mydt = firstCons of 'a;
val x = firstCons(5.0);
    ^
  HERE
x = x

Every other relevant label is however included. If this other last
label can be accessed then this should be possible...

I should have this label. It should be available when solving the
accessor as a whole. Checking...

(2012-08-06-18:30)

Yup! That's the final piece of the puzzle. So the plan now is when
solving equality type accessors:

-> Look through the binding to find equality type variables

-> Constrain the equality type variable in the accessor we are solving
   to be unifiable with each of these equality type variables

-> When creating the above constraint, take the labels that belong to
   the datatype constructor which holds an equality type
   variable. Also take the label from the binder of the accessor that
   we are looking up, and the labels associated with the equality type
   variable we find (these should be in the state map)

Questions I need to think about are:

-> What happens if the binding contains multiple equality type
   variables?

-> Is the top level datatype constructor's equality type information
   the only important one if it's available?

I don't know the answers to these yet. I'll think about these over
dinner. Hmmm.....

(2012-08-06-20:41)

I'm going to make the constraints in such a way that the accessor we
are solving at the time is constrained to be unifiable with all of the
equality type variables that are present in the binder.

I'm hesitating to do this a little because I'm wondering if the user
might get extra slices than they should get. Perhaps not. I'm going to
write up the implementation for this and run it on some examples then
look at the results. In any case this solution should work fine for
this test, I'm just concerned that it might produce problems on larger
tests.

(2012-08-06-20:55)

I've thought about this some more and I don't think that this will
produce problems.

If we find some binder with three equality type variables α, β, and γ,
and we are currently solving an accessor constraint with equality type
variable δ, then the following constraints would be created:

δ -> α
δ -> β
δ -> γ

There are various situations that can occur:

1. One equality type variable in the binder causes an equality type
   error (say β), but the others (α, γ) don't. That's completely fine,
   the user will only get one relevant error and because we take the
   labels associated with the constructor that holds β, they will get
   the correct error. This is the case that the code example I've been
   looking at falls into.

2. None of the configurations generate an equality type error. The
   user doesn't get any error, the code for this purpose can be
   typable.

3. δ -> α and δ -> β both are equality type errors, but β is the
   equality type variable associated with a datatype constructor,
   which in one of its field holds a datatype constructor with has α
   associated with it. In a sense β is "higher up" than α, so it has
   different labels. If it has labels which are not relevant to the
   equality type error, and when they are removed we get the same
   constraint as δ -> α, then this is the same error, and the analysis
   engine will realise this and remove the duplicate. If δ -> β and δ
   -> α are both equality type errors, but both have different label
   sets and none of these labels can be removed, then we have two
   distinct errors, and the user should be presented with both. The
   analysis engine should take care of that already.

4. All of the equality type variables in the binder will cause an
   equality type error when δ is constrained to be unifiable with
   them. That's alright too, that's just case 3 repeated over and over
   again.

I'm going ahead and writing this. I think I'm right, but I'll test the
results just in case.

(2012-08-07-22:02)

Hmm, what to do about the type dependancy case. We have type
dependancies... inside type dependancies, even in the case that I'm
currently solving:

bind = TYPE_DEPENDANCY(TYPE_CONSTRUCTOR(TYPENAME_DEPENDANCY((n242,DECLARATION_CONS(1692),l40144),[40143,40144],[],[]),ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,
l40145):TYPE_DEPENDANCY(TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[78
3,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONSTRUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784)
,ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,10089,10090,10091,11132,11133,11134,11135,11136,11137,11
138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n302,DECLARATION_CONS(61),l10090),ROW_DEPENDANCY(RO
W_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)
],-,l39728),[39725,39726,39727,39728,40162],[],[]),51,POLY,CONSTANT(5.0,373,40162),l40162,EQUALITY_TYPE_VAR(eqtv19685)),[40146,40147,40148,40149,40150,40151,40158,40159,40160,40161,40162],[],[]),l40145)],-,l
40145),[40143,40144,40145],[],[]),l40143,EQUALITY_TYPE_STATUS(UNKNOWN)),[40143,40147,40148,40149,40154,40155,40156,40157,40158,40159],[],[])

These stripping rules need to be written pretty carefully, it's going
to be quite difficult to debug after they have been written. I'll have
a think about how exactly the stripping should work and write here
what the solution is.

*** 2012-08-07

(2012-08-07-10:44)

Okay, I think I've got this function working to strip the equality
type variables values, testing it now.

It would be nice for Skalpel to a have a "consider only this file"
option, where it will run itself on the current file and ignore all
undefined identifier errors. I've been thinking this because even
though I'm working on a fairly big SML program and am working in lots
of different files, it's rare I care about getting the information
from the other files.

(2012-08-07-12:12)

Well, if it isn't my old friend:

Error: Error! The unification algorithm terminated in a success state,
 but an error was generated previously! Hint: It has been found
 previously to be the case that this error is cased by a bug solely in
 the unification algorithm where some labels are not propagated
 correctly...

Joys! At least I know what the problem is. :-)

(2012-08-07-13:11)

Hmm usually this problem is caused by having not enough labels in the
new error that is created and recursed upon, but I think all the
labels here must surely be sufficient. I'll print the labels and
compare them against the labelled program output that I wrote up.

(2012-08-07-14:00)

Indeed, there is a label problem. Two errors are constructed in this
example I've been working on, one for each of the x accessors, and in
neither of them do the labels look correct.

I'll play around with them now.

(2012-08-07-14:23)

The problem is coming from the function that strips equality type
variables from the binding, it's not collecting all the labels along
the way, I have only a few here.

(2012-08-07-15:01)

Ah excellent, I have an equality type error now! This was indeed a bug
in the stripping of equality type variables from a binding. I'm going
to look at this more closely and run the rest of the equality type
tests to see what happens.

(2012-08-07-15:17)

This test result looks good, and the other test examples didn't
break. I'm going to form a rough list of features of the sml language
that can have equality type errors but that aren't yet detected, then
I'll choose one to work on.

I'm also going to improve the work I did on producing a labelled
program output in TeX, that's proved to be very useful when debugging.

(2012-08-07-16:30)

I've improved the tex output so that the output can just be pasted
into a file and then compiled. Really Skalpel should output this
information to a file, that's the main improvement that could be made
here. I might do this later, but for the moment I'm happy to just
paste it into a file.

*** 2012-08-08

(2012-08-08-10:08)

I have a rough idea of what work needs to be completed with respect to
equality types.

I'm moving the examples of programs that I have that don't work into
the repository, in a not-handled folder of the test database. As the
database doesn't blindly read in files any more, this should be
perfectly acceptable.

(2012-08-08-13:06)

WTF? Skalpel is generating equality type errors for the tests I
haven't even got around to working on yet. Uh, win? Wait, am I
bi-winning?

I'm going to take the time to look a little more into what Skalpel can
actually do, it looks like more is working than I thought.

(2012-08-08-13:27)

Er, wow. I'm rather happy with the results that I'm getting. This is
great, it's doing better than I expected. I'm just sitting here trying
to break it now. I have saved the output of an interactive session
from a meeting with joe where equality types are detected involving 'a
like this:

val 'b f = fn x : 'b => x = x;

This sort of thing still doesn't work. I have some questions about
this for the next meeting actually, but this sort of case isn't what
I'll be working on right away (I'll figure that out in a moment...)

(2012-08-08-15:48)

Okay so I'm currently thinking I'll get type error slices for tuples
first, and then records (or vice versa, as they are really very
similar indeed). From there I'll get ''a working when it's in the
signature (I've got some examples of this working already I think, and
anyway it works with datatype declarations).

From there I'll look at handling the eqtype keyword, I suspect this
might be quite tricky actually. With the eqtype keyword handled
correctly though we should handle all type correctly and there
shouldn't be much to do after this point.

(2012-08-08-16:34)

Err, tuples and records are now working when used with accessors. I
guess that code I wrote yesterday worked WAY better than I thought it
was going to. This going to save me so much time, I didn't think the
solution I wrote yesterday would extend to those.

I have to update the tasks.org file now for Alessio and put it on the
web. I will look (happily!) more into this matter tomorrow.

(2012-08-09-23:18)

It occurs to me as I'm writing about bugzilla in tasks.org that
another attempt should be made to fix the CSS style sheets. The
web server has changed significantly and it's possible that this
problem is easy to fix now.

I'm tempted to try this myself tomorrow. Perhaps I'll do this, depends
how time goes.

tasks.org is currently unavailable to people outside the Heriot-Watt
network. Perhaps I should commit this to the public repository, Alessio
will be able to clone it easily that way too. We have copyright
statements secured for that file, so it should probably be in the
skalpel repository, rather than the tes repository.

*** 2012-08-09

(2012-08-09-09:39)

Hm, test framework still broken this morning, forgot to merge the
master branch with the devel branch. Might add a check in my scripts
so that I don't do that.

(2012-08-09-10:15)

Right, I need to figure out a certain irregularity. It does seem that
equality types are further along than I thought, but there is one
problem.

An error here is not detected:

(1,2.0)=(1,2.0)

but, here, it is:

val x = (1,2.0);
x = x

The plan is to make this work (I think this is because when solving an
equality type error including an accessor the new solution is being
used of stripping out equality type variables from the binding), and
then create a bunch more tests and put them in to the analysis engine
test database.

If all this happens quite quickly, I'll deem myself happy with this
and will stop work on equality types for the day, and sort out some
things that are hanging around on the back burner, which will probably
include items from this list:

- making rest of changes joe recommended to the first year report
- finishing the poster
- fixing tasks.org html generation
- updating documentation
- looking at bugzilla

Perhaps this problem will take me all day, but I'd rather like to
tackle some of the problems on that list today if I can get the
chance.

(2012-08-09-11:00)

It looks like the reason that this doesn't work is because in the
unification steps printed out, we are never solving anything with more
than one equality type variable inside. We need at least two equality
type variables to get a conflict (because the conflict is always
between a NOT_EQUALITY_TYPE status and an EQUALITY_TYPE status).

Perhaps I need to do something in the constraint generator. I think
somehow reusing the function that I wrote which strips equality type
variables seems to be a good way to go, as it's working really well on
the other tests.

(2012-08-09-11:24)

It's worth noting that this function which I wrote which strips
equality type variables is only called when solving accessors. Maybe I
just need to make this function call somewhere else if I can see
another equality type variable for me to create the constraint with...

(2012-08-09-12:38)

Okay, I think I see what needs to be done here. The reason this works
with accessors, is because in code like this:

val x = (1, 2.0);

x = x;

We generate constraints for (1, 2.0), including equality type
constraints. So inside the binder for x we have an equality type
variable.

When we see x = x, an equality constraint accessor is created, which
has an equality type variable attached to it.

So we have the equality type variable from the x accessor, and the one
nested inside the x binding. The equality type variable from the x
accessor has to be EQUALITY_TYPE (because the '=' operator makes that
constraint), and the other turns out to be NOT_EQUALITY_TYPE, due to
the presence of a real number in the tuple.

Now instead with code like this:

(1, 2.0) = (1, 2.0);

The equality type variable for the (1, 2.0) section of the code is
instead no longer located in a binder, because there isn't one. It's
located on the right hand side of a standard type variable constraint,
like this:

TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((
1,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,3
9731,39732],[],[]),l39728),FIELD_CONSTRUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(
UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,10089,10090,10091,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39
728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n301,DECLARATION_CONS(61),l10090),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),
[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)],-,l39728),[39725,39726,39727,39728,40149],[],[]),52,POLY,CONSTANT(2.0,373,40149),l401
49,EQUALITY_TYPE_VAR(eqtv19682))

Alright, so we have one equality type variable there. Where's the
other one? Well that was in the accessor before, so where is it now?

It doesn't exist. The accessor here was essentially the 'left hand
side'. The left hand side now however is this:

TYPE_VAR(t31849,-,POLY,UNKNOWN)

A type variable with UNKNOWN equality type information. The solution
to this is probably to attach the equality type variable that's
generated when we see the '=' operator comes up and attach it to the
type variable that is generated. My thought is that then we will have
something like this on the left hand side:

TYPE_VAR(t31849,-,POLY,EQUALITY_TYPE_VAR(α))

Then something like this on the right hand side:

TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((
1,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,3
9731,39732],[],[]),l39728),FIELD_CONSTRUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(
UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,10089,10090,10091,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39
728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n301,DECLARATION_CONS(61),l10090),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),
[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)],-,l39728),[39725,39726,39727,39728,40149],[],[]),52,POLY,CONSTANT(2.0,373,40149),l401
49,EQUALITY_TYPE_VAR(β))

and then when solving type vars we also run stripEqualityVariables on
the right hand side, which will return β, and then make the constraint
α -> β. This constraint would then in this case be unsatisfiable, and
an equality type error would be generated.

That's the current working theory anyway. The TYPE_VAR constructor
already has slots for equality type information, so I guess this
information can be used here. I'll think about this over lunch and
then start implementation.

(2012-08-09-14:16)

I'm changing the call to constytuple so that it takes an equality type
variable and created about 5 new functions so that this equality type
variable gets propagated right through to the point where consTYPE_VAR
is called, where I can attach equality type information.

This might result in this information showing up in the right place
when doing constraint solving. If it does then I'll make this work in
a nicer way, otherwise I'll need to find another solution.

(2012-08-09-14:25)

No, wrong place. I'll remove these calls. I need to find out where
type variable number 31849 is generated, but there is no debugging
mechanism for this (mainly because creating a system for finding where
precisely a type variable is generated could be time consuming, and
after it's done there will be so much information it'll be like
looking for a needle in a haystack).

I'll keep hunting around.

(2012-08-09-15:30)

I've made a list at the top of things that still need to be handled
with respect to equality types. I'm just going to work through that.

(2012-08-09-16:18)

Hmm still can't find the point where the type variable is created
which is constrained to the TYPE_POLY term that I want to strip the
equality type variable out of, it doesn't seem to be done in any of
the obvious places. It must be being done somewhere else, or something
is happening in the unification phase where a new type variable is
created for some reason and the information hasn't been propagated
through.

*** 2012-08-10

(2012-08-10-08:13)

Starting with poster work today and going to try and take a look at
some of the things that are on backlog, going to come back to equality
types perhaps today if things go well but probably at the start of
next week.

(2012-08-10-09:06)

Hmm, I think I fixed the bugzilla. The fix is rather outlandish, and
involves installing two bugzilla versions currently and hacking of a
perl file.

We will probably need to always hack this perl file but we shouldn't
need the additional bugzilla installation (of a different
version). I'll see if I can get rid of the need for this now.

(2012-08-10-09:24)

In Template.pm I've changed the relative path of style sheets to be an
absolute path. This is an absolute hack, which happens to work for
reasons probably to do with the funky prefixes that we have to put on
URLs for cgi scripts.

At the moment I've changed the @requested_css field in Template.pm on
line 416 of Template.pm and changed the .htaccess file in the root of
the bugzilla-4.2.2 folder. I've also put the installation in my user
account.

There is still a problem with going to the homepage of the bugzilla
installation, as the web server throws errors. I'll try to fix them now.

(2012-08-10-09:28)

To hell with this .htaccess file, I'm just deleting it as it's causing
problems. It stops my edit to Template.pm from working too, as it
blocks access to the style sheets.

(2012-08-10-09:35)

I have made a change to common-links.html.tmpl file so that when
clicking home the user is directed straight to the index.cgi file
instead of just the directory, as the server doesn't redirect the user
to the index.cgi file (Scott mentioned that this was a pain as well).

This looks fine now, I'll update the documentation then reinstall the
website so that we get a link to the new bugzilla version.

(2012-08-10-10:55)

Documentation has been updated, and the website has been re-installed.

I've also added a link to the tasks.html file generated from
tasks.org. It should be noted that this file was copied to my $HOME,
and then installed that way. This file is not generated from tasks.org
yet due to issues with the convert-org-to-html script, but when this
is fixed then this file should be auto-generated.

It should be noted that these HTML pages that are generated need to be
changed, there is no link back to the Skalpel website which will
decrease our Google visibility. Something that should be thought
about for later.

(2012-08-10-11:49)

Updated the documentation for how to add tests to the analysis engine
test database. This can be found in:

documentation/skalpel-developer-info/test-framework

Removing the warning that I have in this document.

(2012-08-10-13:34)

Before this meting with Joe I'm going to try to add in any comments he
made on the poster that haven't been added in already. Then we can
look at again today and if he's happy with it I can put it to
printing. We still have time before the research open day.

(2012-08-10-16:15)

Having a go at fixing the errors that were reported in the test
framework this morning, I think I have found of most of them. Running
again now to test.

(2012-08-10-16:56)

Mm, no I didn't find most of them! There are still quite a few left,
probably going to spend the rest of the time doing this and meeting
Joe.

*** 2012-08-13

(2012-08-13-09:58)

Going to start today working on the poster, there are still some
things that need to be cleaned up there.

(2012-08-13-10:43)

Trying to get this label pointing to where a standard compiler reports
the error locating is not proving that easy, tikz is definitely the
way to do this kind of thing but I haven't used this package
before. Might look into this later as it looks like a pretty powerful
package.

(2012-08-13-11:10)

Think I've managed to squeeze at that text in on the left hand side
adequately without it looking too crushed.

There's quite a lot of space on the left hand side now that I've
merged the two boxes together (not the 'Future Work' box).

There's enough space to extend the future work section but also to add
in another section of text if that would be suitable. Hm.

(2012-08-13-14:35)

I think this poster is more or less finished up now. I want to fiddle
a bit more with it because the system structure section could be
extended a bit. After that I'll get on with fixing two tests that were
reported broken this morning.

(2012-08-13-15:02)

Hm. There's extra space here but I'm not really sure what to do with
it, everything is covered.

(2012-08-13-15:20)

Can't think of anything to put in this space right now, will come back
to it later. The poster already has about as much text on it. Hm, will
think about it later.

I'm going to fix up the tests that broke as it needs to be done.

(2012-08-13-17:16)

Fixed those bugs up, they should work great tomorrow. I'll do some
more on the equality types stuff this evening.

*** 2012-08-14

(2012-08-14-10:19)

Equality types today. I've made up a bunch of equality type tests and
am putting them into the Skalpel repository now.

I'll also get the typable tests into the repository today, then I'll
work through the test cases I've got and try to get some of those passing.

(2012-08-14-11:22)

Typable tests at the moment are put into the repository by mocking up
a JSON file from the default XML that's spat out of the analysis
engine when skalpel-debug is used. Maybe I should change that to JSON
by default. Hm I'll think about that.

(2012-08-14-11:40)

Ahh, this res.html file is always exported whether the user wants it
or not. I thought I'd seen this file cropping up all over the
place. I'm going to look into this, this will confuse everyone.

(2012-08-14-12:00)

This seems to get output only when I run skalpel-debug. I might remove
this option altogether as it isn't useful, if the user wants HTML
output they should use the command line option to get that, not the
debug option.

Yeah, I'm going to remove this option.

(2012-08-14-12:37)

I've changed that option so that we get JSON output by default from
skalpel with debugging mode enabled, so the errors output can be just
put straight into their own file in the test database.

Creating solutions for the typable tests now.

(2012-08-14-13:36)

Okay, all of the tests that weren't under test control because they
didn't have solution files are now in the test database. I'm removing
that whole folder, as it should be easy to generate solutions in test
database for any code file now.

(2012-08-14-14:20)

Closing bug 136, fixed that up. That was a pain for me today also.

(2012-08-14-14:41)

Aha, got in touch with Vincent. He's been working on a paper of his
own and then had a few weeks off. Vincent is kindly going to commit
the paper to the Skalpel repository just now. Might change my plan of
action for today to work on something like this.

He is getting 'Permission denied' when trying to log in to
lxultra8. I'll e-mail Joe about this.

(2012-08-14-15:15)

The sources for the paper are in the Skalpel repository, Vincent just
pushed them. I'll take a look at this at some point today, I don't
have some dependancies so I'll get those installed.

(2012-08-14-19:07)

I've been looking into the reason why an equality type error is not
detected in the following code fragment:

let
    val id : ''a -> ''a = fn x => x
in
    id 5.0
end;

I haven't handled the case where we have val <something> : <something
else>, so I suspect that this is a special case in the constraint
generator and doesn't fall into the same constraint generation as the
standard value declaration does.

I'd really like to at least build the pdf of the paper this evening
though, so I'll put this on the back burner. I'd also like the output
for these constraints to be more clearly readable, fix the display of
slices in the terminal and such things.

(2012-08-14-23:16)

Not looking like I'm going to get the chance to get around to the
paper this evening, I'm still looking at this equality types test. I'm
tweaking the way that the program flow through the constraint
generator is depicted when printed to the debugging output, it's a bit
hard to understand in its current form. Hoping to finish that up
tonight and push the changes.

*** 2012-08-15

(2012-08-15-01:18)

Gah, I always forget how to do a empty character in SML. #"" never
does the trick, to do this #"\000" is needed. #"\0" won't do either,
it must be three 0 characters.

EDIT: Nope, \000 is "\^@" (of course, what else would it be!). See log
at last early morning hour.

(2012-08-15-01:59)

God this is time consuming. I know it'll be worth the effort, but
this is the second change that I've made to something which is related
to the abstract syntax tree, and it really does eat up a lot of time
having so many different cases. It actually causes problems with the
equality type tests as well, as it's bugs in individual cases which
result in the failure of some of the tests.

(2012-08-15-02:06)

Argh! \000 isn't working as the termination character:

> String.implode [#"\000"];
val it = "\^@": string

Aaarrgh. Now I understand why the tabbing is messed up.

(2012-08-15-02:21)

Oh. You can't do the empty character in ML apparently. Nice. I won't
be forgetting that in a hurry this time, what a pain. I'll just have
to work around it.

(2012-08-15-03:28)

Ahh, this is starting to look much nicer now, though I'm going to stop
now as I do actually want to get on to other things (such as the paper)
when I wake up.

This code to print out the program flow is about 50% completed. I'm
hoping it's going to be enough to work with for the moment, it looks
like I'll certainly be able to debug these test cases much
easier. Hm, fingers crossed.

(2012-08-15-10:21)

I've decided to start today by looking at getting the terminal slices
working. This shouldn't be that difficult, and it's going to need to
be done so that students can use skalpel in an easier way.

(2012-08-15-11:12)

I have fixed the terminal front end interface. Apparently the 'switch'
keyword is now available when another perl package is installed. I
don't want the dependancy, so I've just replaced the switch statements
with if statements and that should work just fine for us.

I have noticed a few things that I'm going to change

1) This is what Skalpel outputs for code1.sml

% skalpel -e 1 -p output.pl -b 2 lib/basis.sml ~/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml
[Skalpel: parsing...]
[Skalpel: constraint generation...]
[Skalpel: enumeration...]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing
/home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
<<<<< [ the slice goes here ] >>>>>
[Skalpel: found counter=1 time=575 errors=[0[]]]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml]
[Skalpel: analysing /home/jpirie/repos/skalpel/lib/basis.sml]

This is far too much output. It might be useful to see all of these
things, so I'm going to keep this kind of output style in place, but
it's going to be been moved to the debug output.

2) The command line parameters could be a bit long for students, let's
   make it easier for them. I'm going to change it so that when
   running merely:

   skalpel code1.sml

   It uses basis option 2 with lib/basis.sml and outputs slices in the
   terminal window. That should make it very easy for them to
   understand.

3) The command line interface does not specify the file where a slice
   has come from. I don't want to fix this right now, it's not urgent
   and there are other things to attend to so I'm going to file a
   bug in the bugzilla database.

(2012-08-15-11:58)

Item 1 in the previous log entry has been implemented. Enable
constraint generation debugging to see this output. Now we get this
output from Skalpel:

% skalpel -bo 0 -e 1 -p output.pl -b 2 lib/basis.sml ~/repos/skalpel/testing/analysis-engine-tests/standard-ml/numbered/code1.sml
[Skalpel: parsing...]
[Skalpel: constraint generation...]
[Skalpel: enumeration...]
[Skalpel: unification...]
<<<<< [ slice goes here ] >>>>>
[Skalpel: found counter=1 time=579 errors=[0[]]]
[Skalpel: finished time=5089]

That's much better.

(2012-08-15-13:21)

Hm, I'm not sure what to do about the default basis option. I think
that by default, we should use the full basis, but how do we know what
location that is in? The problem is that we don't know.

I guess we could store it in an environment variable, and if it's not
there default back to the -b 0 option. That sounds alright.

(2012-08-15-14:10)

Argh! There's a bug in the terminal slice viewing script. If the
output directory is absolute, and not relative, it explodes. I'm going
to fix this now, this is required.

(2012-08-15-14:21)

Ok, I think I've fixed most of this up. The only issue is that if the
user specifies a perl file that is not the default then they don't get
the slices in the terminal for some reason. I think this should be
easy to fix so I'll just go ahead and do that...

(2012-08-15-15:50)

Done. Also fixed that bug (not reported) where if no prefix is
specified for Perl, HTML files etc, then it just went ahead but didn't
make any output files.

(2012-08-15-16:20)

I've changed things a little so that if the user doesn't specify a
basis option and they don't have an environment variable set then we
just throw an error. Falling back to the no basis option is not really
acceptable.

There aren't any major bugs regarding the front end terminal interface
that I know of, so I'm ceasing work on this part for now.

(2012-08-15-17:36)

.. apart from it's unclear when Skalpel doesn't find any errors. I've
added that in now so the user is presented with how many errors
Skalpel has found, otherwise it's not that clear when a program is
deemed typable.

Oh and I just noticed that the output files don't get cleaned up after
each run. They should be, if they are to be kept then some kind of
debug option is needed, otherwise Skalpel executes old files. Filing a
bug for now.

(2012-08-15-17:46)

Actually, this bug is going to confuse me sometimes and might lead to
time loss. I'm going to add a warning at the top of this file too.

(2012-08-16-20:12)

Having a quick look at the state of the documentation. It's actually
in not too bad a shape, better than I expected. It would be good to
clean some of this up though, it will need to be done before a release
happens at any rate.

(2012-08-16-00:02)

Had a few e-mails from Joe pointing some useful things out. I've
added a bunch of bugs against various components and I've changed the
default mail format that Bugzilla uses from HTML to plain text which
might be for the best anyway.

I also mentioned that I want to start doing 30 minutes of
documentation a day, which sounds like a good thing to aim for, so
long as I remember to stop working after the 30 allocated minutes and
don't go off for hours updating things. Eventually I'll run out of
documentation to update and maybe then I can use the time to fix bugs
or give aid to other neglected areas of the project. I'll see how it
goes, maybe this will be too difficult to keep up.

Right, I'm going to sort out the building of the paper, it must be
looked at. Joe mentioned that maybe this should sit somewhere that
isn't public, and maybe this should indeed be the case. Something to
talk about at our next meeting I guess, added it to the list.

(2012-08-16-00:49)

Okay, I can now build the paper. Question is, what now? Maybe I should
just go through the whole thing and build up suggestions to change, or
maybe I should go straight ahead and look at how equality types could
be built in to this.

(2012-08-16-02:58)

I've had a quick look at the paper this evening but ended up tweaking
the bugzilla error reports and the like. I'll have to read over this
tomorrow and take a good look at it.

*** 2012-08-16

(2012-08-16-11:46)

Going to tidy up the poster before this meeting with Joe today, it
would be good to get that to printing some time soon so I'll focus on that.

(2012-08-16-10:38)

I've made a few edits to the poster, and fixed some of the serious
bugs that existed for the terminal front end. I'll aim to finish this
the poster tomorrow and get it to Joe to glance over and suggest any
changes before I get it sent for printing.

*** 2012-08-17

(2012-08-17-09:28)

Poster today, needs to be finished. Paper will be neglected for yet
another day.

(2012-08-17-15:08)

I've been working on this poster all day, and most of it has been
spent trying to reduce some space that tikz creates by about a few
millimeters. It's unbelievable how much time it can take preparing
this stuff properly, in the meeting with Joe yesterday we spent most
of the time trying to get our heads around tikz. The time cost has
certainly not to be underestimated. Hmm.

Whenever I draw anything around some text, it moves. Not much, but
just enough to be noticeable. I've tried rather a number of different
arguments which should move the position, but they don't in this case,
probably because they are being overridden. I'll keep reading through
the documentation and trying the things that are recommended, but the
deadline for this is the end of today. It should be in printing on
Monday really.

(2012-08-17-15:35)

A warning for the future, tikz doesn't always draw the arrow between
nodes that you want, but rather the one that is defined first. So I
have a definition

NODE A
NODE B
NODE C

DRAW B C

Which is supposed to draw a node between B and C. But it drawws it
between B and A, because A was defined first. Maybe this has something
to do with the remember picture argument, who knows. I don't have time
to chase that down today.

(2012-08-17-15:55)

These positioning parameters just aren't affecting this node in any
way whatsoever. 

(2012-08-17-15:58)

Out of time for this. Oh well, never mind.

*** 2012-08-18

(2012-08-18-15:06)

Fixed the alignment of that text by adjusting the baseline manually,
poster should be fine on that side of things now.

*** 2012-08-20

(2012-08-20-13:57)

Trying to print this PGF manual, but there seems to be something
strange happening with the print server as I can't print anything of
length greater than 2 pages from my printer (aside from the the linux
labs, which will print 4 pages, and the ground floor labs which will
print 0 pages). I have printed the TES paper however and that was
fine, so perhaps it has something to do with the size of the pgfmanual
document? Anyway, moving on.

I still haven't received any e-mail confirming the poster size for the
displays on Thursday. I should probably however get the poster to
graphics and printing today, so I'll try to find Christine and get all
the paperwork sorted out involving that and printing when they need
the poster by at the latest.

I must look at the TES paper today though at some point, there should
be time for this.

(2012-08-20-14:46)

A future note: for the printing of poster, they need the poster 48
hours in advance. So for example if I want to pick up the poster on
Thursday morning (which in this case I do) then I need to give it to
them first thing tomorrow. It would really be better to give it to
them today but I guess I'll wait until tomorrow in the hope that the
poster size will be confirmed.

(2012-08-20-15:14)

Nick does need to confirm the printing of these posters, although
there isn't a form that he has to sign. I'll have to catch him later
today as I can't find him at the moment.

(2012-08-20-15:31)

Alright, I'm going to work a bit on passing some more equality type
cases.

(2012-08-20-15:55)

Right, so this doesn't work:

structure S : sig datatype ''a mydt = firstCons of ''a end =
struct
datatype ''a mydt = firstCons of ''a
end;

S.firstCons(5.0)

But when taking the signature definition away, it does work! This is
because when a signature is present a rather different route is taken
through the abstract syntax tree. I might not delve into this example
right now, this looks like it will take several hours to go through
and I don't want to stop half way through.

Some notes for when I come back to this:

Without the signature the abstract syntax tree goes through LabSigExp
-> StrExpBasic -> SpecDat -> DatDesc -> DatDescOne -> [...]

With the signature the path is:

StrBindOne -> StrId -> LabStrExp -> StrExpBasic

I'll need to do something clever with the signatures, because the
eqtype keyword can be used there. Perhaps my time would be best spent
looking at that first.

I'll take a look at the paper instead for the moment, and do equality
types either after the poster printing tomorrow or this evening if I
get some time.

(2012-08-20-16:09)

Managed to find Nick, he's approved the printing of the poster. I'll
head in first thing tomorrow and get it to them so that I can pick it
up first thing on Thursday morning.

*** 2012-08-21

(2012-08-21-09:51)

The poster has been sent to graphics and printing and will be ready
for pickup on Thursday morning. The poster that has been sent is the
PDF that was generated from the .tex source in the tes/ repository,
git commit hash ba356c778adec28352f35dfaa27accfc68a88412.

The codes used to print the poster have been stored in the tes/
repository in the commit after the hash above for future reference, as
these could be used to print further posters.

(2012-08-21-10:08)

I just remembered there's a windows lab next to the Linux lab, going
to quickly try printing the TikZ documentation from there and hope
that printer can manage more successfully. Plan for today is equality
types though, and looking at the paper. I'm hoping to work with
equality types first to familiarise myself with the structure again,
then read the paper and if I read far enough try to integrate into
that the way equality types are represented.

(2012-08-21-10:41)

Something strange is happening with the skalpel configure script, I
noticed this yesterday too while writing some documentation. The
configure file which is present in the Skalpel repository is actually
old. We should be generating the configure script by running autoconf
on configure.ac, but this file is not present.

This problem is really best averted by having the test framework clone
and compile the skalpel binary from scratch.

I'll look into fixing this up later, this is not what I want to be
working on today. I'll file a bug.

(2012-08-21-11:21)

Printers seem to be fixed as TikZ docs are printing now, moving on to
equality types. Looking at the
struct-with-sig-including-tick-tick-a.sml example.

This doesn't seem to work because I haven't written code to strip out
equality type information from an explicit type variable. I will most
likely have to do so now.

(2012-08-21-12:15)

Hmm, the path through the ast is somewhat complex. Going to have to
figure this out first.

(2012-08-21-13:34)

Still trawling through the ast, but I think I see where changes need
to be made in this example.

There is something that I have decided I would like, is for some small
GUI which will allow me to see what constraints are generated at which
parts of the constraint generation process.

I made some kind of start with this earlier, so output comes out like
this:

[...] A.ValDescOne
[...] |- A.LabId
[...] |-   |-A.Ident (str="x")
[...] |-A.LabType
[...]       |-A.TypeArrow
[...]             |-A.LabType
[...]             |   ╰─A.TypeOneVar
[...]             |         |-A.EqualityTypeVar (f_typevar; str="''a")
[...]             |-A.LabType
[...]                   |-A.TypeOneVar
[...]                         |-A.EqualityTypeVar (f_typevar; str="''a")

Except that I've used box drawing characters rather than the flimsy
ascii symbols (edited for the purposes of this document). I would love
for:

a) abstract syntax tree path printing in this way
b) to be able to see the constraints that are generated at each stage
by clicking on each node in the tree

If I had this I would just die with how nice it would be. I don't
really want to do that now because I've spent a fair bit of time
fiddling with this sort of thing and I want to get at least this test
passing quickly. I might look at doing something like this perhaps
this evening or whatever. Something like that would be unbelievably
useful. Perhaps I could try out the SML GTK bindings which I have
heard on the IRC channel are actually very up to date...

(2012-08-21-14:05)

Right, I think this issue is coming about because this example uses
explicit type variable accessors, which are something I haven't looked
at yet.

(2012-08-21-14:34)

Argh, there is no debugging print out for any of this stuff yet,
signatures and structures are a complete mystery at the
moment. Basically, in the example I've been working on, the answer to
the question "what constraints are generated for the binding of 'x' in
"sig val x : ''a -> ''a end"? I have no idea, I'll need to print out
this information.

(2012-08-21-14:40)

Actually, as a quick method which will let me see this constraint
information quickly, I could prefix the output with stars and then
save it in a .org file.

That way I would be able to just see the output that I want with very
little effort. I feel bad about doing this though, because it's a
debugging feature which is tied to Emacs, which is a route that should
generally be avoided. It's such little effort though for such great a
gain I'm going to do it that way and code it up immediately, as the
amount of output for even small programs is making my head explode and
this should help that situation without costing me a lot of time.

(2012-08-21-16:13)

Hm, this isn't as straight forward as I thought. Due to the nature of
the tree traversal constraints will get printed AFTER the children are
traversed and printed, which means the tab expansion on nodes won't
work. Hmm.

(2012-08-21-16:31)

I don't see an easy way to do this now. I shall think about this again
later at some point. Going back to working on this example for now.

(2012-08-21-17:41)

Haven't changed any of the underlying code today, it's all just
debugging improvements. I'm going to work on this some more this
evening to make up for that, there needs to be progress made on the
actual test case itself, ideally it should pass by the end of today
but I'm aware that might not happen. Nevertheless I want to do some
more on this in the evening.

I'm happier with the debugging output now though, it's easier to
understand what the analysis engine is actually doing when it looks at
a program.

(2012-08-21-18:04)

Aha, time to sneak some 30 minutes to update documentation. As I
mentioned earlier there is some kind of issue with the configuration
script that we currently have in the Skalpel repository, I'll look at
that a little if I can get a gap of time inside this 30 minutes.

(2012-08-21-19:01)

Hm, didn't quite get time to look at the configure script, I shall
leave that until another day. Documentation is looking better though,
so that's a win.

(2012-08-21-21:12)

Hoping to do something useful with this example before the day is
out. I think I've nearly finished writing the code to show the path
through the constraint generator so I can follow constraints through
the system easily.

(2012-08-21-23:07)

Possibly it might be a better target just to finish the printing
mechanism and do the example tomorrow, this is alas probably going to
take most of the rest of the evening. A good use of an evening though
if it saves me pain tomorrow I guess!

*** 2012-08-22

(2012-08-22-00:22)

Hmm it's still hard to see some of the constraints that are generated
on the path through the constraint generator, to do this nicely I'd
need to program up another program, like the GUI I was talking about
earlier. I don't really have time to work on that right now, so I'll
use a workaround for that and just used what I've developed today.

(2012-08-22-01:44)

Done, that took a little longer than I wanted but I guess I'm happy
with it despite the time cost this evening. This should help me figure
out what is going on with this equality type test tomorrow, and
hopefully I can get that passing before the industry day on Thursday
and then come back to equality types on Friday.

(2012-08-22-11:22)

I see from the work yesterday that the simple example I'm working on:

structure S : sig val x : ''a -> ''a end =
struct
fun x y = y
end;

S.x 5.0

results in over 50 constraint generation function calls. I can see now
why this example doesn't work yet, I haven't written equality
type information for all of these cases yet. I've started to add that
functionality now.

I think that the best way to do this is to work backwards, so I'm
going to try that, starting by looking at the constraints that are
available when S.x 5.0 is being handled. What should be happening is
S.x should be an accessor to the x value inside the structure S, and
when we look up that accessor we should see that x has EQUALITY_TYPE
constraints attached to it, which will cause an error with the 5.0
argument given to x.

The text that I wrote earlier about not handling explicit type
variable accessors is accurate, and may be the direct reason why this
doesn't work at the moment.

(2012-08-22-13:48)

I decided to look at the paper, I haven't read this version through
thoroughly yet and just skipped to the part where information where
external labelled syntax and the syntax of constraint terms are shown
(figures 5 and 6). I'm wondering where the other kinds of variables
that we have fit into this, for example the row variables, the type
function variables, the field variables, the typename variables
etc. The equality type variables are essentially currently an extension
of these. There is always type constructor names variable γ, but that
is not the same as a typename variable. Hm.

(2012-08-22-15:43)

I want to try a little experiment involving the way some equality
types are represented. I'm going to until 9pm at the very latest and
see if my idea works out, if I don't see it going anywhere then I'll
scrap it and get the test passing mentioned earlier with the rest of
the evening. I'll document the ideas here only if they work out,
otherwise I won't as they'll take time to write up.

This will unfortunately take over the documentation 30 minutes alas,
but I shall be sure and do some of that tomorrow! :-)

(2012-08-22-17:10)

Aha, I had it in my head that the type variables being passed around
the constraint generator were TYPE_VAR constructions, where as in fact
they are just numbers, like the equality type variables that are being
passed around. I was hoping that I could just put the equality type
variable information in the TYPE_VAR construction, then that would be
one less thing to pass around, but as we are only passing type
variables numbers, this isn't so practical. We can't really constrain
these type variables to be equal to one another with equality type
constraint construction functions because the code would get very
messy with the type of the equality type constraint generation
function being Ty.ty -> Ty.ty -> Label.label -> oneConstraint, and
from that point another constraint would be needed to assign variables
to status values (unless there was a dummy Ty form constructed with a
status in it or something), and the whole thing becomes less
modular. If I remember correctly issues with labels arose when I tried
this method too, but this wouldn't have been the case now anyway
because equality type constraints take labels carefully into account
when generating constraints. I'm not happy though that we have
equality type accessors, which basically do the same things as a
normal accessor except they carry the equality type variable that is
needed for the generation of constraints.

I'm going to look at the way that accessors are done now, I'm not
convinced that we can't just wrap the equality type variable
information in the standard accessor that was being used before. If I
can make this happen then it should lead to clearer code in the way
that accessors are solved, which will actually help with the example
that I have been working on anyway.

(2012-08-22-17:40)

I am pretty sure I can sort out these accessors so that they nice,
going to do that now and then continue development on this test
case. Didn't take nearly as long as I thought it would to look into
that stuff, great.

I've just to look at the differences between the relevant functions in
the constraint solver.

(2012-08-22-17:51)

Actually, the more I look at it, the more the current system actually
looks like a good design. Without an accessor specifically for
equality types, the constraint generation functions would have lines
to put equality type information into the 'sem' portion of the each
binder, for example:

val a  = E.genAccIeEm (E.consAccId (I.ID (id, lab)) tv (CL.consTYVAR()) lab) lab
val a  = E.genAccIoEm (E.consAccId (I.ID (v, lab)) (T.ROW_VAR sv) (CL.consOC ()) lab) lab
val a  = E.genAccIfEm (E.consAccId lid (env1, env2) (CL.consFUNC ())lab) lab
val a  = E.genAccIiEm (E.consAccId lid (E.consENV_VAR ev lab) (CL.consSIG ()) lab) lab

Equality type information would need to be wrapped into the row
variables, environment variables and whatever on earth CL.consTYVAR
returns, which would be nasty to debug later, because wrapping
equality type information in these types would mean that dummy values
would need to be put in (eg EQUALITY_TYPE_STATUS(UNKNOWN)) which would
be printed out when debugging.

It wouldn't make it any faster to have two accessors instead of one
anyway, because the work done by solving the equality type accessors
is not duplicated in other types of accessors. I'm just going to keep
this as it is and continue working on the current equality type test.

I wrote something about accessors before when I was looking at this
test, now I have re-familiarised myself with the accessor solving
process things should go smoothly I hope. :-)

(2012-08-22-20:25)

Alright from the debugging output I think an equality type error is
not detected in this case because the equality type variables aren't
propagated correctly for signatures (which makes sense, as I haven't
done anything with signatures yet). I'm going to tell the analysis
engine that something of the form

val x : [some EQUALITY_TYPE] -> [some EQUALITY_TYPE]

means that x also has attached to it some information that it too
should be have an EQUALITY_TYPE which is passed to it. The constraints
for the term

S.x 5.0

Look alright, so I'll put the right information in the binding of x
and it should work fine.

(2012-08-22-22:03)

Aww, that alone didn't quite fix everything. This must have something
to do with the signature element. I wrote something about explicit
type variables before, I'm going to go back and read that because I'm
not seeing these come up in the debugging output.

(2012-08-22-22:32)

Ah, I didn't have some debugging switches on, silly me. There are some
explicit type variable accessors being solved, I'm not sure what they
are doing though. I'm noticing something suspicious which help me. The
label 40175, which is this example is the label attributed to "5.0",
is being used in this accessor constraint:

ACCESSOR_CONSTRAINT(OVERLOADING_CLASSES_ACCESSOR(({ID(373,40175),ROW_VAR(s10541),OC,40175},[40175],[],)))

Perhaps this looks up the signature in some way and gets ''a out. Now
THAT would be great, because then I can just pass the equality type
variables through and that should solve this problem. Checking now.

(2012-08-22-22:49)

Oh god, I didn't realise how many of these kinds of constraints we
actually solve. There are 40 occurrences of this kind of constraint
being solved in just this one example. Oh this isn't going to be nice
is it.

Ah, some of them are coming from the basis, these label numbers aren't
assigned anywhere in this program. Maybe if I filter out the ones from
the basis I'll be left with a reasonable amount to look at.

(2012-08-22-22:53)

Just one fits that description. Hmm this might be a dead end, I think
it's checking out the real number as an accessor against some binder
in the basis and judging from these label numbers, the binder comes
from somewhere in the basis. I might be wrong. Hmmm....

(2012-08-22-22:57)

Nope, I'm right, the binder comes from the basis. Whatever the
solution is to this problem it doesn't have anything to do with the
accessors for overloading classes. I'll take a look at some of the
other types of constraints that are generated.

(2012-08-22-23:09)

I don't see any constraints that I can look into on the side from the
code 'S.x 5.0' or from the signature expression. I'm going to print
out the constraints for the structure. Maybe something is happening
like S.x looks up x in the structure S, then the type information for
x is deemed by solving an accessor to the signature binding or
something.

*** 2012-08-23

(2012-08-23-00:19)

Haven't been able to find any problems so far, I'm not sure why this
test is not working. I'll take another look at it tomorrow after the
business with the industry people is sorted out.


(2012-08-23-06:57)

I think I see a gap in the constraints that are getting printed out so
perhaps some are being generated that I'm not seeing. When I find the
constraint I'm looking for I'm hoping that it should be easy to make
this test pass.

(2012-08-23-07:34)

The binder for x in the signature expressing is this:

(EQUALITY_TYPES) Unification.sml: bind = TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n1,OTHER_CONS,l40152),ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l40152):TYPE_DEPENDANCY(TYPE_VAR(t46157,-,POLY,EQUALITY_TYPE_STATUS(UN
KNOWN)),[40147,40153,40154],[],[]),l40152),FIELD_CONSTRUCTION((2,l40152):TYPE_DEPENDANCY(TYPE_VAR(t46157,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)),[40147,40154,40155,40156],[],[]),l40152)],-,l40152),l40152,EQUAL
ITY_TYPE_STATUS(UNKNOWN)),[40148,40149,40150,40151,40152],[],[])

I tried editing this before to contain an equality type status of
EQUALITY_TYPE to see what it would do but the unification algorithm
still did not reach the conclusion that an equality type error was
present. Hm.

The problem is that what I really want is to look at the equality type
information not on x itself but for the arguments of x, and make the
error at that point, but I'm not sure which constraints.

(2012-08-23-07:53)

I have changed the signature from val x : ''a -> ''a to val x : string
-> ''a in the hope of taking the label associated with the string type
and looking for that in the error that comes up, because this problem
is currently handled.

I see that there is a type constructor accessor being used in this
case, perhaps I need to look into the use of this accessor. I need to
head in to uni to make sure this poster is ready, I'll pick this up
when I next get a moment.

(2012-08-23-10:11)

Got the poster and attached the appropriate sticky yellow dots on the
pack. I'll head there in about a half hour or something. It seems the
poster session lasts for two hours and a half, and then it's demos
after that.

*** 2012-08-24

(2012-08-24-10:12)

Alright, a week from today I want to be getting pretty damn close to
finishing equality types. I'm going to see how much I can get done in
the next seven days, and hopefully power through a lot of the tasks
that are left.

I'm going to start by updating the list of the things which aren't
handled yet if necessary, then I'll most likely go back to that
example that I've been working on and get that passing today. I really
wanted to get that passing at the end of Wednesday but I couldn't find
the constraints that I needed to change in time, hopefully I will be
able to do that today.

(2012-08-24-11:48)

I'm pasting the example here again so I can refer to it without
looking back

structure S : sig val x : ''a -> ''a end =
struct
fun x y = y
end;

S.x 5.0


I can't find any constraints linking the binding of y in the structure
to the ''a type variable in the signature whatsoever. In the program,
the signature comes first, but during constraint generation, we create
the constraints for the signature after generating the constraints for
the structure. I'm going to look at the constraints generated for the
signature and I hope to find a link there between those and the
structure.

What I expect to find is that the binding of x in the signature is
some kind of accessor to the binding x in the structure, but we'll
see.

I changed the first ''a in the signature to 'string' because that's an
error which already works which has the same kind of idea attached to
it. The problem is there is no debugging output associated with that
in the unification algorithm at all, so I have no idea what process
causes that to be an error.

Perhaps the solution is to add lots more print statements throughout
the unification algorithm, then search though the output for the
labels 40153-40155 which are the labels associated with the 'string'
usage in the signature.

(2012-08-24-12:13)

I have discovered something, a function called 'matchSigStr' in
Unification.sml. It had a nice comment written above it which Vincent
wrote so I found it nice and quickly, huzzah! ;-)

This function has the comment:

(* Generalises the structure env2 so that it is equal to
 * the signature env1.
 * For functors, b is always true and bfun will be false. *)
fun matchSigStr env1 env2 l filters labs stts deps bfun err =

This function is only called in three locations (ignoring recursive
calls, that doesn't help me here). I'm hoping somewhere around these
locations lies information that I can use to understand where exactly
structures are matched up with their signatures, perhaps the error
will be generated somewhere around there.

One of these locations is when solving functor constraints, I don't
care about that right now. Another of these locations is when solving
signature constraints (this sounds like something that I want to
figure out), and the final location is when solving a signature
environment. I will look into both of these locations (not the functor
one, there is no functor in this example) and see what I can find.

(2012-08-24-12:23)

I added in debug print statements to tell me when the unification
algorithm is solving a signature constraints and signature
environments. I see in the output that there are 84 occurrences where
the unification algorithm tries to solve a signature constraint, but
there are no cases where the algorithm tries to solve a signature
environment.

I shall turn my attention to the solving of signature constraints.

(2012-08-24-13:02)

There are no errors generated when solving signature constraints, the
error must be generated elsewhere. I'm going to make the unification
algorithm print to debug whenever it generates any kind of error and
where that error came from. That will tell me at least where the error
is generated, then I can follow the label flow or something.

(2012-08-24-13:38)

Alright, an error is generated when fsimplifying a type constraint of
a type variable. That's not quite the level of specificity that I was
after, but I'll take it. I'll print out the labels, and try to figure
out how the labels are built up. More importantly, I want to know how
the labels from the signature and the structure come together.

(2012-08-24-13:53)

I have changed the example because I didn't get the error that I
wanted to test against, it's now this:

structure S : sig val x : string -> string end =
struct
fun x y = y
end;

S.x 5.0


Now I get this error:

(CONSTRAINT_SOLVING) Unification.sml: Error detected while
fsimplifying a type constraint of a type constructor and a type poly

This might be something that I can work with to help me figure out
what I need to do in order to detect equality type errors. I'm going
to look at the label sets now and try and follow things through.

(2012-08-24-13:56)

Using the built-in basis, this is the error that I get:

Type constructor clash between string and real:

Slice in context:
Line 1: structure S : sig val x : string -> string end =
Lines 2-5:       ...
Line 6: S.x 5.0

Slice on its own:
⟨..structure ⟨..S : sig ⟨..val x : ⟨..⟩ string -> ⟨..⟩..⟩ end = ⟨..⟩..⟩;
 ..S.x 5.0..⟩

That's very similar to what I want for the equality type error,
hopefully I can make something rather similar to this.

(2012-08-24-13:57)

Oh wait, the error is between a type constructor and a type poly!
That's great, that's exactly what I want isn't it? I can just annotate
the TYPE_POLY and the TYPE_CONSTRUCTOR with equality type variable
information (well it's won't be a TYPE_CONSTRUCTOR because I'll be
using ''a instead of string, but it should be a similar
method). Here's the constraint that results in an error:

TYPE_CONSTRAINT(((TYPE_CONSTRUCTOR (TYPENAME_CONSTRUCTION(string,DECLARATION_CONS(39),l548),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l549),[547,549],[],[]),l548,EQUALITY_TYPE_STATUS(UNKNOWN)),TYPE_POLY(ROW_DEP
ENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR (TYPENAME_CONSTRUCTION(real,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l78
4,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONSTRUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR (TYPENAME_CONSTRUCTION(real,DECLARATION_CONS(61
),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,10089,10090,10091,11132,11133,11134,11135,11136,1
1137,11138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR (TYPENAME_CONSTRUCTION(a user type,DECLARATIO
N_CONS(61),l10090),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,397
43,39744,39745,39746],[],[]),l39728)],-,l39728),[39725,39726,39727,39728,40179],[],[]),51,POLY,CONSTANT(5.0,373,40179),l40179,EQUALITY_TYPE_VAR(eqtv19691))),[0,3,4,5,6,546,548,1032,40143,40144,40145,40146,40
147,40148,40149,40150,40151,40152,40153,40154,40155,40175,40176,40177,40178,40179],[],))


Well would you look at that. There's an equality type variable already
in there, because I already store equality type variable information
in the TYPE_POLY term.

I'm guessing that there will be another constraint that instead of
solving a TYPE_CONSTRUCTOR and a TYPE_POLY will solve a TYPE_VARIABLE
and a TYPE_POLY (or something), then I can create a constraint between
the two equality type variables that are in the type variable and the
type poly term and I should get an equality type error. This could
work.... so long as I can find such a function! :-)

(2012-08-24-14:11)

There are 45 occurrences of "TYPE_POLY" in Unification.sml. Once I
whittle that down to just pattern match lines there should be maybe 15
or so. From there I'm going to print out the constraints that I'm
getting, and then reset the code example to what I actually WANT to
pass, and examine all constraints for something that looks like a
unification of ''a and 5.0. From there, edit that point to include the
unification of the equality type variables involved.

(2012-08-24-14:22)

I am getting something out now, there are constraints being unified
between a TYPE_VAR and a TYPE_POLY. I think this might be the case
that I have been looking for, but the TYPE_VAR constructor currently
doesn't contain equality type information, even though there is a slot
to support such a thing. This might be the time where I now have to
use that slot. It would be REALLY useful if I had the label for the
TYPE_VAR at the moment, because if that was the same label as the ''a
then that would confirm that this is the right location. But type
variables do not have labels attached to them, so I must have to use
something else.

(2012-08-24-15:58)

Finding this constraint is proving to be pretty fiddly, it's like
looking for a needle in a haystack. I have this constraint which looks
like what I want:

TYPE_VAR(t46158,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something
else, namely this: TYPE_POLY(..........EQUALITY_TYPE_VAR(eqtv19691))

The question is where the type variable 46158 coming from? Type
variables are generated all over the analysis engine so it's anybody's
guess where that was generated. Looking at the places in the
constraint generator where the relevant constraints are generated is
not a good move either, as this type variable is most likely created
at unification time, which is to be derived from some other type
variable, which is derived from some other type variable and so on.

I'm not sure what the best option is in terms of how to find out how
to get equality type information into that type variable.

(2012-08-24-16:06)

Alright, I'm going to have to use the debug method I used before, and
place fake information inside type variables when they are constructed
in different places around the analysis engine and find the
construction that passes the fake information through to this
point. To do this I'll need to add such information in every type
variable construction in the constraint generation phase and the
constraint solving phase (or at least, keep going until I see the data
show up), and then figure out what to do next from that point.

(2012-08-24-16:10)

I've changed the consTYPE_VAR function to always put 9999999 in the
equality type variable field of the type variable. If it shows up in
this constraint, then some function which calls consTYPE_VAR is
responsible (I know it doesn't help much, pretty much everything
calls TYPE_VAR, I'll have to break it down best I can).

(2012-08-24-16:13)

Oh, it didn't show up in this constraint. It did show up in most of
the others, but not in this one. That's good news I think, that should
give me a shorter list to work with.

(2012-08-24-16:20)

I'm about to really do some crazy things which I don't want kept
later, so I'm going to commit now on the devel branch, and revert back
when I figure out where to make the change.

(2012-08-24-16:33)

There are approximately 40 cases here, one of them must construct the
type variable I'm looking for. I'm going to work through the
constraint generator first, then go through the constraint solver.

(2012-08-24-16:46)

Alright I found it, but it's in the unification 'freshty' function
which means the root of the problem could be coming from anywhere in
the unification algorithm which calls freshty, and there are 42
occurrences of that. Hm.

(2012-08-24-17:29)

I've decided to change freshty so that the equality type information
is carried over between freshening of type variables, which is really
something that would have to be done for this to work anyway. The only
problem with this is that I might loose the information that I have at
the moment. We'll see...

(2012-08-24-17:31)

Alright, now that's happened the equality type information in the
type variable which is inside the type constraint is T.UNKNOWN. I'll
have to keep going through the cases where T.UNKNOWN is generated I
guess. I've changed quite a few of those so there shouldn't be that
many left I hope...

(2012-08-24-18:09)

Got it, I'm getting an equality type error now. I need to play with
the labels a bit, because I'm not sure I have the right labels yet,
hrm. I have only one endpoint label too, so I need to look into that.

(2012-08-24-18:11)

Wait, I can do this better. I'm putting in an equality type status
when I see ''a but what I should do is put in a variable which has
been constructed with label information.

And I hope that works because currently there is no region
information for the current error that is found... ^^

(2012-08-24-18:17)

Ok, I made that change but the slice has wildly incorrect labels, this
is the slice:

Equality type required:

Slice in context:
Lines 1-3335:    ...
Line 3336: overload <=  : 'a * 'a -> bool with 'a in (in Int, in Word, in Real, in Char, in String)
Lines 3337-3347:         ...

Slice on its own:
⟨..overload ⟨..⟩ : ⟨..⟩ with ⟨..⟩ in ⟨..⟩..⟩

which is clearly nonsense. I'm not sure how the labels could be so
clearly wrong here. Hmm wait... further errors are found. Oh dear, all
these slices are the same and they're all nonsense. I'll look at the
labels now.

(2012-08-24-18:27)

Ah I see, I think equality type errors are being detected in the
basis, and that's why there aren't any regions in the users code
file. I'm going to make a hack for the moment so that I can look at
the slice I get for the users code to see what that's doing as that
might provide some indication of what's going on, and then come back
and fix this problem, clean up, commit, and test.

(2012-08-24-18:44)

Aha:

TODO raised: unhandled equality type discovered in the constraint
solver, raised in the 'f_simplify' function of Unification.sml

Boy am I glad I made that exception. Looks like it's trying to solve a
(STATUS, VARIABLE) combination which isn't handled. I'll do what
Vincent did and just flip the terms around.

(2012-08-25-11:44)

Something weird is going on. There is an equality type variable which
is mapped to by two different equality type variables. The question is
what to put in the state map with the equality type variable that's
being mapped to twice. Maybe I should just keep the same variable in
the map and update the labels. The unification algorithm should remove
any labels which become irrelevant...

*** 2012-08-25

(2012-08-25-02:23)

I have edited the constraint solving algorithm so that if we see
something of form (VAR, STATUS), then we do not blindly update the VAR
in the map to be constrained to STATUS if STATUS is unknown and the
right hand side of the map is currently another equality type
variable. This will stop the equality type variable information
getting over-ridden by UNKNOWN status values, which will hopefully
solve this problem.

(2012-08-25-11:35)

Hm, this problem must come from either the way that the constraint
solving algorithm handles having an equality type variable mapped to
by two different equality type variables, or possible from not having
built up the correct labels along the way when generating this
constraint. From what I can see the labels look correct though...

(2012-08-25-11:49)

Right from what I see here the initial pass of the unification
algorithm works correctly, the right labels are generated and an error
is detected. When the unification algorithm is run a few more times,
it eventually gets to the point where it blows up because it hasn't
got two endpoint labels, and that's because it seems to have removed
all the labels from the error except the label for 5.0.

How can an error be detected with only one label? This is pretty
crazy, it must be because the same constraints aren't being generated
each time for the TYPE_VAR constructor responsible for holding the
blame for ''a, as the ''a doesn't even appear in the last slice the
minimisation algorithm tries.

(2012-08-25-11:53)

I think I see a bug in the code that's here for solving equality type
status values:

| fsimplify ((E.EQUALITY_TYPE_CONSTRAINT ((equalityTypeVar as T.EQUALITY_TYPE_VAR eqtv, equalityTypeStatus as T.EQUALITY_TYPE_STATUS status), ls, deps, ids)):: cs') l =

When looking up the state of eqtv, if we a status value, then we do
this:

| SOME (T.EQUALITY_TYPE_DEPENDANCY((T.EQUALITY_TYPE_STATUS statusInMap), resultLabels, resultDeps, resultIds)) => |

if (statusInMap = status andalso statusInMap <> T.UNKNOWN) then fsimplify cs' l
else
(* Generate an error! *)


This is surely incorrect. What happens if status is UNKNOWN, but the
one in the map is EQUALITY_TYPE or NOT_EQUALITY_TYPE? It looks to me
like an error is generated. The code checks if the status in the map
is unknown, then we can replace it, but it doesn't handle the case if
the status we're currently getting is UNKNOWN and the map has
NOT_EQUALITY_TYPE or EQUALITY_TYPE in it. This might be the cause for
the problem. I'm not sure what labels to take here either, I'll think
about it.

At the moment I'm going to change it so that if we see an equality
type variable constrained to UNKNOWN when it already has a status of
EQUALITY_TYPE or NOT_EQUALITY_TYPE in the map then it will just ignore
it. We might actually need to take the labels from that constraint,
hmm.

(2012-08-25-12:14)

Unification algorithm is still blowing up. I'm going to try taking the
labels from the UNKNOWN equality type status constraint and putting
those in the map, keeping whatever status is there already the same.

Oh. Doing that broke everything, and it didn't even detect an
error. How can adding more labels to an error cause the analysis
engine to not find an error?

(2012-08-25-12:43)

Well, I have added a function to just print out the equality type
state when the analysis engine reaches the point where it doesn't have
an error but it believes it should have because it encountered one on
a previous unification algorithm run:

19684 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40153,40154],[40154],[]))
19685 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40153,40154],[40154],[]))
19688 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_VAR(eqtv19689),[40151],[],[]))
19690 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40154],[40154],[]))
19693 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(UNKNOWN),[40175],[40175],[]))

Well.... yes. I can see why that would cause problems, as there's
hardly anything in there! 40153 and 40154 are the ''a type
variable. 40151 is x : ''a -> ''a and 40175 is the 5.0 floating point
number.

What I don't understand is that the state for equality types at the
end of the first pass, where it correctly detects an equality type
error, is this:


State EQ:
19684 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40153,40154],[40154],[]))
19685 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40153,40154],[40154],[]))
19688 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_VAR(eqtv19689),[40151],[],[]))
19690 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40154],[40154],[]))
19692 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[0,40143,40144,40145,40146,40147,40148,40149,40150,40151,40152,40153,40154,40171,40172,40173,40174,40175],[40154,40175],[]))
19693 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[0,40143,40144,40145,40146,40147,40148,40149,40150,40151,40152,40153,40154,40171,40172,40173,40174,40175],[40154,40175],[]))
19694 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[0,40143,40144,40145,40146,40147,40148,40149,40150,40151,40152,40153,40154,40171,40172,40173,40174,40175],[40154,40175],[]))

There is lots of label information in this state, certainly enough to
show that there is a type error in the program. Hm.

*** 2012-08-27

(2012-08-27-10:16)

Going to work on the same example I've been working on for the last
few days and try to get this label problem sorted out. What I might do
is give the error every label in the program at constraint generation
time just to see what the constraint generation algorithm would do
with that information. If it fails then something else is wrong,
because if it has all of the labels in the program then it can't
possibly be a problem with labels.

(2012-08-27-11:40)

I'm almost certain that this has to be a label problem, I've been
constructing artificial label sets to use for this program and that
seems to generate equality type errors perfectly fine. When the
initial equality type error is generated though before minimisation it
looks like all the labels are there, I can't see any that are
missing.

(2012-08-27-13:02)

Then again, I just gave created an error with every single label in
the entire program, and the minimisation algorithm still failed.

(2012-08-27-15:20)

One thing I'm noticing is that the state gets reset half way through
for some reason. I assume this is something to do with the
minimisation algorithm, but I might have to look into it and check
that later.

(2012-08-27-15:39)

Alright, I've made some kind of headway, there was an equality type
variable not being stripped correctly, and now that it is the state
looks like a lot better (just before unification fails):

State EQ:
19684 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40153,40154],[40154],[]))
19685 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40153,40154],[40154],[]))
19688 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_VAR(eqtv19689),[40151],[],[]))
19690 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[40154],[40154],[]))
19692 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(EQUALITY_TYPE),[0,40143,40144,40145,40146,40147,40148,40149,40150,40151,40152,40153,40154,40172,40173,40174],[40154],[]))
19693 : EQUALITY_TYPE_DEPENDANCY((EQUALITY_TYPE_STATUS(UNKNOWN),[40175],[40175],[]))

The current problem I'm having right now might actually be quite
simple. An equality type error is generated because there aren't two
endpoint labels for the error it's currently working on, but I think
that the error that it's working on is actually not an equality type
error, and is being incorrectly generated because the code to put
equality type status values into the state is not correct in all
instances. Hopefully this is indeed the case, as that would be quick
to fix.

(2012-08-27-16:14)

Great, this example works now, and the slice looks fine. I'm going to
prod at it until it falls apart so I can find out if anything more
needs to be done in this respect.

(2012-08-27-16:37)

Yeah, I'm happy with this. I've added this example to the analysis
engine test database, but I think it's affected something in
code2.sml. I'll have to run through the tests and check for
breakage.

(2012-08-27-17:09)

Ah yes there is a bit of breakage here but it shouldn't be too tough
to fix, it's the case where two equality type variables are
constrained to be equal to one another which I changed while I was
debugging. I'll fix that up before merging and pushing.

(2012-08-27-18:47)

Fixed the couple of tests that failed, it was due to a trivial
bug. Going to commit and merge.

As far as I see it there are four items with respect to equality types
remaining.

-> Generating equality constraints for non-accessor based code
-> Detection of equality type error where 'eqtype' is in a signature
-> Value declarations with ticks

I'll look at another one of these tonight, I'm hoping that value
declarations with ticks and generating equality constraints for
non-accessor based code will not be too complex, I think handling the
eqtype keyword might be a little more work in the sense of getting the
slices right. I'll play around with these a little more this evening.

*** 2012-08-28

(2012-08-28-10:55)

I've moved the text from the whiteboard into this research log file, I
need it to work on.

(2012-08-28-11:49)

Did some more printing of the pgfmanual by binary chopping away to
find the pages which the printer silently fails on. The pages are
239,340,645,646. These pages fail to print both from G47 and from my
office. I'll maybe just print these at home or something. Anyway,
on to other things.

(2012-08-28-12:03)

I'm going to take a quick look at the
function-type-specified-as-equality.sml test file. It looks like this:

let
    val id : ''a -> ''a = fn x => x
in
    id 5.0
end;

What currently happens is EQUALITY_TYPE constraint values are
generated for the ''a terms, and the NOT_EQUALITY_TYPE constraint is
assigned correctly to the 5.0 term, but there is nothing linking the
two up.

There are a few strange equality type variable constraints which are
coming from the basis, I'm not sure where they are coming from
precisely. The code is probably starting to include labels correctly
from the basis, that's something that I'll be looking at soon anyway.

(2012-08-28-12:57)

Ok this doesn't look a million miles away from the
solution. Currently, when solving the id accessor to the binder
located in the declarations section of the let expression, these
constraints are generated:

(EQUALITY_TYPES) Unification.sml: solving an equality type accessor. Labels = [40165]
(EQUALITY_TYPES) Unification.sml: sem = EQUALITY_TYPE_VAR(eqtv19693)

(EQUALITY_TYPES) Unification.sml: id = 1693

(EQUALITY_TYPES) Unification.sml: bind = TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n1,OTHER_CONS,l40151),ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l40151):TYPE_DEPENDANCY(TYPE_VAR(t31861,(1694,40153),POLY,EQUALITY_TYPE_VAR(eqtv2233)),[40152,40153]
,[],[]),l40151),FIELD_CONSTRUCTION((2,l40151):TYPE_DEPENDANCY(TYPE_VAR(t31861,(1694,40153),POLY,EQUALITY_TYPE_VAR(eqtv2233)),[40153,40154,40155],[],[]),l40151)],-,l40151),l40151,EQUALITY_TYPE_STATUS(UNKNOWN)),[40147,40148,40149,40150,401
51],[],[])

(EQUALITY_TYPES) Unification.sml: label of binder = 40149

Inside there is type variable 31861 which has label 40153, which is
the ''a expression, but it has equality type variable 2233, which is
an equality type variable which is generated from somewhere within the
basis. There's quite a few of the pieces floating around here, I think
I'll go through the constraint generation algorithm for each stage and
check that all equality type variables are being propagated correctly.

(2012-08-28-13:21)

Ok yes I think I see the current problem here, these constraints show
the problem:

(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31855,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: EXPLICIT_TYPE_VAR(1694,t31861,l40153,UNKNOWN)
(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31853,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: EXPLICIT_TYPE_VAR(1694,t31861,l40153,UNKNOWN)
(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31854,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: EXPLICIT_TYPE_VAR(1694,t31861,l40153,UNKNOWN)
(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31857,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: EXPLICIT_TYPE_VAR(1694,t31861,l40153,UNKNOWN)
(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31856,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: EXPLICIT_TYPE_VAR(1694,t31861,l40153,UNKNOWN)
(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31854,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: EXPLICIT_TYPE_VAR(1694,t31861,l40153,UNKNOWN)

The EXPLICIT_TYPE_VAR here has an equality type status of UNKNOWN,
which would be fine except fro the fact that its label is 40153, which
is the first ''a type variable. Put short, equality type constraints
have not been written for explicit type variables yet, so I'll have to
tweak the constraint generator for that.

(2012-08-28-14:00)

Note that explicit type variable accessors are only generated for 'a
and ''a terms. I'm adding in code now for the ''a term.

(2012-08-28-14:26)

This equality type variable 2233 that's reared its head is proving to
be confusing. I know it's been generated inside the basis but where or
why is a mystery. The labels associated with it are labels solely
inside the user file that I'm sending in, so why is the variable
generated inside the basis? It's a bit strange.

(2012-08-28-15:02)

I don't know what this label refers to, I tried to print out a
labelled basis file, but pdflatex exploded which isn't actually that
surprising as the file is huge.

(2012-08-28-17:19)

I noticed something in Ty.sml which might explain why basic tuple
examples don't work yet, going to have a little look at that
(specifically, the constytuple construction in Ty.sml). It's odd that
this works when using any accessor though, though I'm happy that
solution fell out of whatever I was working on at the time.

I'm changing constytuple to have status EQUALITY_TYPE, just to see
what happens. Perhaps this status will propagate through to where I
want it to go, and I can just set up a constraint to the tuple
components that way. Maybe the best solution is to analyse how the
process works with accessors and try and change that solution to work
for tuples without the use of accessors.

(2012-08-28-17:49)

Changing constytuple was a dead end, there's not really any solution
available there. I'm going to look at how the code with accessors
works, and see if that can be tweaked a little to accommodate code
examples without accessors.

(2012-08-28-18:06)

In this simple example:

val x = (1, 2.0); x=x

An equality type error is detected because when we look up the binding
of x, we strip all equality type variables that are present inside the
binding. In this case, the equality type variable that is there is
assigned to NOT_EQUALITY_TYPE, which clashes with the equality type
variable passed through when solving the accessor, which is mapped to
EQUALITY_TYPE in the state.

Well in the case that I'm working on there aren't any accessors to
look up. But the accessor is equivalent to making an equality type
variable for the tuple as a whole, right? Or perhaps having that
equality type variable stored in the type variable that represents the
whole term (where then equality type variables inside the tuple should
be stripped).

This is the binding of x for the basic example above.

(EQUALITY_TYPES) Unification.sml: bind = TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n2,OTHER_CONS,l40148),ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l40148):TYPE_DEPENDANCY(TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39624):TYP
E_DEPENDANCY(TYPE_CONSTRUCTOR((n3,DECLARATION_CONS(6),l29),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l30),[28,30],[],[]),l29,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,27,29,1032,39625,39626,39627,39628],[],[]),l39624),FIELD_CONSTRUCTION((2,l3
9624):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n3,DECLARATION_CONS(6),l29),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l30),[28,30],[],[]),l29,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,27,29,1032,6043,6044,6045,6046,6047,6048,6049,6050,6586,6587,6588,
6589,6590,6591,6592,6593,6594,6595,6597,6598,6599,39630,39631,39632,39633,39634,39635],[],[]),l39624),FIELD_CONSTRUCTION((3,l39624):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n272,DECLARATION_CONS(6),l6049),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l6
050),[6048,6050],[],[]),l6049,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,6043,6044,6045,6046,6047,6049,6605,6606,6607,6608,6609,39637,39638,39639,39640,39641,39642],[],[]),l39624),FIELD_CONSTRUCTION((4,l39624):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n2
73,DECLARATION_CONS(6),l6049),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l6050),[6048,6050],[],[]),l6049,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,6043,6044,6045,6046,6047,6049,6614,6615,6616,6617,6618,39644,39645,39646,39647,39648,39649],[],[]),l3962
4),FIELD_CONSTRUCTION((5,l39624):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n275,DECLARATION_CONS(6),l6049),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l6050),[6048,6050],[],[]),l6049,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,6043,6044,6045,6046,6047,6049,6632,
6633,6634,6635,6636,39651,39652,39653,39654,39655,39656],[],[]),l39624),FIELD_CONSTRUCTION((6,l39624):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n270,DECLARATION_CONS(6),l5298),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l5299),[5297,5299],[],[]),l5298,
EQUALITY_TYPE_STATUS(UNKNOWN)),[0,5292,5293,5294,5295,5296,5298,6035,6036,6037,6038,6039,39658,39659,39660,39661,39662,39663],[],[]),l39624),FIELD_CONSTRUCTION((7,l39624):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n270,DECLARATION_CONS(6),l5298),
ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l5299),[5297,5299],[],[]),l5298,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,5292,5293,5294,5295,5296,5298,6035,6036,6037,6038,6039,6043,6044,6045,6046,6047,6048,6049,6050,6641,6642,6643,6644,6645,6646,6647,6648
,6649,6650,6652,6653,6654,6655,6656,39665,39666,39667,39668,39669,39670],[],[]),l39624)],-,l39624),[39621,39622,39623,39624,40150],[],[]),51,POLY,CONSTANT(1,210,40150),l40150,EQUALITY_TYPE_STATUS(UNKNOWN)),[40149,40150],[],[]),l40148),FI
ELD_CONSTRUCTION((2,l40148):TYPE_DEPENDANCY(TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],
[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONSTRUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l7
85),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,10089,10090,10091,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,
39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n301,DECLARATION_CONS(61),l10090),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,1008
5,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)],-,l39728),[39725,39726,39727,39728,40152],[],[]),52,POLY,CONSTANT(2.0,373,40152),l40152,EQUALITY_TYPE_VAR(eqtv19683)),[40151,401
52],[],[]),l40148)],-,l40148),l40148,EQUALITY_TYPE_STATUS(EQUALITY_TYPE)),[40144,40145,40146,40147,40148],[],[])

The closest thing that we have here is an standard equality constraint
between a TYPE_VAR and a TYPE_POLY:

(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31849,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728
):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONST
RUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,1008
9,10090,10091,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n301,DECLARATION_CONS(61),l10
090),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)],-,l397
28),[39725,39726,39727,39728,40149],[],[]),52,POLY,CONSTANT(2.0,373,40149),l40149,EQUALITY_TYPE_VAR(eqtv19682))

Equality type variable 19682 turns out to be mapped to
NOT_EQUALITY_TYPE in the state, so if I can track where the generation
of type variable 31849 comes from, perhaps I can track it to a place
where I can insert an equality type variable which is mapped in the
state as an EQUALITY_TYPE, causing an equality type error. That should
do the trick. This depends on where this type variable is generated,
if it's generated in some far away abstract place with no link to
ExpOp then it's a dead end.

I see however in the constraint generation output there is this:

TYPE_CONSTRAINT(((TYPE_VAR(t31850,-,POLY,EQUALITY_TYPE_VAR(eqtv19689)),TYPE_VAR(t31849,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN))),[40154],[],))

The problem here is that eqtv19689 is mapped as follows:

40154:  EQUALITY_TYPE_CONSTAINT(((EQUALITY_TYPE_VAR(eqtv19689),EQUALITY_TYPE_VAR(eqtv19688)),[40154],[],))

Where eqtv19688 is mapped to:

EQUALITY_TYPE_CONSTAINT(((EQUALITY_TYPE_VAR(eqtv19688),EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE)),[40155],[],))

Label 40155 is the label of the second 2.0 term in the example, where the
example is: (1, 2.0) = (1, 2.0)

(2012-08-28-18:25)

The equality type variables which are mapped in the state to
NOT_EQUALITY_TYPE include eqtv19688, eqtv19689, eqtv19682 and
eqtv19683.

If I'm to look for a similar solution to how it's done with accessors,
the only unification constraints to look at are those with those
numbers in them, as they are the values which are going to be
stripped.

Equality type variables 19682 and 19683 are very closely related, as
the labels are right beside each other in the program. I'll just
consider these labels, as the other two equality type variables are on
the left hand side of the term, and a solution would be easily just
extended to cover those.

Equality type variable 19683 is actually just inferred from 19682 and
there are no real constraints there, so I'm just going to look at the
19682 equality type variable number.

There aren't many constraints including that equality type variable
number, so here they are:

1. (EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19683) and EQUALITY_TYPE_VAR(eqtv19682). Deps = [] and Labels = [40148]

2. (EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31843,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: TYPE_POLY(ROW_VAR(s10542),52,POLY,CONSTANT(2.0,373,40149),l40149,EQUALI
TY_TYPE_VAR(eqtv19682))

3. (EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19682) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [] and Labels = [40149]

4. (EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31850,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728
):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONST
RUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,1008
9,10090,10091,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n301,DECLARATION_CONS(61),l10
090),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)],-,l397
28),[39725,39726,39727,39728,40149],[],[]),52,POLY,CONSTANT(2.0,373,40149),l40149,EQUALITY_TYPE_VAR(eqtv19682))

5. (EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31849,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728
):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONST
RUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,1008
9,10090,10091,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n301,DECLARATION_CONS(61),l10
090),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)],-,l397
28),[39725,39726,39727,39728,40149],[],[]),52,POLY,CONSTANT(2.0,373,40149),l40149,EQUALITY_TYPE_VAR(eqtv19682))

6. (EQUALITY_TYPES) Unification.sml: solving type constraint of two TYPE_POLY constructors (eq1=EQUALITY_TYPE_VAR(eqtv19682), eq2=EQUALITY_TYPE_VAR(eqtv19688))...

Right, constraints 1 and 3 are not what I want, as they just bind that
variable to a status, which is well handled now. Constraint 2 isn't
much use to me either, that's just extending the equality type status
to eqtv19683.

Constraints 4, 5 and 6 are the ones with my focus.

Constraint 6 is making sure that the two real numbers are of the same
type so that there isn't a type error in the comparison of the
tuple. The function which creates this constraint must know somehow
it's dealing with a tuple, so perhaps something simple could be added
to also check that each component also has a top level EQUALITY_TYPE
constraint. This might be a good area to look at.

*** 2012-08-29

(2012-08-29-09:58)

I'm going to work on the SML equality types code tests for a while,
and then try to write something up about the way that equality types
work. I need to think some more about the constraints that I was
getting yesterday, it would be nice to be finding errors in that test
today.

(2012-08-29-10:31)

I still like the idea of looking to see where constraint 6 at the end
of yesterday's log comes from. I'm going to look into that, as that
should work well. Essentially, when creating the (TYPE_POLY_1,TYPE_POLY_2)
constraint, make some constraints (eqtv, TYPE_POLY) and (eqtv,
TYPE_POLY_2) and check that they are satisfiable. I'll need to find
the point where these constraints are generated, that might take a
little time but the solution would be quite nice, so I'll take a look
at it.

(2012-08-29-13:30)

It looks like we have use the same type variable for each element in a
tuple, so if we have:

(1,2) = (3, 4)

Then the type variable used to represent 1 also represents 3. I'm
getting this from the constraints below.

(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31849,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: TYPE_POLY(ROW_DEPENDANCY(ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l39728
):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,39729,39730,39731,39732],[],[]),l39728),FIELD_CONST
RUCTION((2,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n5,DECLARATION_CONS(61),l784),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l785),[783,785],[],[]),l784,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,3,4,5,6,782,784,1032,10084,10085,10086,10087,10088,1008
9,10090,10091,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11143,11144,11145,39734,39735,39736,39737,39738,39739],[],[]),l39728),FIELD_CONSTRUCTION((3,l39728):TYPE_DEPENDANCY(TYPE_CONSTRUCTOR((n301,DECLARATION_CONS(61),l10
090),ROW_DEPENDANCY(ROW_CONSTRUCTION([],-,l10091),[10089,10091],[],[]),l10090,EQUALITY_TYPE_STATUS(UNKNOWN)),[0,10084,10085,10086,10087,10088,10090,11160,11161,11162,11163,11164,39741,39742,39743,39744,39745,39746],[],[]),l39728)],-,l397
28),[39725,39726,39727,39728,40149],[],[]),52,POLY,CONSTANT(2.0,373,40149),l40149,EQUALITY_TYPE_VAR(eqtv19682))

(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31849,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: TYPE_POLY(ROW_VAR(s10544),54,POLY,CONSTANT(2.0,373,40155),l40155,EQUALI
TY_TYPE_VAR(eqtv19688))

Both of these type variable numbers are the same but the labels are
different, as I've already described. This is quite strange. This
might also be used for things other than the equality of row
variables, so I wouldn't be able to input extra constraints here to
handle this example.

(2012-08-29-14:29)

Right, I see where that is happening, it's in the case where a type
variable is being constrained to a TYPE_POLY, but the type variable
already exists in the type variable state. In that case, the right
hand side of the state entry is constrained to the aforementioned
TYPE_POLY, which is this case leaves us with the constraint TYPE_POLY
and TYPE_POLY when we recurse to solve.

The best plan might be to track down the type variable which is
constrained to be both of the TYPE_POLY terms (tv31849) and make the
constraint there. I'll need to find out where that type variable is
created.

Some notes on this type variable:

-> A constraint is made earlier using this type variable (t31850,
   t31849). Note that t31850 has eqtv19689 (NOT_EQUALITY_TYPE) attached to it.
-> A constraint is made from this type variable to a row variable
   (s10544), which has the 4.0 constant attached to it and
   eqtv19688 (NOT_EQUALITY_TYPE)
-> This type variable appears in the cst2 variable of expop which
   holds the constraints for the right hand side. The label it's
   attached to is the 40154 label (the right hand side real number, 4.0)
-> Type variable t31850 appears in the type constructor constraint
   below. I might need to look at this:

40151:  TYPE_CONSTRAINT(((TYPE_VAR(t31846,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)),TYPE_CONSTRUCTOR (TYPENAME_CONSTRUCTION(record,OTHER_CONS,l40151),ROW_CONSTRUCTION([FIELD_CONSTRUCTION((1,l40151):TYPE_VAR(t31848,-,POLY,EQUALITY_TYPE_STATUS
(UNKNOWN)),l40151),FIELD_CONSTRUCTION((2,l40151):TYPE_VAR(t31850,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)),l40151)],-,l40151),l40151,EQUALITY_TYPE_STATUS(EQUALITY_TYPE))),[40151],[],))

Label 40151 here is the tuple on the right hand side as a whole. I see
that the top level status, that is the tuple as a whole, has
EQUALITY_TYPE status, this is correct. But each top level element in
the tuple should also have this status. It does however know that we
are dealing with a record (a tuple is just a record is disguise).

There are two field constructions, and each have equality type
variables. tv31848 and tv31850 which I've talked about already.

tv31848 should refer to the integer argument on the left hand side,
the first element of the tuple. I've checked and this is indeed the
case.

So what I should do then is when a record construction is seen on the
left or right hand sides of ExpOp, go through all the field
constructions and constrain each of the type variables in the field
constructions to equality type status EQUALITY_TYPE.

*** 2012-08-30
tags: {equality-types, write-up}

(2012-08-30-11:05)

I had a bit of a thought this morning that there would be something in
the constraint path which would help me solve this example, but
unfortunately it doesn't look like that is the case. I see that
AtExpTuple is called, which then maps over all its components:

val (tvl, eqtvs, csts, csss) = unzipFour (map (f_labexp "X") expl)

The equality type variables here are the equality type variables that
are at the top level that I wanted aren't they? These haven't been
programmed quite right yet, so this information is actually thrown
away. Maybe just finding a way to create the constraints for this
function correctly will be enough to make these tests pass.

(2012-08-30-12:53)

I'm going to stop working on this example for a little while as I want
to look at how equality types could be written up (what is essentially
an extension of chapter 14 of Vincent's thesis).

(2012-08-30-13:13)

It looks like I need to write possibly these sections:

External Syntax
Constraint Syntax
Constraint Generation
Constraint Solving
Constraint Filtering
Slicing

The external syntax section describes to the reader how the SML syntax
that we are handling has changed. So for example the section on
local declarations has a section 14.2.1 in Vincent's thesis which
describes the change to the external syntax:

dec ::= local^l dec_1 in dec_2 end

So the external syntax changes that are relevant to describe for
equality types would be the addition of the eqtype keyword to
signature declarations. Signatures are discussed in section 14.7, and
an extension to the external syntax is given there. I essentially just
want to extend this extension.

In section 14.7.1 (which shows the external syntax for signatures),
this is shown:

sigid  ∈ SigId      (signature identifiers)

sigdec ∈ SigDec ::= signature sigid \overset{l}{=} sigexp
                  | dot-d ( \overset{--->}{term} )

sigexp ∈ SigExp ::= sigid^l | sig^l spec_1 .... spec_n end
                  | dot-s ( \overset{--->}{term} )

spec   ∈ Spec   ::= val vid :^l ty
                  | type dn^l
                  | datatype dn \overset{l}{=} cd
                  | structure strid :^l sigexp
                  | dot-d ( \overset{--->}{term} )

It looks like I would just extend 'spec' to be something like this:

spec   ∈ Spec   ::= .... | eqtype dn^l

I can't think of any other external syntax changes apart from the
specification of the eqtype keyword. I need to check to see if ''a
appears in the external syntax as well, as it's possible that it may
have been omitted.

(2012-08-30-13:53)

Ok, it doesn't look like ''a is mentioned anywhere in the thesis, so
I'll need to extend any external syntax a little further than that.

(2012-08-30-14:14)

The 'a definition seems to fall under this text:

An internal type τ μ is a type construction and is built from an internal type
constructor μ and its argument τ (such as the polymorphic list type ’a list, where
’a is an explicit type variable in SML). To simplify the formalisation of Core-TES,
external (tc) and internal (μ) type constructors both take exactly one argument.

Perhaps I would need to point out that τ can now take the form ''a as
well as just 'a.

(2012-08-30-14:29)

Actually, I don't think I would have to extend the external syntax for
this. In figure 11.3, we have the definitions:

τ ∈ ITy ::= α | τ μ | τ_1 -> τ_2 | <τ, \overset{-}{d} >

where α is defined as α ∈ ITyVar  (internal type variables)

That should be sufficient to use ''a in the external syntax. That
said, I will need to be able to distinguish between ''a and
'a. Perhaps something like this might be good to do?

α ∈ ITyVar   (internal non-equality type variables)
β ∈ IEqTyVar (internal equality type variables)
τ ∈ ITy ::= α | β | τ μ | τ_1 -> τ_2 | <τ, \overset{-}{d} >

Something like that might come in handy.

(2012-08-30-15:17)

Updated this document to have tags. It's about time that was
done. Still need to do the rest of this month at some point because
sometimes searching backwards for things is awkward.
*** 2012-08-31
tags: {equality-types, write-up}

(2012-08-31-09:45)

My goal today is to get slices for equality type errors involving
tuples and do some more of the write-up. I'm hoping next week to
improve equality type reporting for signatures using ''a, as some
cases don't work yet, then handle the eqtype keyword.

(2012-08-31-10:12)

I see that the tuple-with-function-call-inside.sml example is working
correctly now, something else I did yesterday must have fixed that
example. I'll add it to the test case database.

(2012-08-31-11:19)

In the test 'signature-equality-constraint-on-tuple.sml', the reason
we don't get a slice is because we pass a tuple in. If the tuple is
made an accessor to a tuple, then the example works (well, three
endpoints appear, which is incorrect, but that's probably trivial to
fix). The most important example right now to fix is the one with
tuples.

(2012-08-31-11:40)

Looking over the work that I did yesterday in terms of write-up, I
think some of the text that I wrote about what should be in the
external syntax section should actually be in the constraint syntax
section. So perhaps say that the only external syntax to change is the
addition of the eqtype keyword:

spec   ∈ Spec   ::= .... | eqtype dn^l

Then under constraint syntax changes perhaps something like this:

α ∈ ITyVar   (internal non-equality type variables)
β ∈ IEqTyVar (internal equality type variables)
τ ∈ ITy ::= α | β | τ μ | τ_1 -> τ_2 | <τ, \overset{-}{d} >

(2012-08-31-11:58)

There are no new environments, I guess something that I would be doing
would be extending figure 11.7, which contains the constraint
generation rules.

So to take an example, rule G4:

fn pat =>^l exp -|> <α, [(ev=1_1);ev^l;e2;(α \overset{l}{=} α_1 -> α_2)]> <= pat -|> <α_1, e_1>> /\ exp -|> <α_2, e_2>

is annotated with equality type information. Anonymous functions, or
indeed any kind of function, is attributed with NOT_EQUALITY_TYPE
status (or, in fact, they are attributed with an equality type
variable which has that status assigned to it in the state map).

(2012-08-31-14:02)

I've been thinking a bit how equality constraints for tuples could be
handled. The issue is basically that AtExpTuple gets a whole bunch of
equality type variables back from the functions that it calls to work
out constraints for each of the components of the tuple.

It would be nice if the equality type variable that is created at the
AtExpTuple level could somehow be assigned to all of the equality type
variables for each component. I think this would require a change in
the way that equality type information is represented in the state
though. I'll have to think about this, maybe the equality types in the
state map should be mapped to lists of equality types rather than just
a single equality type. Either that, or AtExpTuple could return a list
of equality type variables? That way they all could be mapped to a
status in ExpOp in a fairly straightforward manner?

** 2012-09
*** 2012-09-02
tags: {equality-types}

(2012-09-02-21:41)

Just having a quick a look at things while I'm on a train. This
netbook might not be up to the task, but I'll have a look at the tuple
situation again.

(2012-09-02-21:47)

The MLB files aren't being generated from the .cm files
correctly. It's a bit poor that. There is a bug for it in the bugzilla
database I think, I'll check when I get an internet connection.

(2012-09-02-21:52)

Hm yes, after some thought this whole list idea sounds like a good
plan. At the moment, this happens when we encounter a tuple (debug
print statement omitted).

| f_atexp indent (A.AtExpTuple (expl, _, lab, _)) =
let
  val indent = convertIndentToSpaces indent
  val tv = T.freshTypeVar ()
  val newEqTypeVar = T.freshEqualityTypeVar ()
  val (tvl, equalityTypeVars, csts, csss) = unzipFour (map (f_labexp (indent^SS.bottomLeftCurve^SS.straightLine)) expl)
  val cst = E.unionConstraintsList csts
  val contextSensitiveSyntaxError = E.unionContextSensitiveSyntaxErrors csss
  val c   = E.initTypeConstraint (T.consTYPE_VAR tv) (T.constytuple tvl lab) lab
in (tv, eqTypeVar, E.consConstraint (lab, c) cst, contextSensitiveSyntaxError)
end

So we have a few things concerning equality type variables here:

1) the fresh equality type variable newEqTypeVar
2) the equality type variables (equalityTypeVars) that come back from
   mapping f_labexp over each of the components in the tuple.

The change I'm proposing would be to generate not just one type
variable, but one for each component in the tuple, then return a list
of them.

This solution would also be used for records (AtExpRecord), and lists
(AtExpList).

By changing the return type of f_atexp I need to also change the
return type f_exp (as it calls f_atexp).

f_exp is called by f_quote, f_labexp, and f_progone. The equality type
variables returned to f_progone aren't used, so that's
irrelevant. f_quote is called only by f_atexp, so that's alright as
that would be changed anyway. And so much for my luck, f_labexp is
called all over the place, so rather a few changes would need to be
made.

Right, I'm just going to get on with it and see what I can do before
this train arrives. Here goes.

(2012-09-02-22:25)

There's a new function in the constraint generator called
createNewEqualityTypeVars, which takes as input a list of equality
type variables and a label, and will generate fresh equality type
variables and a constraint between the fresh variable and the one
existing in the list. It's being returned as a pair, so I'll return
from f_AtExpTuple a list of the left hand side of the pairs as the new
equality type variables, and put the list of the constraints on the
right hand side of the pairs in with the rest of the constraint values
that are being returned.

(2012-09-02-22:59)

Alright this should work I think:

| f_atexp indent (A.AtExpTuple (expl, _, lab, _)) =
let
  val indent = convertIndentToSpaces indent
  val tv = T.freshTypeVar ()
  val (tvl, eqtvs, csts, csss) = unzipFour (map (f_labexp (indent^SS.bottomLeftCurve^SS.straightLine)) expl)
  (* we can get a whole bunch of equality type varibles back when looking at tuples, because
  * there is an equality type variable for each component of the tuple. We need to create fresh
  * equality type variables for each component and return a list of the fresh variables and the
  * new constraints generated *)
  val (newEqualityTypeVars, newEqualityTypeConstraints) = unzipTwo(createNewEqualityTypeVars eqtvs lab)
  val cst = E.unionConstraintsList csts
  val contextSensitiveSyntaxError = E.unionContextSensitiveSyntaxErrors csss
  val c   = E.initTypeConstraint (T.consTYPE_VAR tv) (T.constytuple tvl lab) lab
  val newConstraints = foldr (fn (x, xs) => (E.consConstraint (lab, x) xs))
                             cst
                             (c::newEqualityTypeConstraints)
  in (tv, newEqualityTypeVars, newConstraints, contextSensitiveSyntaxError)
end

I don't think we'll lose any constraints using foldr like that, it
should be fine.

I'm going to go ahead and change the other functions to work with this
new return type.

(2012-09-02-23:03)

Graargh it's everywhere, this is going to take a few hours. I'll
revert back to this point if everything explodes, though it should be
fine *touches wood*.

*** 2012-09-03
tags: {equality-types}

(2012-09-03-00:21)

Leaving a note here for tomorrow. I'm currently changing the f_exp
function to return as its second parameter a list of equality type
variables. Ignore the compilation warnings, they are incorrect. Look
at the AtExpTuple case to see what sort of thing we should be doing to
get this list of equality type variables. Don't forget to get all the
constraints that are generated for all the equality type variables
too, we're going to need everything.

(2012-09-03-09:31)

Going to continue from where I left off yesterday, with any luck I'll
have equality type errors for tuples at the end of the day.

(2012-09-03-11:03)

This is probably going to take all day, but I'll try and stop sometime
around lunchtime and look over some of the text I wrote about writing up.

(2012-09-03-14:57)

What is going on with AtExpTuple? It gets lists of list of equality
type variables? Why is that the case? I'm trying to figure out if
that's something that we want or not. I think it is in the event that
we have tuples inside tuples? Hm.

(2012-09-03-15:37)

Right it's compiling. I need to go back to AtExpTuple to sort out that
situation, as I just left it commented out for the moment, I'm going
to run all the tests again to check that they all still.

(2012-09-03-16:24)

The tests broke in some fun new ways but I've patched them back to
health now I think. I'm going to keep doing that until everything is
fine, then I'll go back and work on what to do about the tuple
constraints, then hopefully equality type errors should start
appearing when tuples are involved.

(2012-09-03-16:29)

The tests that are now broken are the ones involving datatype
constructors. I'll look through the log and figure out what's going on
there.

*** 2012-09-04

(2012-09-04-10:17)

Didn't get around to any of the write-up yesterday, so I'm going to
look at that a bit now.

(2012-09-04-12:17)

I'm not sure what the deal is with the constraint syntax with respect
to the accessors, should they be extended? I have put in place a new
type of accessor. This will look confusing in the paper because there
is one more type of accessor than there is binder, so that either:

a) needs to be explained as it makes the code clearer (right?)
b) needs to be changed in the implementation (do we sacrifice code quality?)

(2012-09-04-13:05)

Alright, enough playing with greek letters. Going to try and fix up
the examples that broke yesterday

(2012-09-04-18:07)

Had a meeting with Joe instead. Next steps are to finish the work on
tuples, then handle the eqtype keyword. The val tick tick stuff can be
left until later.

(2012-09-04-23:31)

Hm, I can't find this bug which is causing failures in tests involving
equality types and datatypes. One of the constraints must be getting
lost, because no equality type errors are being generated for datatype
constructors. All the other tests seem to work fine... it must be just
one of the cases in the constraint generator for just one of the
abstract syntax tree nodes. Question is which one... :/

*** 2012-09-05

(2012-09-05-09:52)

What I'm planning to do today is to find this bug where datatype
constructors no longer get equality type errors because of the new
list representation I'm using to pass things around, then attempt to
get equality type errors with tuples.

If I'm able to do both today, I'll stop and do a bit of writing and
tomorrow look at handling the eqtype keyword.

(2012-09-05-10:06)

The problem seems to be with the equality type variable that's
returned when solving the case of TYPE_VAR where we get back the
TYPE_POLY expression which has the equality type variable inside:

(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31857,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: TYPE_POLY(ROW_VAR(s10546),51,POLY,CONSTANT(5.0,373,40164),l40164,EQUALITY_TYPE_VAR(eqtv19689))
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19689) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [] and Labels = [40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19690) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [40164] and Labels = [40163,40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19691) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [40164] and Labels = [40162,40163,40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19693) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [40164] and Labels = [40160,40162,40163,40164]
(CONSTRAINT_SOLVING) Unification.sml: returning 'Success' status from the unification algorithm

whereas in the case previously:

(EQUALITY_TYPES) Unification.sml: solving the case of TYPE_VAR, which is this: TYPE_VAR(t31857,-,POLY,EQUALITY_TYPE_STATUS(UNKNOWN)) and something else, namely this: TYPE_POLY(ROW_VAR(s10546),51,POLY,CONSTANT(5.0,373,40164),l40164,EQUALITY_TYPE_VAR(eqtv19689))
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19689) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [] and Labels = [40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19690) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [40164] and Labels = [40163,40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19691) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [40164] and Labels = [40162,40163,40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19692) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [40164] and Labels = [40160,40162,40163,40164]
(EQUALITY_TYPES) Unification.sml: solving an equality type constraint of EQUALITY_TYPE_VAR(eqtv19688) and EQUALITY_TYPE_STATUS(NOT_EQUALITY_TYPE). Deps = [40164] and Labels = [40160,40162,40163,40164]
(EQUALITY_TYPES) Unification.sml: status already exists in the map for equality type variable (EQUALITY_TYPE)! Checking for equaliy type error...
(EQUALITY_TYPES) Unification.sml: Equality type error detected. Label information: l = 40164, ls = [40154,40155,40156,40157,40158,40160,40161,40162,40163,40164], deps = [40158,40164]

The equality type variable numbers and label information should be
exactly the same because the example has not changed between these
runs. So I can see there is a difference towards the end of this
output.

When solving equality type variable 19691 with the new list
representation, we then move to solve 19693 which is successful and no
error is generated. Previously, when solving 19691 we then move to
solve 19692, then 196988 and discover there is an error.

The output from both representations should be exactly the same
(right?), so this difference should be found and changed.

(2012-09-05-10:39)

There is no 19693 variable... so somehow extra equality type variables
must be being generated.

(2012-09-05-11:25)

The diff is proving hard to read, it's going to be easier if the
constraints are generated in the same order with the previous method
as they were with this list representation, not for any technical
reason but just because the diffs will be easier to follow.

(2012-09-05-11:31)

That turned out to be a good idea, there is are only a few differences
here. Will bear that in mind for the future.

(2012-09-05-12:01)

I have discovered why the constraints for datatype constructors have
disappeared, and it's to do with the ExpApp case of the constraint
generation process. Previously, the code worked like this with
respect to equality types:

Get equality type variable from left hand side α
Get equality type variable from right hand side β
Make a new equality type variable γ
Make constraint α -> γ
Make constraint γ -> β
Return equality type vairable γ (and new constraints, naturally).

It's now the case that the left hand side and the right hand side are
no longer single equality type variables but are now lists and the
code is currently doing this:

Get equality type variables from left hand side α
Get equality type variables from right hand side β
Make new equality type variables γ_1 to γ_n and create the constraint
γ -> (current list item) over the list (α @ β).
Return list of γ variables and list of new constraints.

This is not what used to happen. So now I have to think about what I
want to do. Perhaps I want to do something like this:

Get equality type variables from left hand side α
Get equality type variables from right hand side β
For all α in α_1 to α_n, create constraint α_i -> (δ | δ ∈ β)
Return list of γ variables and list of new constraints

This would certainly create at least the same constraints that were
created initially. I'll implement this and see what happens, we should
get the errors back.

(2012-09-05-12:46)

Oh wait, I can't do that because the solving algorithm represents
constraints as functions, so an α_i value can't be mapped to two
different β_i values. Hm. I'm going to find out if there can indeed be
multiple values in both lists by running through the test database,
that should tell me whether I need to update the constraint solving
algorithm or not.

(2012-09-05-13:00)

There are multiple equality type values on the left and right hand
sides of the application function, which makes things difficult.

I'm going to go back and look at precisely why tuples work when using
accessors but they don't if no accessors are used, otherwise I need to
change the constraint solving algorithm to handle one equality type
variable being constrained to multiple other equality type variables,
which is a headache that I don't want. Maybe I can find another,
cleaner solution to this.

(2012-09-05-14:50)

The problem seems to be partially concerned with the way that equality
type variables are propagated with applications, which I don't like
the look of at all. It works well for datatype constructors, but it
doesn't work well in some cases for function application. I'm going to
take a look at it now.

(2012-09-05-16:34)

The application problem is a bug but I'll come back to that, and
continue the tuple work for now. AtExpTuple will get a list of
equality type variables for the top node of each component of the
tuple. I'll need a special constraint to handle this I think,
essentially just checking if any of the equality type variables it
gets end up mapped to NOT_EQUALITY_TYPE, then the tuple itself cannot
be tested for equality.
*** 2012-09-06

(2012-09-06-12:06)

There are two ideas I have for handling tuples. The first is to just
create a binder for them, then solve the accessor, which might work,
but I still have to think about that some more.

The alternative is to take the fresh equality type variable that is
generated in AtExpTuple, and make an equality constraint between it
and a *list* of equality type variables that are received by mapping
f_labexp over the components of the tuple (a new constructor would be
needed to represent this). The type of the equality type state map
would have to change so that the right hand side is a list but I think
this would be not too difficult to accomplish.

I'm going to look a little into the binder/accessor idea though,
because that really does work just so well at the moment.

(2012-09-06-13:24)

Utilising the way that binders and accessors are represented is a
no-go. I'm going to do it the way that I thought it should be done
anyway, by representing the right hand side of the equality type state
map as a list and allow one equality type variable to be mapped to a
list of items.

The equaltyType datatype in Ty.sml is getting a new constructor,
EQUALITY_TYPE_VAR_LIST, created in mind specifically for tuples and
records. This will allow one equality type variable to be constraint
to a whole list of other equality type variables. The constraint
solving algorithm will need to be extended so that:

a) it can handle and store lists instead of just values of status values
b) if an NOT_EQUALITY_TYPE constraint is attributed to an equality
type variable inside a list on the right hand side of the equality
type state map, the entry is removed and the left hand side be put in
the map as NOT_EQUALITY_TYPE.

(2012-09-06-14:59)

So it turns out that because the state map is of type equalityTypeVar ->
equalityType, and I extended the equalityType datatype already, the
constraint solver will already handle a system where the right hand
side can be a list of equality type variables. So all I really need to
do is handle the constraint solving rules to include the following
scenarios:

Let α, β_1... β_n be equality type variables, and STATE_EQ be the
part of the state map responsible for holding equality type variables.

1. If solving α -> EQUALITY_TYPE_VAR_LIST(β_1, ... β_n) then:
   - if α ∉ STATE_EQ, insert mapping α -> EQUALITY_TYPE_VAR_LIST(β_1, ... β_n)
   - if α ∈ STATE_EQ and the right hand side is an
     EQUALITY_TYPE_VAR_LIST, then raise an exception (I don't think
     this should ever happen). If it's a status, do nothing. If it is
     an equality type variable, raise an exception (surely this should
     never happen either).

2. If solving α -> .... (NOT_EQUALITY_TYPE), then:
   - if α ∉ STATE_EQ, then insert into STATE_EQ: α -> NOT_EQUALITY_TYPE
   - if α ∈ STATE_EQ and the right hand side is an
     EQUALITY_TYPE_VAR_LIST, then replace the entry in STATE_EQ with:
     α -> NOT_EQUALITY_TYPE. Other cases remain the same

3. If solving β -> .... (NOT_EQUALITY_TYPE), and β is in an
   EQUALITY_TYPE_VAR_LIST for some α, then same procedure as normal
   but with additional constraint α -> NOT_EQUALITY_TYPE in STATE_EQ

(2012-09-06-20:32)

This is all very well and good but point three has a problem. How do we
check if β ∈ an EQUALITY_TYPE_VAR_LIST for some α? We could look
through all the right hand sides of the map but is that really what we
want to do? Isn't that inefficient?

It would be better to have some other component, so when looking up β
in the map part of the information we get back is a list of α values
that β is in the right hand side EQUALITY_TYPE_VAR_LIST of.

*** 2012-09-07

(2012-09-07-09:52)

The constraint generation side of handling tuples, records, and so on
should be done (at least for tuples, but when this is working
extending it to records should be trivial as I just need to write the
same constraints but in the part of the constraint generator that
handles record abstract syntax tree nodes). All I should need to do is
write the constraint solving algorithm and that will be fine.

The way I'm going to handle the problem I was worrying about in log
entry (2012-09-06-20:32) is to have the right hand side of the state
map for equality types as a tuple, with the first component playing
the role of what the old right hand side used to do and the second
component storing information for the EQUALITY_TYPE_VAR_LISTs the left
hand side is a member of.

(2012-09-07-12:25)

I've decided that extending the equalityType datatype to hold this
information isn't the right way to go, there are going to be pattern
match changes everywhere and the only thing that can go on the right
hand side of the tuple state entry is a list of equality type
variables anyway. I'm just going to store that as a plain list and
lose the datatype extension.

(2012-09-07-13:10)

Wait no we do need that datatype constructor, it just shouldn't make
its way through to constraint solving. At constraint solving time we
should just unwrap the constructor from the equality type variable
list and put that in the state.

(2012-09-07-13:57)

Right that's compiling properly now. I'll write up the constraint
solving rules from the logs yesterday.

(2012-09-07-18:16)

I've had to think a little bit about one of the constraint rules, it's
often the case that a constraint can be made between some α and some
EQUALITY_TYPE_LIST β but α already exists in the map, mapped to some
dependancy γ on an equality type variable. I think in this case the
correct thing is to do γ -> EQUALITY_TYPE_LIST β?

In the case I have, the equality type variable in the dependancy γ I
think is mapped to an equality type status δ in the state. In that
case I should end up with δ -> EQUALITY_TYPE_LIST β, at which point I
should create constraints β_1 -> δ, β_2 -> δ, ..., β_n -> δ?

(2012-09-07-23:36)

I have noticed a little optimisation that can be made to the way
equality types are stored in the state environment. If we currently
are solving some constraint (α, β), where α and β are equality type
variables, if β is not in the state environment then we currently put
the mapping β -> EQUALITY_TYPE_DEPENDANCY(α) in the state environment.

We do not check however if α currently has an equality type status
assigned to it. I'm going to add in the change that if some mapping α
-> γ exists in the state where γ is an equality type status, then when
handling (α, β) allow the mapping β -> γ to go into the state
environment instead if γ is available. I'll implement this and run the
test framework to make sure this doesn't break anything.

(2012-09-07-23:43)

When I ran this against the test framework I got errors for some tests
because we didn't get multiple endpoint labels. This was a bug, which
has now been fixed. This change will therefore stay in place.

*** 2012-09-08

(2012-09-08-00:14)

I think the constraint solving rules are mostly written now. They might
not be perfect, I will have to test it, I'll try to find some time at
weekend for that. Compiling now to test on basic-tuple-example.sml.

(2012-09-08-01:00)

There were a few bugs but I've ironed them out now. Now we're getting
great type error slices for the basic-tuple-example.sml code file now,
great! I'll commit to the test framework now and update the master
test files at the remote end.

(2012-09-08-10:57)

I've done a little testing of the tuples and I'm happy with the slices
that I'm getting back, looks good.

I have also extended the solution to work for records (records are
technically a different node in the abstract syntax tree so a few
lines needed inserted in the constraint generation functions
associated with handling those nodes), so we're now getting slices for
these as well.

*** 2012-09-10

(2012-09-10-10:27)

Plan is to look at the equality type stuff (the eqtype keyword), and
getting that information put into the slice if necessary.

I think I'm going to look at the theory again tomorrow, and focus on
this today.

(2012-09-10-13:28)

There are a lot of constraints in the basis.sml file, it's going to be
quite hard to debug the constraints that are generated for this
file. I'm not sure how I'm going to figure that one out, I'll need to
restrict the amount of constraints shown to be part of the basis file
somehow I guess.

(2012-09-10-14:50)

Ahh, skalpel is being lovely again today. I think I'm going to find a
way to get Skalpel to ignore undefined identifiers if the user
specifies they want this, because I for one would like to consider
only this file. I don't care about anything outside the constraint
generator, I just care about the constraint generator.

Perhaps the solution is to persuade users to make .tes files rather
than have this option. But then Skalpel is going to take ages and I
don't want that. No, that's not the solution, I really just want to
consider this file.

(2012-09-10-15:44)

I'm enhancing the debug options because using CONSTRAINT_PATH on the
basis exposed some things that haven't been written yet. It's worth
noting that it's faster to use Skalpel than the compiler, which is a
good sign (though it would be much faster if I didn't have to press F7
about 12 times to get past the undeclared identifiers).

(2012-09-10-16:46)

The -d CONSTRAINT_PATH parameter has been enhanced so it covers much
more of the abstract syntax tree, I should be able to work with this
better now. There are still a few nodes which don't work correctly,
but it's perfect for the most part.

(2012-09-10-16:53)

Quick note here about generating constraints for:

type <something>
type <something> = <something else>
eqtype <something>

I think each of these three cases has its own different abstract
syntax tree node. If this is indeed the case constraint generation
should be not too tricky to do at all (fingers crossed ;).

*** 2012-09-11

(2012-09-11-09:30)

Going to look at the theory today and then move on to implementation
at some point, would be good to keep working on that.

(2012-09-11-11:48)

I've looked a little bit at the theory and made some notes on the
whiteboard but there's quite a lot here to parse with my eyes. I'm
going to take a look at this further.

(2012-09-11-17:28)

Finished a meeting with Joe, I'm going to focus more on the theory
than the implementation in the next few days. I think I might just
work solely on the theory in the day and then work on the
implementation in the evenings or something like that. Hoping to do a
bit of the eqtype keyword stuff this evening and then have another
look at the theory tomorrow morning and figure out how I'm going to
play this.

*** 2012-09-12

(2012-09-12-13:54)

I'm going to put the theory that I'm working on in the jpirie-phd
repo. It's going to be probably easier to make edits just in the .tex
file.

*** 2012-09-14

(2012-09-14-23:30)

Just leaving a note here for tomorrow, the constraint generation rules
that I'm mocking up for the equality types writeup I think should
contain something like 'l, <something>' above the equals sign in rule
G1 to denote an equality type variable is being used. I think that's
right way to do that. Not sure what to do for the other rules yet but
I'll have a think about them.

*** 2012-09-15

(2012-09-15-01:32)

I also think that I am going to have to put some text in the
constraint syntax section after all, as I'm going to need to define
the set of equality type variables (and most likely the equality type
status values as well). I'm not sure how to write that yet but I'll
think about it tomorrow and write something up then.

*** 2012-09-17

(2012-09-17-16:23)

From the way the constraint generator is described in the paper, it
looks like equality type information can be carried around in standard
type constraints, but when I initially tried this idea it did not work
very well as:

- multiple type constraints needed to be created in some cases to have
  the correct labels for equality type errors
- code lost modularity, in constraint generation but particularly in
  constraint solving, as solving algorithm for equality type variables
  got stuffed in with all the TYPE_VAR solving code
- extra information carried around in TYPE_VAR constructor which is
  completely irrelevant to equality type error detection
- complex to debug

*** 2012-09-18

(2012-09-18-03:03)

Note for tomorrow to find some of the definitions of variables and
write them down from the thesis. Flipping backwards and forwards for
definitions is time consuming.

*** 2012-09-19

I'm going to start making a list of the terms in the thesis with odd
names and then maybe we can change them later. Joe doesn't like them
either, so I guess they'll end up being changed in the paper.

*** 2012-09-20

(2012-09-20-11:15)

Leaving here some notes from the meeting with Joe yesterday.

Anything of the form:

type <something>

means that <something> is *not* an equality type if the signature in
which this is currently being defined is opaque. If however we see
this:

type <something> = <something else>

then <something> *is* an equality type, provided that the 'where'
keyword does not appear in <something else>. If it does, I think it's
possible that <something> might be not an equality type.

If the signature is translucent, then:

type <something>

does not say anything about the equality type status of
<something>. However,

eqtype <something>

will always mean that <something> is an equality type.

I need to check these rules further with Hamlet and by reading the standard.

(2012-09-20-13:51)

These rules don't seem to quite work as I expected. For example,
Hamlet thinks this program is typable:

val S = 10;
structure S = struct val x = 10 end;
S = S;

However, by appending this line

S + S;

This would no longer typable under Hamlet. Skalpel states this is
typable, Poly states this is typable also.

*** 2012-09-22

(2012-09-22-22:12)

A few notes on the way that signature constraint generation works (I'm
looking at this because I need to implement equality types for
signatures). I'm still working on the write-up but I'm going to take a
look at this while I am still storing most of the information related
to equality types in my head.

The basis file starts with:

structure Basis :> sig

[definition]

end = _structBasis

This is what happens with respect to lexical analysis and parsing.

The ':>' symbol as picked up by the lexer is called 'SEAL'. It is used
in the first line of code above as the first case of the below ML.grm
fragment:


strbindone :
  strid SEAL labsigexp EQUALOP labstrexp
    (fn (n, asc) =>
	let val (sid, masc) = strid (L.nextLabel n, asc)
	    val (si, pasc) = labsigexp masc
	    val (se, (q, asc')) = labstrexp pasc
	    val reg1 = R.consReg SEALleft SEALright
	    val reg2 = R.consReg EQUALOPleft EQUALOPright
	    val re   = getRegion EQUALOPright labstrexpleft
	    val ri1  = getRegion SEALright labsigexpleft
	    val ri2  = getRegion labsigexpright EQUALOPleft
	in (A.StrBindOneOp (sid, si (ri1 @ ri2), se re, [reg1, reg2], n, q), (q, asc'))
	end)
| strid COLON labsigexp EQUALOP labstrexp
    (fn (n, asc) =>
	let val (sid, masc) = strid (L.nextLabel n, asc)
	    val (si, pasc) = labsigexp masc
	    val (se, (q, asc')) = labstrexp pasc
	    val reg1 = R.consReg COLONleft COLONright
	    val reg2 = R.consReg EQUALOPleft EQUALOPright
	    val re   = getRegion EQUALOPright labstrexpleft
	    val ri1  = getRegion COLONright labsigexpleft
	    val ri2  = getRegion labsigexpright EQUALOPleft
	in (A.StrBindOneTr (sid, si (ri1 @ ri2), se re, [reg1, reg2], n, q), (q, asc'))
	end)
| strid EQUALOP labstrexp
    (fn (n, asc) =>
	let val (sid, masc) = strid (L.nextLabel n, asc)
	    val (se, (p, asc')) = labstrexp masc
	    val reg = R.consReg EQUALOPleft EQUALOPright
	    val re   = getRegion EQUALOPright labstrexpleft
	    val _ = D.printDebugFeature D.MLGRM D.PARSING (fn _ => "pattern detected: strid EQUALOP labstrexp")
	in (A.StrBindOne (sid, se re, reg, n, p), (p, asc'))
	end)


The first rule is the rule that fires in the code fragment discussed
as it is an opaque signature. The second rule will fire for
translucent signatures, and the third rule will fire if no signature
is specified.

Further along the line in constraint generation, we have three cases
for dealing with each of these three structure binding forms. I'll
just look at the first two cases here (using opaque or translucent
signatures).

(* structure binding using an opaque signature *)
and f_strbindone indent (A.StrBindOneOp (strid, labsigexp, labstrexp, _, lab, _)) =
    let val _   = D.printDebugFeature D.AZE D.CONSTRAINT_PATH (fn _ => "generating constraints for A.StrBindOneOp")
	val (ev1, cst1, css1) = f_labstrexp indent labstrexp
	val (ev2, cst2, css2) = f_labsigexp indent labsigexp
	val (ev3, strs, cst3, css3) = f_strid indent strid
	val c    = E.SIGNATURE_CONSTRAINT (ev2, NONE, ev1, SOME ev3, lab)
	val cst  = E.singleConstraint (lab, c)
	val css  = E.unionContextSensitiveSyntaxErrors [css1, css2, css3]
	val env  = E.ROW_ENV (E.CONSTRAINT_ENV (E.unionConstraintsList [cst1, cst2]), E.CONSTRAINT_ENV cst)
	val cst' = E.singleConstraint (L.dummyLab, E.LET_CONSTRAINT env)
   in (strs, E.unionConstraintsList [cst3, cst'], css)
   end
   (* structure binding using a translucent signature *)
  | f_strbindone indent (A.StrBindOneTr (strid, labsigexp, labstrexp, _, lab, _)) =
    let val _   = D.printDebugFeature D.AZE D.CONSTRAINT_PATH (fn _ => indent^"A.StrBindOneTr")
	val indent = convertIndentToSpaces indent
	val (ev1, cst1, css1) = f_labstrexp (indent^SS.verticalFork^SS.straightLine) labstrexp
	val (ev2, cst2, css2) = f_labsigexp (indent^SS.verticalFork^SS.straightLine) labsigexp
	val (ev3, strs, cst3, css3) = f_strid (indent^SS.bottomLeftCurve^SS.straightLine) strid
	val c    = E.SIGNATURE_CONSTRAINT (ev2, SOME ev3, ev1, NONE, lab)
	val cst  = E.singleConstraint (lab, c)
	val css  = E.unionContextSensitiveSyntaxErrors [css1, css2, css3]
	val env  = E.ROW_ENV (E.CONSTRAINT_ENV (E.unionConstraintsList [cst1, cst2]), E.CONSTRAINT_ENV cst)
	val cst' = E.singleConstraint (L.dummyLab, E.LET_CONSTRAINT env)
     in (strs, E.unionConstraintsList [cst3, cst'], css)
     end

Constraint generation is very similar in both cases. The main
difference is in the definition of 'c', in which the second and fourth
arguments are reversed. A SIGNATURE_CONSTRAINT is:

SIGNATURE_CONSTRAINT of evsbind

where ensbind is defined as this:

(* 1st envVar: instantiated signature
 * 2nd envVar: signature matching
 * 3rd envVar: enriched structure
 * 4th envVar: resulting structure
 * the bool if false if we want to impose some restrictions based on the
 * structure env (where clauses). *)
(* WARNING: it is suspected the above comment may not be relevant to the below. Read with caution! *)
type evsbind        = envVar        *
		      envVar option *
		      envVar        *
		      envVar option *
		      L.label

I'll need to really look in the constraint solving code to find out
what the real difference is I guess. I'll try and find some time
tomorrow for that.
*** 2012-09-25

(2012-09-25-21:12)

Doing a bit of implementation this evening, might not get as far as
generating new constraints for signatures, depends how long it takes
me to figure out how environment variables are used in the
implementation.

(2012-09-25-22:03)

The difference between the opaque signature constraint generation and
the translucent constraint generation seems to be in the what is put
into the right hand side of the state environment for env3.

In the case of translucent signatures, this is is made on the right
hand side:

buildFEnv (*justBuildEnv*) env1 state true

and for opaque signatures:

freshenv' (renameenv' env0 state) (SOME O.empty) false

I had initially thought that buildFEnv would be
'buildFreshEnvironment', but the buildfreshenv' function call for
opaque signatures has me uncertain on that one.

(2012-09-25-22:36)

Yeah, buildFEnv looks like it builds a fresh environment:

fun buildFEnv env state bstr = buildEnv env state (SOME (F.finitState ())) bstr

Indeed yes, F is the structure Fresh, and finitState initialises a new
state.

(2012-09-25-23:36)

I'm being led off into a series of function calls, might not be able
to untangle this this evening...

*** 2012-09-26

(2012-09-26-00:23)

Nope, I'm not able to untangle this right now. This is going to take a
while. Will continue with this tomorrow evening if a meeting isn't on
the cards, maybe I'll be able to make sense of more then.

*** 2012-09-26

(2012-09-26-11:04)

I could really, really, really really, really, really, use a list of
all the definitions from Vincent's thesis. I'm going to build one at
some point, I might have to do that today.,
*** 2012-09-28

(2012-09-28-17:31)

A short note on how a part of equality type solving with tuples works
because it's not obvious from the code.

We will always generate the constraint equality type variable =
equality type variable list after we have generated the constraints
for the individual tuple components. Therefore when solving the
constraint equality type variable = equality type variable list, if
the equality type variable is mapped to a status at some point in the
constraint solving process this will already exist in the state
environment map. This is why the constraint solving code for solving
equality type status = equality type variable list is only present in
the equality type variable = equality type variable list constraint
solving case in the constraint solver.
** 2012-10
*** 2012-10-15

(2012-10-15-11:36)

I've made a basic example including an equality type error, which is below.

signature S =
sig
    eqtype t
end

structure T : S =
struct
    type t = real
end

I can't test this on skalpel at  the moment though because the real
keyword doesn't have equality type constraints attached to it which
come from the basis, so I'm going to have to do that first.

(2012-10-15-15:20)

I may need to make some sort of tiny basis which contains only the
definitions used in my small program, because the output for the basis
is not really practical to work with, it's just huge. I'll need to
take care though that I don't create some solution for my mini-basis
which doesn't actually work for the full basis, because that would be
the very definition of sadness.

(2012-10-15-17:36)

I have made a small basis which I should be able to work with, the
output that I'm getting for the constraint path and for the constraint
generation process is significantly reduced so there's much less
background noise.

The definition of real I believe to be basically a binder, with the
using of the keyoword real in the sml program being an accessor. If so
I should be able to reuse existing code that I wrote for writing other
parts of the equality type problem.

(2012-10-15-17:51)

I've extended the debugging feature information to include the
information for signatures correctly, as the output was buggy. It may
need a bit of tweaking but shouldn't be anything major.

(2012-10-15-22:32)

I've fiddled with the program I'm giving as input and with the cut
down version of the basis and I think I've managed to reduce it down
to about 5 lines or so I should be able to get something out of that.

(2012-10-15-23:44)

The constraints which come from the debugging output are for the
signature expressions and the structure expressions (that is, the body
of the signatures and structures).

*** 2012-10-16

(2012-10-16-00:47)

Ah, I might continue to use a sort of mini-basis for debugging, as
I've realised that I'm actually able to print out state information
now without generating vast amounts of information, it might be easier
to do then add debugging mechanisms for printing out different parts
of the state environment.

The information that is coming out of the state environment isn't too
useful, I'm going to need to look at the constraint generator a little
more closely. It would also be useful to get a labelled version of the
basis so I can see which labels are associated with which
constraints. This should again be a minor modification on the existing
debugging framework.

(2012-10-16-01:02)

I'm going to leave this for the night and pick this up again
tomorrow. I need to figure out some way of generating constraints
dependent on whether the signature is translucent or opaque, I'm not
sure that the existing mechanism for doing that will be sufficient. I
think if I attach equality type information to the type variables, it
might be possible be able to use the existing framework, but it will
make the code hard to debug and maintain.

This is a bit difficult to break down easily, as numerous different
parts really need to be working before I can get equality type errors
reported in this way. I might try to attach equality type information
to the real type and get the real keyword in the basis included in a
user slice when the program is for example:

datatype mydt = firstCons of real
firstCons(5.0) = firstCons(5.0)

as currently the real keyword in the basis is omitted. Writing
constraints so that keyword is included might be a stepping stone to
this problem, I'll have to think about whether that's worth chasing
after tomorrow.

(2012-10-16-11:13)

It looks like when types are looked up in the basis they are given
a type constructor accessor. I managed to trace one generated for the
type t = real part of the program (same program as yesterday), but I'm
not sure if this accessor will solve itself to a label which exists in
the basis and be able to draw conclusions from that. I'm guessing this
is the case but I'm looking into it now.

(2012-10-16-12:54)

I've added another option to the command line list called "-d
BASIS_LABELLING" which will export a labelled basis program. This
shouldn't really be used for the full basis, which may cause head
explosions, but rather for a smaller subset of a basis used for
debugging (which is what I'm using at the moment).

(2012-10-16-13:49)

I'm going to add θ information to the binders for type
constructors. I'll also need to create some mapping θ |-> Σ to go into
the state environment (θ and Σ are equality type variables and
equality type status values, respectively), but that will be handled
when the constraints for the basis structure are being generated.

(2012-10-16-15:36)

The right place to put this kind of constraint looks to be the
function which deals with type constructor bindigs, f_tyconbind. At
the moment, it does this:

[E.consBindPoly	{id = id, typeOfId=(T.TYPE_FUNCTION_VAR typeFunctionVar, E.TYPE, ref (E.emvar, false)), classOfId=(CL.consTYCON ()), labelOfConstraint=lab}])

I'll need to get some θ information in there somehow. Should I extend
this binder? Or perhaps use the equality type accessor stuff?

(2012-10-16-16:18)

What I'm planning to do is to insert a θ into this point in the
code, then pass the θ back through to the higher level functions which
deals with the signature declaration (eg type xyz vs type xyz =
int). Things will still change if the signature is translucent or
opaque though, so how is that going to work?

In truth, if the θ is stored there, then shouldn't the opaque vs
translucent solution work automatically? Hm, I guess I'll see when
I've finished implementing this bit, but it seems the right way to go
for the moment.

*** 2012-10-17

(2012-10-17-11:28)

The way that I'm planning to work things out for the moment is that if
we're currently looking at the basis, and we see something of the form
'type x', then give x a NOT_EQUALITY_TYPE status. I'm planning to do
this by putting a θ into the binding of the type constructor, and
passing the θ values back through from f_tyconbind where the type
constructor binding is made through to f_typdescone, and input (θ |->
Σ; Σ |-> NOT_EQUALITY_TYPE) into the state environment at that
point.

This should at the very least add the basis definition of types into
the type error slice when the user makes an equality type error.

(2012-10-17-12:02)

One approach that I'm looking at is to actually changing the
definition of what a binder actually is. It could be this:

(* a binder is used for program occurences of id that are being bound*)
type 'a bind = {id    : I.id,                        (* Identifier for which we generate this constraint *)
		eqaulityTypeVar : T.equalityTypeVar  (* holds an equality type variable                  *)
		bind  : 'a,                          (* Type of the identifier                           *)
		class : CL.class,                    (* Status/class of the identifier                   *)
		lab   : L.label,                     (* Label of the contraint                           *)
		poly  : P.poly}                      (* Constraint on the poly/mono binding if binding   *)

Here the field 'equalityTypeVar' is added to the bind record.

The other approach would be to put an equality type variable
into the 'bind' portion where the binder is constructed. I'll try
putting it in the bind portion first and see how that goes, then I
should be able to get access to that equality type variable easily
when solving accessors by just grabbing that field and stripping out
the variable.

(2012-10-17-12:44)

It looks like neither of the approaches I looked at are simple. The
first approach means changing the definition of a binder, which means
changes in quite a lot of places as binders are a fairly big part of
the system, on the other hand slotting the equality type variable into
the bind field of the bind record means changing the definition of a
type environment (currently (T.typeFunction * T.equalityTypeVar *
typeNameKind * (varEnv * bool) ref) genericEnv), which isn't that
pretty either. The type errors are going to take some time to solve
either way, so I'm going to think about this a little more before I
make a decision on which route to go down.

(2012-10-17-16:04)

At..... last. I thought it would take a while, ah well I guess that's
alright. I have added the θ to the 'bind' field of the binder by
adding an extra component in the tuple which is assigned to that
field. Hopefully I can play around with the constraints now and get
something working by the time I have to go on a search for something
tasty to eat.

I plan to take a look at the equality type variable that's being
passed around and make sure that's working properly, then constrain it
to be some Σ in some higher-up function that the one that deals with
type constructor bindings, and then from there change the accessor so
that it too carries an equality type variable with it, and remove the
Σ constraint that currently exists in SconReal. I doubt I'll plough
through all that today but I'll see what I can do.

(2012-10-17-17:40)

The equality type variable propagation has been done up to the point
of the function that deals with the binding of datatype names
(handling A.DatName). The equality type variable still needs to be
passed through to the functions that handle A.TypDescOne, then
A.TypDesc and finally A.SpecType. It is at the A.SpecType level that
the (θ |-> Σ) mapping should be constructed. The alternative to
A.SpecType is A.SpecEqtype, naturally, a mapping should occur there as
well but with an EQUALITY_TYPE constraint rather than a
NOT_EQUALITY_TYPE constraint. I'll do both at the same time before I
look into getting the accessors working with this equality type
variable to give the real endpoint location in the basis.

(2012-10-17-20:39)

Everything should be done now apart from creating the mappings at the
level of SpecType as I mentioned earlier. I need to think about what
is going to happen though with translucent signatures though, because
the constraints are different in that case. Maybe this will already be
handled for me, perhaps not. I'll need to look and work that out.

*** 2012-10-18

(2012-10-18-02:42)

I've added in the relevant lines so that the mapping from the θ to the
Σ values are made, so carrying a θ through from a type constructor
accessor should be the last step in getting the endpoint locations set
up in the basis. I'm going to do that tomorrow. From there, I'm going
to test what happens in the differences between opaque/translucent
signatures and check whether I get any functionality for free as I
suspect I will. Assuming that all works tomorrow and I don't run into
any errors which are too crazy I'll just continue to look at the
eqtype x vs type x vs type x = y vs type x = y where ... cases, as
there are a number of options to consider with respect to type
declarations in signatures, and how the signature is used.

This will mean that types which the user cannot check for equality
(currently only real) will be extended to cover every type when this
is working (assuming everything works correctly), aside from the
function type (as functions not being equality types is not specified
in the basis, naturally).

(2012-10-18-11:54)

I foresee a possible problem coming up which I may to have to
fix. The creation of the Σ valve is not until the point where we reach
the function that handles A.SpecType. At that point the mapping
(θ |-> Σ) is inserted into the state with the label attributed to the
current function that is being executed (f_spectype), which means that
it is the 'type' keyword which is held as the endpoint for the
equality type error. I think this is alright actually, this isn't a
problem? Will the endpoint always be the 'type' or 'eqtype' keyword
(same goes for eqtype)?

(2012-10-18-12:13)

I'm looking at changing how the accessors hold information. Currently,
the definition is this:

type 'a accessorId = {lid : I.lid, sem : 'a, class : CL.class, lab : L.label}

Now either I can hold the equality type information for that accessor in the 'sem'
portion of the accessor, or I can give it a new slot in the accessorId
type.

Note that accessorId used to be called 'accid', I'm changing this over
now because I don't think 'accid' is really clear enough.

(2012-10-18-12:34)

There's not much in the way of discussion here, the information has to
go into the record as a new field, and not sit in the 'sem' field of
the record (what does 'sem' even mean anyway?). The way that the*
accessors are defined is quite nice the way it is but integrating
equality type information into the sem field isn't practical given the
way accessors are defined in Env.sml. I'm going to put the new field
in.

(2012-10-18-13:27)

Hurray, Skalpel went a long way to helping me solve a type error. My
skalpel-view-next-part of slice binding is broken though, though
perhaps there's something funny going on with my system. Also, a
function like skalpel-highlight-slice-at-point would have been useful
here.

(2012-10-18-13:30)

I have made the modifications to accessors and the analysis engine is
compiling again. I should only now have to constrain the θ of the
accessor to be the same as the θ of the binder, and I should be able
to get endpoint locations in the basis for equality type errors.

(2012-10-18-15:43)

The equality type variable is now correctly propagated through a type
constructor accessor and a constraint is made from that to the
equality type variable associated with the binder with the correct
label.

Now the same approach needs to be done but this time from the other
side. In this user code:

signature S =
sig
    eqtype t
end

structure T : S =
struct
    type t = real
end


The 'real' keyword has the correct Σ attached to it with labels coming
from the basis. The 'eqtype t' also has the correct Σ attached to
it. So what needs to be done from here is to get the accessor for the
type t to get the θ that comes from the signature, and then constraint
the θ from the accessor of t to be equal to the θ for the real
keyword, and I should get a type error slice.

(2012-10-18-16:32)

Ah, it seems that in the 'type t = real' above, the 't' is not a type
constructor accessor at all, it is fact a binder, which means the
check between that and the type of t specified in the signature occurs
somewhere else. That makes sense I guess. The place where that is
checked is probably the same place that I need to write some equality
type variable information too.

I'm not sure exactly where to go to find where that connection is
made. I expect it's done somewhere in the unification algorithm
though.

(2012-10-18-17:26)

There is a function in the Unification.sml file called "matchSigStr"
which has a name indicating it might be relevant to what I want. This
function is used when solving signature environments and when solving
functors, so this might be just the thing.

The whole process of solving signatures I might refamiliarise with to
get a handle on this. It's also worth noting that the matchKind
(signature or opaque) is checked in the solveenv function when
SIGNATURE_ENV is pattern matched as an argument, and two different
things are done in each case. Probably I want to integrate into that
somehow.

(2012-10-18-17:36)

It looks like I need to blast debug printouts into the matchSigStr so
I can actually figure out for sure whether the parameters env1 and
env2 and for the environments for the signature and structure, and to
find where I might need to insert my equality type constraints. The
function isn't enormous, so I might have got off lightly there.

These names aren't great so I might clean these up a bit, but there is
a function called componeTyp, which might perhaps compare a type
declaration? This might be just the place I've been looking for.

(2012-10-18-19:38)

Yes, componeTyp is indeed the source of this:

| componeTyp _ es bind1 =
  List.mapPartial
  (fn bind2 =>
    if CL.classIsANY (E.getBindC bind1) orelse CL.classIsANY (E.getBindC bind2)
    then NONE
    else
	let
	    val (tyf1, eqtv1, tnKind1, cons1) = E.getBindT bind1
	    val (tyf2, eqtv2, tnKind2, cons2) = E.getBindT bind2
[.....]

I'm going to constrain the eqtv values here (θ values) to be equal to
one another and see what happens to the final state. I still don't
think I'll get an equality type error yet, I think there are still a
few functions that need propagation code written into them.

(2012-10-18-20:30)

I don't like the label getting used at the location. The whole
structure is probably going to be highlighted which shouldn't be the
case, I guess I'll have to fiddle with that later.

(2012-10-18-21:04)

Hooray, I'm almost at the point where I'm done with this example. The
unification algorithm is throwing its usual error:

"Error: Error! The unification algorithm terminated in a success state,
 but an error was generated previously! Hint: It has been found
 previously to be the case that this error is cased by a bug solely in
 the unification algorithm where some labels are not propagated
 correctly..."

I'm sure that's exactly what's happening here too, there's probably
one label that's just been left out along the way, or I have selected
one wrong label and one of the functions in the constraint path (or
during recursive calls in the constraint solver).

After fiddling around with labels, this example should be fine.

(2012-10-18-21:12)

I've had a quick look at the labels and it looks like all the ones
that I wanted to take are in fact there. There are perhaps extra
labels that I have to take because a signature is involved in the
error. I'll have to look into this.

*** 2012-10-19

(2012-10-19-10:14)

I think the labels that are missing are the ones dictating that 'we are
in the user structure', 'we are in the user signature', and 'we are in
the basis'. It'll take some fiddling but I should be able to get
this example working today.

(2012-10-19-12:42)

I have found the missing labels for the user program, which are the
labels for structure declarations and so on. I'm going to look for the
basis ones now, then I'll arrange things so that they get placed into
the state environment. From there I should have an equality type error
for this program.

(2012-10-19-13:04)

I have found the missing labels for the basis portion of the
program. The problem was really how labels are taken in equality type
constraints when solving accessors and signatures.

The question now is how to get these labels into the state environment
with the rest of the labels in the equality type constraints. I'll
look into this now and figure something out.

(2012-10-19-14:26)

These labels can be placed into the state environment by using
T.EQUALITY_TYPE_DEPENDANCY instead of T.EQUALITY_TYPE_VAR for the
second component of the equality type constraint, then putting the
labels for the structure information inside that dependancy. The
constraint solving rules *should* handle this, but I'll do some
testing now to see whether that will hold up alright.

(2012-10-19-14:48)

Wooooo done it. There's a lovely error for the user program:

signature S =
sig
    eqtype t
end

structure T : S =
struct
    type t = real
end

I have checked this with the full basis and I also get the same
result. I'm running the test database to check I didn't blow anything
else up but I expect it to be fine.

(2012-10-19-15:45)

This example also works with any other non-equality type in place of
real, such as 'exn' or 'substring'. The endpoint is highlighted to be
the 'type' keyword in the basis, perhaps that should be 'type real'?
Anyway, changing that should be trivial.

(2012-10-19-18:35)

I'm going to take a stab at another of the equality type tests
(value-declaration-with-type.sml) and I need to change the type of a
binder that's used (E.consBindPoly in f_identPat). It'll take a while
but I need to do it anyway because I'm going to need it in another of
the tests I think.
*** 2012-10-26

(2012-10-26-10:15)

A little more on the implementation today. I'm changing the way that
equality type variables are carried through in binders so that the
variable is part of the record itself rather than sitting in the
'bind' field of the declaration of bind. It'll make it easier to pass
the couple of tests that I have left which aren't supported yet and
it'll make understanding the code a little cleaner.

I committed a little work on this last night also, it's sitting in the
devel branch but it won't compile at the moment, I'm going to fix that
up now.

(2012-10-26-11:21)

Oh, that didn't take as much time as I thought it was going to, was
expecting another hour of debugging at least.

I'm going to run the test database through and check nothing has
broken, then check the code for constructing the bindings is correct
with the record field, and then remove the old values and run the test
database again. Hopefully I should be able to do all that and still
have hours to spare afterwards, I've been through these type errors
before so I should be able to work through these quickly...

(2012-10-26-11:48)

No tests failing, moving on to making sure that the equality type variables
are coming from the record field and not from the 'bind'.

(2012-10-26-12:58)

Right I've moved everything over but one of the tests is no longer
passing (basic-eqtype-translucent, a test which uses the eqtype
keyword in a signature). I suspect one of the equality type variables
got lost along the way or something, but I'll find it again :o).

(2012-10-26-13:17)

Alright, that's done. I needed to create a new function to grab the
equality type field from a given binder, then use it on two separate
binders and create a constraint that the equality type variables
should be equal. Good, glad that didn't take long.

All the tests which currently do not work are the tests with type
annotations, which I believe to be not handled at the moment at
all. Those tests and finishing off the use of the eqtype keyword
(errors can be detected incorrectly in user signatures if I remember
correctly) are all that's left, the rest should be 'bugs' rather than
'unsupported features'.

(2012-10-26-13:41)

I'm looking at the value-declaration-with-type.sml example, a simple
example. It looks like there are two problems:

1. the equality type variable associated with the identifier to the
   left hand side of the type annotation is lost

2. When solving VALUEID_ACCSSOR constructors, equality type variables
   are ignored.

With any luck this might be fairly straightforward? All I should have
to do in the first case is go over the constraints and find where one
is getting lost, and in the second case just create a constraint θ_1
=^l θ_2, then the test should pass. I think that's all there is to it
(at least for this test).

(2012-10-26-14:26)

I have a type error slice for this program now, but one of the labels
is wrong. That's fine, should be easy to fix.

(2012-10-26-15:12)

Done! This test looks fine now.

*** 2012-10-29

(2012-10-29-12:28)

I'm looking at the test that isn't passing which is relating to
datatype constructor names.

While looking at this I've noticed that the ConsBindOf constraint
generation code isn't using the best way of carrying around type
variables, and it embedding that inside the information which is
already being passed around. I tried this approach because it's
usually the sensible one, but in this case I found it to be
horrendously confusing to debug.

I think it's OK to leave for the moment but I'm going to add a warning
to the top of the file. I might need to fix it up to pass this test.

(2012-10-29-16:50)

I've passed about another three of the tests today which is pretty
good, the three that are left are all really variants on the same
underlying language feature so I'm going to take a stab at that
tonight and see how far I get. If I manage to get some of those done
then the only thing left to do will be finishing the spec eqtype up,
then a bit of testing and development for equality types should be
done I guess.

I've been thinking a little about the constraint generation rules of
the writeup though that I've got in the other repository, and what to
do if the rules have been redefined. Maybe I want to present the
equality type feature in all variants of such rules, hrm.
