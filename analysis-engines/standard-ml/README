~~~~~~ WeLcOmE tO ThE wOnDeRFul WoRlD oF tYpE eRrOr SlIcInG,
~~~~~~ here are the topics covered in this README file.
~~
~~ How to add, replace, move tests in the testcase database
~~ How to run the slicer on the testcase database
~~ How to generate a binary compiled using MLton
~~ SMLTES special commands/comments
~~ Files
~~

===================================================================
                SMLTES SPECIAL COMMANDS/COMMENTS
===================================================================

We allow 5 special SMLTES commands.  These commands are in the form of
comments:
  - (**SKALPEL-DEC topdec *) where topdec is a unique topdec.
  - (**SKALPEL-SPEC spec *) where spec is a spec
  - (**SKALPEL-USE-FILE file *) where file is the path to a file.
  Unfortunately right now a file name cannot contain spaces, for
  example, as our parser would think two files are specified instead
  of one and that would be a parsing error.
  - (**SKALPEL-SET-BASIS file *) where file is the path to a file.
  The same comment applies here concerning file.
  - (**SKALPEL-CLEAR-BASIS*)
  - (**SKALPEL-QUASIQUOTES bool*) true to turn on the use of
  quasiquotations.  WARNING: this switch is not working yet.  The
  default value is true.

These commands can only be topdecs.   The SKALPEL-USE-FILE,
SKALPEL-SET-BASIS and SKALPEL-CLEAR-BASIS commands will always have
the entire file in which they are placed as scope, even if used say at
the end of a file.


===================================================================
                             FILES
===================================================================

Makefile.in

PGOps.sml
  Contains functions using SML/NJ graph features to compute the
  dependencies of a cm file.  There are functions to generate .dot
  or .tes files from a .cm file.

README

RunSlicer.sig
RunSlicer.sml
  Signature and structure of the interface with the slicer.

Tester.sig
Tester.sml
  Main loops to run the slicer and testing framework.

ast (Abstract syntax)

  -- AstMLB.sml
       Abstract syntax for MLB files.

  -- AstSML.sig
  -- AstSML.sml
       Abstract syntax for SML files.

  -- AstTest.sig
  -- AstTest.sml
       Testing module of the SML parser.

  -- sources.cm

configure

constraint (Constraint system)

  -- ClassId.sig
  -- ClassId.sml
       Module to deal with identifier's classes.

  -- ConsId.sig
  -- ConsId.sml
       Module to deal with binders.

  -- Env.sig
  -- Env.sml
       Constraint system.

  -- Expans.sig
  -- Expans.sml
       Module to deal with constraints on expression expansiveness.

  -- Poly.sig
  -- Poly.sml
       Module to deal with constraints on type polymorphism.

  -- Ty.sig
  -- Ty.sml
       Types.

  -- sources.cm

enum (Enumeration, minimisation, unification algorithms)

  -- Enumeration.sig
  -- Enumeration.sml
       Enumeration algorithm

  -- SearchSpace.sig
  -- SearchSpace.sml
       Search space for the enumeration algorithm.

  -- Filter.sig
  -- Filter.sml
       Filters.

  -- Fresh.sig
  -- Fresh.sml
       Definition of the substitutions used to refresh types and such

  -- Minimisation.sig
  -- Minimisation.sml
       Minimisation algorithm.

  -- State.sig
  -- StateEnv.sml
       Unification environment (unifiers, type environment)

  -- Unification.sig
  -- Unification.sml
       Constraint solver.

  -- sources.cm


error (Error data structure)

  -- Error.sig
  -- Error.sml
        Definition of the data structure of a type error.
        Export functions.

  -- ErrorKind.sig
  -- ErrorKind.sml
       Kinds of errors.

  -- ExtReg.sig
  -- ExtReg.sml
       Extended errors (coloured) used to distinguish between the
       different parts of an error.

  -- Html.sig
  -- Html.sml
       Function to export errors to an HTML file.

  -- Tag.sig
  -- Tag.sml
       Tags used by the Html structure to export errors.

  -- sources.cm

generation (Constraint generator)

  -- Analyze.sig
  -- Analyze.sml
       Constraint generation algorithm

  -- ValuePol.sig
  -- ValuePol.sml
       Deals with the value polymorphism restriction

  -- Name.sig
  -- Name.sml
       Builtin type names

  -- Op.sig
  -- Op.sml
       Builtin operators

  -- sources.cm

mlton-control.sml.in
  Initial file from which a file is generated (mlton-control.sml)
  that serves as an interface with the slicer and is used to compile
  the slicer with MLton.

parse (Parsers and lexers)

  -- Comment.sig
  -- Comment.sml
       To deal with comments and quotes when parsing a file.

  -- Infix.sig
  -- Infix.sml
       To deal with infix operators when parsing a file.

  -- LexDefs.sig
  -- LexDefs.sml
       To handles lex errors when parsing a file.

  -- ParseDefs.sig
  -- ParseDefs.sml
       To handles some parsing errors.

  -- ML.grm
  -- ML.lex
       Parser and lexer for SML programs.

  -- MLB.grm
  -- MLB.lex
       Parser and lexer for MLB bases.

  -- Parser.sig
  -- Parser.sml
       Calls the parser, deal with tes files and with the special
       SMLTES commands

  -- sources.cm

ppp (Printer and pretty printer)

  -- PPP.sig
  -- PPP.sml
       Parsing and pretty printing of our SML asts.

  -- sources.cm

region (Regions in source code)

  -- Region.sig
  -- Region.sml
       To deal with regions of bits of codes in files.

  -- sources.cm

sets (Various sets such as identifier or label sets)

  -- Ident.sig
  -- Ident.sml
       Identifiers, long identifiers, sets of identifiers.


  -- Label.sig
  -- Label.sml
       Labels, sets of labels.

  -- LongId.sig
  -- LongId.sml
       Sets of long identifiers.

  -- OrdId.sml
       Ordered identifiers.

  -- OrdKey.sml
       Ordered integers.

  -- OrdLid.sml
       Ordered Long identifiers.

  -- OrdLabLid.sml
       Ordered pairs: label, Long identifier.

  -- OrdIdl.sml
       Ordered labelled identifiers.

  -- OrdStr.sml
       Ordered strings.

  -- OrdSet.sig
  -- OrdSet.sml
       Sets of integers.

  -- sources.cm

slicing (Slicing algorithm)

  -- Slice.sig
  -- Slice.sml
       Slicing algorithm.

  -- sources.cm

sources.cm

utils (Various useful structures)

  -- Debug.sig
  -- Debug.sml
       To print debugging information.

  -- ErrorHandler.sig
  -- ErrorHandler.sml
       To deal with todo and impossible cases.

  -- Solution.sig
  -- Solution.sml
       To deal with various implementation of the slicer.

  -- SymbSlice.sml
       defines some symbols, such as the ones used in the slices.

  -- Tools.sig
  -- Tools.sml
       Some useful functions.

  -- VTimer.sig
  -- VTimer.sml
       A timer and useful functions to deal with timers.

  -- sources.cm


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright 2010 Heriot-Watt University
;;
;;
;; This file is part of the ULTRA SML Type Error Slicer (SMLTES) -
;; a Type Error Slicer for Standard ML written by the ULTRA Group of
;; Heriot-Watt University, Edinburgh.
;;
;; SMLTES is a free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; SMLTES is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with SMLTES.  If not, see <http://www.gnu.org/licenses/>.
;;
;;  o Authors:     Vincent Rahli
;;  o Affiliation: Heriot-Watt University, MACS
;;  o Date:        July 2010
;;  o File name:   README
;;  o Description: see top of the file.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
