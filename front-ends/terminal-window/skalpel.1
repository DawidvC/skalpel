.\" Process this file with
.\" groff -man -Tascii skalpel.1
.\"
\" ##############################################################
\" ##############################################################
\" ##
\" ## Copyright 2010 Steven Shiells
\" ## Copyright 2011 John Pirie
\" ##
\" ## This file is free software: you can redistribute it and/or modify
\" ## it under the terms of the GNU General Public License as published by
\" ## the Free Software Foundation, either version 3 of the License, or
\" ## (at your option) any later version.
\" ##
\" ## This file is distributed in the hope that it will be useful,
\" ## but WITHOUT ANY WARRANTY; without even the implied warranty of
\" ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\" ## GNU General Public License for more details.
\" ##
\" ## You should have received a copy of the GNU General Public License
\" ## along with Skalpel.  If not, see <http://www.gnu.org/licenses/>.
\" ##
\" ## Authors: Steven Shiells, John Pirie
\" ## Date: January 2010
\" ##
\" ###############################################################
\" ###############################################################
.TH SKALPEL 1 "January 2010" Linux "User Manuals"
.SH NAME
Skalpel \- runs a type error slicer for SML
.SH SYNOPSIS
skalpel [FILE] [-OPTIONS]
.SH DESCRIPTION
Skalpel runs the type error slicer for SML developed by the ULTRA
group of Heriot-Watt University, Edinburgh.  Traditional type error
messages given for SML can be hard to decipher and often indicate
incomplete and unprecise locations as the source of the programming
error.  The error messages produced are also biased because they
report only one location which is dependent on the way which the
abstract syntax tree is traversed.

The type error slicing tool aims to eliminate these problems.  The
error messages produced by Skalpel offer textual error
messages of the errors and highlights all and only those program
points which contribute to the error.

Skalpel achieves these properties using a number of
different phases; constraint generation, enumeration, unification,
minimisation and slicing.  An explanation of each is given below.
.IP "Constraint generation"
Skalpel traverses the source files given as input
and generates a large number of constraints which have to be satisfied
in order for the program to be correctly typed.
.IP "Enumeration"
Once a set of constraints has been made, Skalpel checks
if minimal subsets of the constraint set are unsatisfiable.  If one
subset of the constraint set is found to be unsatisfiable then a type error
exists.  Skalpel keeps looking through the program
trying to find constraint subsets which are not satisfied.  This is
continued until a time limit has been reached.  For details on how to
change this time limit please see the
.B -t
or
.B --time
options.
.IP "Unification"
Used by the enumeration algorithm to test the satisfiablity of diverse
subsets of the constraint set. If an error is found, the type error
slicer moves on to the minimisation phase otherwise it returns to the
enumeration phase.
.IP "Minimisation"
When an error is found, the minimisation algorithm tries to find the
constraints which are required for the error to exist, removing those
that are not required in order not to include any unnecessary details
in the program slices used to report the error.
.IP "Slicing"
Uses the data produced during the previous phases to remove all
unnecessary details from the source code to produce a program slice.
.SH OPTIONS
.IP "-b | --basis <option>"
Specifies the basis options to use, valid options are;

0 - no basis

1 - uses a built in subset version of the Standard ML Basis Library

2 - uses a file as the basis.  This basis is the Standard ML Basis Library
plus some of the SML/NJ Library.
.IP "-bo <0 | 1>"
If set to 0, hides basis information when encountering overloading
errors. If set to 1, this information is shown.
.IP "-e | --emacslisp <file>"
Outputs the type errors found by Skalpel in Emacs Lisp
format to <file>.
.IP "-p | --perl <file>"
Outputs the type errors found by Skalpel in Perl format to <file>.
.IP "-s | --sml <file>"
Outputs the type errors found by Skalpel in SML format to <file>.
.IP "-x | --xml <file>"
Outputs the type errors found by Skalpel in XML format to <file>.
.IP "-w | --html <file>"
Outputs the type errors found by Skalpel in HTML format to <file>.
.IP "-t | --time <time>"
Sets the time for which Skalpel searches for new errors.
.IP "-i | --interactive"
Allows the user to cycle through the slices.
.IP "-n | --no-display"
Does not display the type error slices in the terminal window.
.IP "-l | --legend"
Displays the legend explaining the highlighting to the user.
.IP "-h | --help"
Displays help text to the user.
.IP "-v | --version"
Displays version information.
.SH FILES
.I /usr/bin/skalpel-bin
.RS
The binary of Skalpel.
.RE
.I /usr/bin/skalpel-perl-to-bash
.RS
A Perl script which transforms the type error slices in Perl format
to a format for which the slices can be viewed in a terminal window.
.SH DIAGNOSTICS
.IP "The output file <file> will not be produced by Skalpel."
.RS
When the user enters a <file> to store the output from the type error
slicer and <file> already exists.  The above message appears when the
user chooses not to replace the file or when they enter 3 incorrect
responses to the option of whether or not to replace the file.
.RE
.IP "The directory <dir> does not exist!."
.RS
When the user enters a filepath to a file to store the output from the type error
slicer and the directory specified does not exist.
.RE
.IP "Invalid usage!."
.RS
When the user does not run the command with valid options.
.RE
.SH BUGS
This command has not been well tested and is known to have some serious bugs. Some of the bugs are documented in our bug database which you can view on the web.

It is recommended that if problems are encountered that our Emacs user interface is used, as it is better supported.
.SH AUTHORS
Joe Wells  <jbw@macs.hw.ac.uk>

Vincent Rahli <rahli@macs.hw.ac.uk>

John Pirie <jp95@macs.hw.ac.uk>

Scott Fotheringham <sf47@macs.hw.ac.uk>

Mark Wyper <mw105@macs..hw.ac.uk>

Steven Shiells <ss215@macs.hw.ac.uk>

David Dunsmore <dd35@macs.hw.ac.uk>

.SH "SEE ALSO"
skalpel-bin(1), skalpel-legend(1), skalpel-perl-to-bash(1).
